
VINDSTYRKA_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005890  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005a24  08005a24  00006a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a9c  08005a9c  00007010  2**0
                  CONTENTS
  4 .ARM          00000000  08005a9c  08005a9c  00007010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a9c  08005a9c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a9c  08005a9c  00006a9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005aa0  08005aa0  00006aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005aa4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          00000164  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000174  20000174  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   000065a7  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a35  00000000  00000000  0000d5e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001c8  00000000  00000000  0000f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020f9c  00000000  00000000  0000f1e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008900  00000000  00000000  00030184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c3608  00000000  00000000  00038a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc08c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a88  00000000  00000000  000fc0d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  000fdb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00000019  00000000  00000000  000fdbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005a0c 	.word	0x08005a0c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08005a0c 	.word	0x08005a0c

080001d4 <InitCom>:

char Buffer_packet_Location[ReceiveCommandSize][ReceiveSize];	//physical location of buffered packets
void*	commandStack[ReceiveCommandSize];						//pointer to buffered packets

void InitCom()
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
	for (uint8_t I = 0; I < ReceiveCommandSize;I++)
 80001da:	2300      	movs	r3, #0
 80001dc:	71fb      	strb	r3, [r7, #7]
 80001de:	e00d      	b.n	80001fc <InitCom+0x28>
	{
	  commandStack[I] = &Buffer_packet_Location[I];				//bind pointers to physical location
 80001e0:	79fa      	ldrb	r2, [r7, #7]
 80001e2:	79f9      	ldrb	r1, [r7, #7]
 80001e4:	4613      	mov	r3, r2
 80001e6:	011b      	lsls	r3, r3, #4
 80001e8:	1a9b      	subs	r3, r3, r2
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	4a08      	ldr	r2, [pc, #32]	@ (8000210 <InitCom+0x3c>)
 80001ee:	4413      	add	r3, r2
 80001f0:	4a08      	ldr	r2, [pc, #32]	@ (8000214 <InitCom+0x40>)
 80001f2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t I = 0; I < ReceiveCommandSize;I++)
 80001f6:	79fb      	ldrb	r3, [r7, #7]
 80001f8:	3301      	adds	r3, #1
 80001fa:	71fb      	strb	r3, [r7, #7]
 80001fc:	79fb      	ldrb	r3, [r7, #7]
 80001fe:	2b05      	cmp	r3, #5
 8000200:	d9ee      	bls.n	80001e0 <InitCom+0xc>
	}
}
 8000202:	bf00      	nop
 8000204:	bf00      	nop
 8000206:	370c      	adds	r7, #12
 8000208:	46bd      	mov	sp, r7
 800020a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020e:	4770      	bx	lr
 8000210:	20000054 	.word	0x20000054
 8000214:	20000108 	.word	0x20000108

08000218 <R_bufferFull>:

bool R_bufferFull()
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	return (Pushindex == Popindex);	//buffer is full when push and pop index are identical
 800021c:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <R_bufferFull+0x20>)
 800021e:	781a      	ldrb	r2, [r3, #0]
 8000220:	4b06      	ldr	r3, [pc, #24]	@ (800023c <R_bufferFull+0x24>)
 8000222:	781b      	ldrb	r3, [r3, #0]
 8000224:	429a      	cmp	r2, r3
 8000226:	bf0c      	ite	eq
 8000228:	2301      	moveq	r3, #1
 800022a:	2300      	movne	r3, #0
 800022c:	b2db      	uxtb	r3, r3
}
 800022e:	4618      	mov	r0, r3
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	2000002c 	.word	0x2000002c
 800023c:	20000000 	.word	0x20000000

08000240 <R_bufferEmpty>:

bool R_bufferEmpty()
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	return (((Popindex + 1) % ReceiveCommandSize) == Pushindex); //buffer is empty when popindex is 1 behind push index
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <R_bufferEmpty+0x38>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	1c59      	adds	r1, r3, #1
 800024a:	4b0c      	ldr	r3, [pc, #48]	@ (800027c <R_bufferEmpty+0x3c>)
 800024c:	fb83 3201 	smull	r3, r2, r3, r1
 8000250:	17cb      	asrs	r3, r1, #31
 8000252:	1ad2      	subs	r2, r2, r3
 8000254:	4613      	mov	r3, r2
 8000256:	005b      	lsls	r3, r3, #1
 8000258:	4413      	add	r3, r2
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	1aca      	subs	r2, r1, r3
 800025e:	4b08      	ldr	r3, [pc, #32]	@ (8000280 <R_bufferEmpty+0x40>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	429a      	cmp	r2, r3
 8000264:	bf0c      	ite	eq
 8000266:	2301      	moveq	r3, #1
 8000268:	2300      	movne	r3, #0
 800026a:	b2db      	uxtb	r3, r3
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	20000000 	.word	0x20000000
 800027c:	2aaaaaab 	.word	0x2aaaaaab
 8000280:	2000002c 	.word	0x2000002c

08000284 <R_Push>:

bool R_Push(void** Buffer_p)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b084      	sub	sp, #16
 8000288:	af00      	add	r7, sp, #0
 800028a:	6078      	str	r0, [r7, #4]
	//uint8_t temp;
	if (R_bufferFull())										// If the buffer is full the received packet in not placed in the buffer and wil be overwriten on the next receive
 800028c:	f7ff ffc4 	bl	8000218 <R_bufferFull>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <R_Push+0x16>
		return false;
 8000296:	2300      	movs	r3, #0
 8000298:	e022      	b.n	80002e0 <R_Push+0x5c>

	void *temp = *Buffer_p;									//swapping pointers to array's
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	60fb      	str	r3, [r7, #12]
	*Buffer_p = commandStack[Pushindex];
 80002a0:	4b11      	ldr	r3, [pc, #68]	@ (80002e8 <R_Push+0x64>)
 80002a2:	781b      	ldrb	r3, [r3, #0]
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b11      	ldr	r3, [pc, #68]	@ (80002ec <R_Push+0x68>)
 80002a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	601a      	str	r2, [r3, #0]
	commandStack[Pushindex] = temp;
 80002b0:	4b0d      	ldr	r3, [pc, #52]	@ (80002e8 <R_Push+0x64>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	4619      	mov	r1, r3
 80002b6:	4a0d      	ldr	r2, [pc, #52]	@ (80002ec <R_Push+0x68>)
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	Pushindex = ((Pushindex + 1) % ReceiveCommandSize);
 80002be:	4b0a      	ldr	r3, [pc, #40]	@ (80002e8 <R_Push+0x64>)
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	1c5a      	adds	r2, r3, #1
 80002c4:	4b0a      	ldr	r3, [pc, #40]	@ (80002f0 <R_Push+0x6c>)
 80002c6:	fb83 3102 	smull	r3, r1, r3, r2
 80002ca:	17d3      	asrs	r3, r2, #31
 80002cc:	1ac9      	subs	r1, r1, r3
 80002ce:	460b      	mov	r3, r1
 80002d0:	005b      	lsls	r3, r3, #1
 80002d2:	440b      	add	r3, r1
 80002d4:	005b      	lsls	r3, r3, #1
 80002d6:	1ad1      	subs	r1, r2, r3
 80002d8:	b2ca      	uxtb	r2, r1
 80002da:	4b03      	ldr	r3, [pc, #12]	@ (80002e8 <R_Push+0x64>)
 80002dc:	701a      	strb	r2, [r3, #0]

	return true;
 80002de:	2301      	movs	r3, #1
}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	2000002c 	.word	0x2000002c
 80002ec:	20000108 	.word	0x20000108
 80002f0:	2aaaaaab 	.word	0x2aaaaaab

080002f4 <R_Pop>:

#include "stm32f3xx_ll_cortex.h"

bool R_Pop(void** Command_p)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]

	//uint8_t temp;
	if(R_bufferEmpty())
 80002fc:	f7ff ffa0 	bl	8000240 <R_bufferEmpty>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <R_Pop+0x16>
		return false;
 8000306:	2300      	movs	r3, #0
 8000308:	e022      	b.n	8000350 <R_Pop+0x5c>

	Popindex = ((Popindex + 1) % ReceiveCommandSize);
 800030a:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <R_Pop+0x64>)
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	4b12      	ldr	r3, [pc, #72]	@ (800035c <R_Pop+0x68>)
 8000312:	fb83 3102 	smull	r3, r1, r3, r2
 8000316:	17d3      	asrs	r3, r2, #31
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	460b      	mov	r3, r1
 800031c:	005b      	lsls	r3, r3, #1
 800031e:	440b      	add	r3, r1
 8000320:	005b      	lsls	r3, r3, #1
 8000322:	1ad1      	subs	r1, r2, r3
 8000324:	b2ca      	uxtb	r2, r1
 8000326:	4b0c      	ldr	r3, [pc, #48]	@ (8000358 <R_Pop+0x64>)
 8000328:	701a      	strb	r2, [r3, #0]

	void* temp = *Command_p;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	60fb      	str	r3, [r7, #12]
	*Command_p = commandStack[Popindex];
 8000330:	4b09      	ldr	r3, [pc, #36]	@ (8000358 <R_Pop+0x64>)
 8000332:	781b      	ldrb	r3, [r3, #0]
 8000334:	461a      	mov	r2, r3
 8000336:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <R_Pop+0x6c>)
 8000338:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	601a      	str	r2, [r3, #0]
	commandStack[Popindex] = temp;
 8000340:	4b05      	ldr	r3, [pc, #20]	@ (8000358 <R_Pop+0x64>)
 8000342:	781b      	ldrb	r3, [r3, #0]
 8000344:	4619      	mov	r1, r3
 8000346:	4a06      	ldr	r2, [pc, #24]	@ (8000360 <R_Pop+0x6c>)
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return true;
 800034e:	2301      	movs	r3, #1
}
 8000350:	4618      	mov	r0, r3
 8000352:	3710      	adds	r7, #16
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20000000 	.word	0x20000000
 800035c:	2aaaaaab 	.word	0x2aaaaaab
 8000360:	20000108 	.word	0x20000108

08000364 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0
 800036a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	f043 0201 	orr.w	r2, r3, #1
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	601a      	str	r2, [r3, #0]
}
 8000378:	bf00      	nop
 800037a:	370c      	adds	r7, #12
 800037c:	46bd      	mov	sp, r7
 800037e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000382:	4770      	bx	lr

08000384 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	685b      	ldr	r3, [r3, #4]
 8000390:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	689b      	ldr	r3, [r3, #8]
 800039c:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	609a      	str	r2, [r3, #8]
}
 80003a4:	bf00      	nop
 80003a6:	370c      	adds	r7, #12
 80003a8:	46bd      	mov	sp, r7
 80003aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ae:	4770      	bx	lr

080003b0 <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b089      	sub	sp, #36	@ 0x24
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	3308      	adds	r3, #8
 80003bc:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80003be:	68fb      	ldr	r3, [r7, #12]
 80003c0:	e853 3f00 	ldrex	r3, [r3]
 80003c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80003c6:	68bb      	ldr	r3, [r7, #8]
 80003c8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003cc:	61fb      	str	r3, [r7, #28]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	3308      	adds	r3, #8
 80003d2:	69fa      	ldr	r2, [r7, #28]
 80003d4:	61ba      	str	r2, [r7, #24]
 80003d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80003d8:	6979      	ldr	r1, [r7, #20]
 80003da:	69ba      	ldr	r2, [r7, #24]
 80003dc:	e841 2300 	strex	r3, r2, [r1]
 80003e0:	613b      	str	r3, [r7, #16]
   return(result);
 80003e2:	693b      	ldr	r3, [r7, #16]
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d1e7      	bne.n	80003b8 <LL_USART_DisableIT_CTS+0x8>
}
 80003e8:	bf00      	nop
 80003ea:	bf00      	nop
 80003ec:	3724      	adds	r7, #36	@ 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003f6:	b480      	push	{r7}
 80003f8:	b085      	sub	sp, #20
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80003fe:	4b09      	ldr	r3, [pc, #36]	@ (8000424 <LL_AHB1_GRP1_EnableClock+0x2e>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4908      	ldr	r1, [pc, #32]	@ (8000424 <LL_AHB1_GRP1_EnableClock+0x2e>)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4313      	orrs	r3, r2
 8000408:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 800040a:	4b06      	ldr	r3, [pc, #24]	@ (8000424 <LL_AHB1_GRP1_EnableClock+0x2e>)
 800040c:	695a      	ldr	r2, [r3, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	4013      	ands	r3, r2
 8000412:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000414:	68fb      	ldr	r3, [r7, #12]
}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000

08000428 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000428:	b480      	push	{r7}
 800042a:	b085      	sub	sp, #20
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000430:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000432:	69da      	ldr	r2, [r3, #28]
 8000434:	4907      	ldr	r1, [pc, #28]	@ (8000454 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	4313      	orrs	r3, r2
 800043a:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800043c:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <LL_APB1_GRP1_EnableClock+0x2c>)
 800043e:	69da      	ldr	r2, [r3, #28]
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4013      	ands	r3, r2
 8000444:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000446:	68fb      	ldr	r3, [r7, #12]
}
 8000448:	bf00      	nop
 800044a:	3714      	adds	r7, #20
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr
 8000454:	40021000 	.word	0x40021000

08000458 <Set_SCL_RisingNFalling>:
/* USER CODE BEGIN 0 */

enum Bus_State main_State = Wait_Start;

void Set_SCL_RisingNFalling(bool RisingNFalling) //set SCL interrupt to Rising edge when bool = true, set interrupt to falling edge when bool = false
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b088      	sub	sp, #32
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000462:	f107 030c 	add.w	r3, r7, #12
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
 8000470:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin : SCL_Pin_Pin */
  if (RisingNFalling)
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	2b00      	cmp	r3, #0
 8000476:	d003      	beq.n	8000480 <Set_SCL_RisingNFalling+0x28>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000478:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800047c:	613b      	str	r3, [r7, #16]
 800047e:	e002      	b.n	8000486 <Set_SCL_RisingNFalling+0x2e>
  else
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000480:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000484:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pin = SCL_Pin_Pin;
 8000486:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800048c:	2302      	movs	r3, #2
 800048e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SCL_Pin_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 030c 	add.w	r3, r7, #12
 8000494:	4619      	mov	r1, r3
 8000496:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800049a:	f001 f9fd 	bl	8001898 <HAL_GPIO_Init>
}
 800049e:	bf00      	nop
 80004a0:	3720      	adds	r7, #32
 80004a2:	46bd      	mov	sp, r7
 80004a4:	bd80      	pop	{r7, pc}

080004a6 <Set_SDA_RisingNFalling>:

void Set_SDA_RisingNFalling(bool RisingNFalling) //set SDA interrupt to Rising edge when bool = true, set interrupt to falling edge when bool = false
{
 80004a6:	b580      	push	{r7, lr}
 80004a8:	b088      	sub	sp, #32
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	4603      	mov	r3, r0
 80004ae:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b0:	f107 030c 	add.w	r3, r7, #12
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]
  /*Configure GPIO pin : SDA_Pin_Pin */
  if (RisingNFalling)
 80004c0:	79fb      	ldrb	r3, [r7, #7]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d003      	beq.n	80004ce <Set_SDA_RisingNFalling+0x28>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80004c6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80004ca:	613b      	str	r3, [r7, #16]
 80004cc:	e002      	b.n	80004d4 <Set_SDA_RisingNFalling+0x2e>
  else
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004ce:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80004d2:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Pin = SDA_Pin_Pin;
 80004d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80004d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80004da:	2302      	movs	r3, #2
 80004dc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDA_Pin_GPIO_Port, &GPIO_InitStruct);
 80004de:	f107 030c 	add.w	r3, r7, #12
 80004e2:	4619      	mov	r1, r3
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80004e8:	f001 f9d6 	bl	8001898 <HAL_GPIO_Init>
}
 80004ec:	bf00      	nop
 80004ee:	3720      	adds	r7, #32
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}

080004f4 <Set_SCL_INT>:

void Set_SCL_INT(bool Enable) //Enable or disable SCL external interrupt, required they share an interrupt flag
{
 80004f4:	b480      	push	{r7}
 80004f6:	b083      	sub	sp, #12
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	71fb      	strb	r3, [r7, #7]
  /*Configure GPIO pin : SCL_Pin_Pin */
  SCL_Enable = Enable;
 80004fe:	4a04      	ldr	r2, [pc, #16]	@ (8000510 <Set_SCL_INT+0x1c>)
 8000500:	79fb      	ldrb	r3, [r7, #7]
 8000502:	7013      	strb	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	20000168 	.word	0x20000168

08000514 <Set_SDA_INT>:

void Set_SDA_INT(bool Enable) //Enable or disable SCL external interrupt, required they share an interrupt flag
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	4603      	mov	r3, r0
 800051c:	71fb      	strb	r3, [r7, #7]
  /*Configure GPIO pin : SCL_Pin_Pin */
  SDA_Enable = Enable;
 800051e:	4a04      	ldr	r2, [pc, #16]	@ (8000530 <Set_SDA_INT+0x1c>)
 8000520:	79fb      	ldrb	r3, [r7, #7]
 8000522:	7013      	strb	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000169 	.word	0x20000169

08000534 <Transmit.0>:
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  void Transmit(void* bufferT, uint8_t Length_p, USART_TypeDef* USART_P) // transmit info over uart debug port
  {
 8000534:	b480      	push	{r7}
 8000536:	b085      	sub	sp, #20
 8000538:	af00      	add	r7, sp, #0
 800053a:	60f8      	str	r0, [r7, #12]
 800053c:	460b      	mov	r3, r1
 800053e:	607a      	str	r2, [r7, #4]
 8000540:	72fb      	strb	r3, [r7, #11]
 8000542:	f8c7 c000 	str.w	ip, [r7]
	volatile static uint8_t i;

	for (i = 0; i < Length_p; i++)
 8000546:	4b14      	ldr	r3, [pc, #80]	@ (8000598 <Transmit.0+0x64>)
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
 800054c:	e017      	b.n	800057e <Transmit.0+0x4a>
	{
		while ( !(READ_BIT(USART_P->ISR, USART_ISR_TXE)) );
 800054e:	bf00      	nop
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	69db      	ldr	r3, [r3, #28]
 8000554:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000558:	2b00      	cmp	r3, #0
 800055a:	d0f9      	beq.n	8000550 <Transmit.0+0x1c>
		USART_P->TDR = *((uint8_t*)(bufferT+i));
 800055c:	4b0e      	ldr	r3, [pc, #56]	@ (8000598 <Transmit.0+0x64>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	b2db      	uxtb	r3, r3
 8000562:	461a      	mov	r2, r3
 8000564:	68fb      	ldr	r3, [r7, #12]
 8000566:	4413      	add	r3, r2
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	461a      	mov	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	851a      	strh	r2, [r3, #40]	@ 0x28
	for (i = 0; i < Length_p; i++)
 8000570:	4b09      	ldr	r3, [pc, #36]	@ (8000598 <Transmit.0+0x64>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	b2db      	uxtb	r3, r3
 8000576:	3301      	adds	r3, #1
 8000578:	b2da      	uxtb	r2, r3
 800057a:	4b07      	ldr	r3, [pc, #28]	@ (8000598 <Transmit.0+0x64>)
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <Transmit.0+0x64>)
 8000580:	781b      	ldrb	r3, [r3, #0]
 8000582:	b2db      	uxtb	r3, r3
 8000584:	7afa      	ldrb	r2, [r7, #11]
 8000586:	429a      	cmp	r2, r3
 8000588:	d8e1      	bhi.n	800054e <Transmit.0+0x1a>
	}
  }
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	3714      	adds	r7, #20
 8000590:	46bd      	mov	sp, r7
 8000592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000596:	4770      	bx	lr
 8000598:	2000016d 	.word	0x2000016d

0800059c <main>:
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
int main(void)
 80005a2:	f107 0310 	add.w	r3, r7, #16
 80005a6:	607b      	str	r3, [r7, #4]
  HAL_Init();
 80005a8:	f000 fc60 	bl	8000e6c <HAL_Init>
  Set_SDA_RisingNFalling(false); // set SDA external interrupt to Falling edge
 80005ac:	2000      	movs	r0, #0
 80005ae:	f7ff ff7a 	bl	80004a6 <Set_SDA_RisingNFalling>
  Set_SDA_INT(true);	// initiate SDA interrupt for bus state = wait_start
 80005b2:	2001      	movs	r0, #1
 80005b4:	f7ff ffae 	bl	8000514 <Set_SDA_INT>
  Set_SCL_INT(false); 	// initiate SCL interrupt for bus state = wait_start
 80005b8:	2000      	movs	r0, #0
 80005ba:	f7ff ff9b 	bl	80004f4 <Set_SCL_INT>
  BufferR = &BufferR_;	//bind pointer to physical location
 80005be:	4b20      	ldr	r3, [pc, #128]	@ (8000640 <main+0xa4>)
 80005c0:	4a20      	ldr	r2, [pc, #128]	@ (8000644 <main+0xa8>)
 80005c2:	601a      	str	r2, [r3, #0]
  BufferH = &bufferH_;	//bind pointer to physical location
 80005c4:	4b20      	ldr	r3, [pc, #128]	@ (8000648 <main+0xac>)
 80005c6:	4a21      	ldr	r2, [pc, #132]	@ (800064c <main+0xb0>)
 80005c8:	601a      	str	r2, [r3, #0]
  InitCom();
 80005ca:	f7ff fe03 	bl	80001d4 <InitCom>
  SystemClock_Config();
 80005ce:	f000 f849 	bl	8000664 <SystemClock_Config>
  MX_GPIO_Init();
 80005d2:	f000 f8f9 	bl	80007c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005d6:	f000 f8a3 	bl	8000720 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while ( R_Pop(&BufferH)) // check if an message is available in the circular buffer
 80005da:	e00d      	b.n	80005f8 <main+0x5c>
	  {
		  volatile uint8_t size = *(uint8_t *)BufferH; // get the first byte from the buffer this holds the size of the packet
 80005dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000648 <main+0xac>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	70fb      	strb	r3, [r7, #3]
		  //size = size;
		  Transmit((uint8_t *)BufferH, size, USART2); // transmit the buffer over the debug uart port
 80005e4:	4b18      	ldr	r3, [pc, #96]	@ (8000648 <main+0xac>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	78fa      	ldrb	r2, [r7, #3]
 80005ea:	b2d1      	uxtb	r1, r2
 80005ec:	1d3a      	adds	r2, r7, #4
 80005ee:	4694      	mov	ip, r2
 80005f0:	4a17      	ldr	r2, [pc, #92]	@ (8000650 <main+0xb4>)
 80005f2:	4618      	mov	r0, r3
 80005f4:	f7ff ff9e 	bl	8000534 <Transmit.0>
	  while ( R_Pop(&BufferH)) // check if an message is available in the circular buffer
 80005f8:	4813      	ldr	r0, [pc, #76]	@ (8000648 <main+0xac>)
 80005fa:	f7ff fe7b 	bl	80002f4 <R_Pop>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1eb      	bne.n	80005dc <main+0x40>
	  }
	  if (main_State == Reset) // reset the bus state machine
 8000604:	4b13      	ldr	r3, [pc, #76]	@ (8000654 <main+0xb8>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b04      	cmp	r3, #4
 800060a:	d1f5      	bne.n	80005f8 <main+0x5c>
	  {
		  Bit_Count = 9;
 800060c:	4b12      	ldr	r3, [pc, #72]	@ (8000658 <main+0xbc>)
 800060e:	2209      	movs	r2, #9
 8000610:	701a      	strb	r2, [r3, #0]
		  Data_Byte = 0;
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <main+0xc0>)
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
		  rbuf_index = 1;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <main+0xc4>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		  Set_SDA_RisingNFalling(false);
 800061e:	2000      	movs	r0, #0
 8000620:	f7ff ff41 	bl	80004a6 <Set_SDA_RisingNFalling>
		  Set_SDA_INT(true);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ff75 	bl	8000514 <Set_SDA_INT>
		  Set_SCL_INT(false);
 800062a:	2000      	movs	r0, #0
 800062c:	f7ff ff62 	bl	80004f4 <Set_SCL_INT>
		  (*(uint8_t *)(BufferR)) = 0; //clear buffer packet size
 8000630:	4b03      	ldr	r3, [pc, #12]	@ (8000640 <main+0xa4>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2200      	movs	r2, #0
 8000636:	701a      	strb	r2, [r3, #0]
		  main_State = Wait_Start;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <main+0xb8>)
 800063a:	2200      	movs	r2, #0
 800063c:	701a      	strb	r2, [r3, #0]
	  while ( R_Pop(&BufferH)) // check if an message is available in the circular buffer
 800063e:	e7db      	b.n	80005f8 <main+0x5c>
 8000640:	20000164 	.word	0x20000164
 8000644:	20000144 	.word	0x20000144
 8000648:	20000140 	.word	0x20000140
 800064c:	20000120 	.word	0x20000120
 8000650:	40004400 	.word	0x40004400
 8000654:	2000016c 	.word	0x2000016c
 8000658:	20000001 	.word	0x20000001
 800065c:	2000016a 	.word	0x2000016a
 8000660:	20000002 	.word	0x20000002

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b0a6      	sub	sp, #152	@ 0x98
 8000668:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800066e:	2228      	movs	r2, #40	@ 0x28
 8000670:	2100      	movs	r1, #0
 8000672:	4618      	mov	r0, r3
 8000674:	f005 f99d 	bl	80059b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000678:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	1d3b      	adds	r3, r7, #4
 800068a:	2258      	movs	r2, #88	@ 0x58
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f005 f98f 	bl	80059b2 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000694:	2301      	movs	r3, #1
 8000696:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000698:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 800069c:	677b      	str	r3, [r7, #116]	@ 0x74
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800069e:	2301      	movs	r3, #1
 80006a0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80006b4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006be:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fc98 	bl	8001ff8 <HAL_RCC_OscConfig>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80006ce:	f000 fad9 	bl	8000c84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d2:	230f      	movs	r3, #15
 80006d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006d6:	2302      	movs	r3, #2
 80006d8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006da:	2300      	movs	r3, #0
 80006dc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80006e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006e8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006ec:	2102      	movs	r1, #2
 80006ee:	4618      	mov	r0, r3
 80006f0:	f002 fcd6 	bl	80030a0 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006fa:	f000 fac3 	bl	8000c84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80006fe:	2302      	movs	r3, #2
 8000700:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f825 	bl	8003758 <HAL_RCCEx_PeriphCLKConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000714:	f000 fab6 	bl	8000c84 <Error_Handler>
  }
}
 8000718:	bf00      	nop
 800071a:	3798      	adds	r7, #152	@ 0x98
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08e      	sub	sp, #56	@ 0x38
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]
 8000736:	615a      	str	r2, [r3, #20]
 8000738:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800074a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800074e:	f7ff fe6b 	bl	8000428 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000752:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8000756:	f7ff fe4e 	bl	80003f6 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800075a:	230c      	movs	r3, #12
 800075c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800075e:	2302      	movs	r3, #2
 8000760:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800076e:	2307      	movs	r3, #7
 8000770:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4619      	mov	r1, r3
 8000776:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800077a:	f004 f8db 	bl	8004934 <LL_GPIO_Init>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 800077e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000782:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000788:	2300      	movs	r3, #0
 800078a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800078c:	2300      	movs	r3, #0
 800078e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000790:	230c      	movs	r3, #12
 8000792:	62fb      	str	r3, [r7, #44]	@ 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000794:	2300      	movs	r3, #0
 8000796:	633b      	str	r3, [r7, #48]	@ 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000798:	2300      	movs	r3, #0
 800079a:	637b      	str	r3, [r7, #52]	@ 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 800079c:	f107 031c 	add.w	r3, r7, #28
 80007a0:	4619      	mov	r1, r3
 80007a2:	4808      	ldr	r0, [pc, #32]	@ (80007c4 <MX_USART2_UART_Init+0xa4>)
 80007a4:	f004 fffa 	bl	800579c <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 80007a8:	4806      	ldr	r0, [pc, #24]	@ (80007c4 <MX_USART2_UART_Init+0xa4>)
 80007aa:	f7ff fe01 	bl	80003b0 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 80007ae:	4805      	ldr	r0, [pc, #20]	@ (80007c4 <MX_USART2_UART_Init+0xa4>)
 80007b0:	f7ff fde8 	bl	8000384 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80007b4:	4803      	ldr	r0, [pc, #12]	@ (80007c4 <MX_USART2_UART_Init+0xa4>)
 80007b6:	f7ff fdd5 	bl	8000364 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	3738      	adds	r7, #56	@ 0x38
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40004400 	.word	0x40004400

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08a      	sub	sp, #40	@ 0x28
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b42      	ldr	r3, [pc, #264]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80007e0:	695b      	ldr	r3, [r3, #20]
 80007e2:	4a41      	ldr	r2, [pc, #260]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80007e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80007e8:	6153      	str	r3, [r2, #20]
 80007ea:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80007ec:	695b      	ldr	r3, [r3, #20]
 80007ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80007f2:	613b      	str	r3, [r7, #16]
 80007f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b3c      	ldr	r3, [pc, #240]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a3b      	ldr	r2, [pc, #236]	@ (80008e8 <MX_GPIO_Init+0x120>)
 80007fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000800:	6153      	str	r3, [r2, #20]
 8000802:	4b39      	ldr	r3, [pc, #228]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800080a:	60fb      	str	r3, [r7, #12]
 800080c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b36      	ldr	r3, [pc, #216]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	4a35      	ldr	r2, [pc, #212]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000814:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000818:	6153      	str	r3, [r2, #20]
 800081a:	4b33      	ldr	r3, [pc, #204]	@ (80008e8 <MX_GPIO_Init+0x120>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	4a2f      	ldr	r2, [pc, #188]	@ (80008e8 <MX_GPIO_Init+0x120>)
 800082c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000830:	6153      	str	r3, [r2, #20]
 8000832:	4b2d      	ldr	r3, [pc, #180]	@ (80008e8 <MX_GPIO_Init+0x120>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2120      	movs	r1, #32
 8000842:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000846:	f001 fab5 	bl	8001db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800084a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000850:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000856:	2300      	movs	r3, #0
 8000858:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4822      	ldr	r0, [pc, #136]	@ (80008ec <MX_GPIO_Init+0x124>)
 8000862:	f001 f819 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000866:	2320      	movs	r3, #32
 8000868:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000876:	f107 0314 	add.w	r3, r7, #20
 800087a:	4619      	mov	r1, r3
 800087c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000880:	f001 f80a 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin_Pin */
  GPIO_InitStruct.Pin = SDA_Pin_Pin;
 8000884:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000890:	2302      	movs	r3, #2
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SDA_Pin_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800089e:	f000 fffb 	bl	8001898 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCL_Pin_Pin */
  GPIO_InitStruct.Pin = SCL_Pin_Pin;
 80008a2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80008a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80008ae:	2302      	movs	r3, #2
 80008b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SCL_Pin_GPIO_Port, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008bc:	f000 ffec 	bl	8001898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	2017      	movs	r0, #23
 80008c6:	f000 fe82 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ca:	2017      	movs	r0, #23
 80008cc:	f000 fe9b 	bl	8001606 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2028      	movs	r0, #40	@ 0x28
 80008d6:	f000 fe7a 	bl	80015ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008da:	2028      	movs	r0, #40	@ 0x28
 80008dc:	f000 fe93 	bl	8001606 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e0:	bf00      	nop
 80008e2:	3728      	adds	r7, #40	@ 0x28
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000800 	.word	0x48000800

080008f0 <Bus_State_Handler>:

/* USER CODE BEGIN 4 */
void Bus_State_Handler(uint8_t source) // I2C bus state interupt handler. the state of the bus is changed acording to the state and the interupt source (SDA or SCL)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	71fb      	strb	r3, [r7, #7]

  switch (main_State) {
 80008fa:	4bb1      	ldr	r3, [pc, #708]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b03      	cmp	r3, #3
 8000900:	f200 814f 	bhi.w	8000ba2 <Bus_State_Handler+0x2b2>
 8000904:	a201      	add	r2, pc, #4	@ (adr r2, 800090c <Bus_State_Handler+0x1c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	0800091d 	.word	0x0800091d
 8000910:	08000b2d 	.word	0x08000b2d
 8000914:	08000a6d 	.word	0x08000a6d
 8000918:	08000999 	.word	0x08000999
	  case Wait_Start: // wait for I2C start
		  if (source == SDA) // if the SDA gets a falling edge this is the start of the I2C start
 800091c:	79fb      	ldrb	r3, [r7, #7]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d119      	bne.n	8000956 <Bus_State_Handler+0x66>
		  {
			  if(HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin)/* && !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) */)
 8000922:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000926:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800092a:	f001 fa2b 	bl	8001d84 <HAL_GPIO_ReadPin>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d00c      	beq.n	800094e <Bus_State_Handler+0x5e>
			  {
				  Set_SCL_RisingNFalling(true);
 8000934:	2001      	movs	r0, #1
 8000936:	f7ff fd8f 	bl	8000458 <Set_SCL_RisingNFalling>
				  Set_SDA_INT(false);
 800093a:	2000      	movs	r0, #0
 800093c:	f7ff fdea 	bl	8000514 <Set_SDA_INT>
				  Set_SCL_INT(true);
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff fdd7 	bl	80004f4 <Set_SCL_INT>
				  main_State = Read_Address;
 8000946:	4b9e      	ldr	r3, [pc, #632]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000948:	2203      	movs	r2, #3
 800094a:	701a      	strb	r2, [r3, #0]
			  else
				main_State = Reset;
		  }
		  else
			  main_State = Reset;
		  break;
 800094c:	e134      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
				main_State = Reset;
 800094e:	4b9c      	ldr	r3, [pc, #624]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000950:	2204      	movs	r2, #4
 8000952:	701a      	strb	r2, [r3, #0]
		  break;
 8000954:	e130      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  else if (source == SCL) // After the SDA went low, SCK should go low
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d119      	bne.n	8000990 <Bus_State_Handler+0xa0>
			  if(!HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin))  //&& !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) // (do not check if SDA pin is low or high, the start and the first bit are to close together for the microcontroller to check the correct state)
 800095c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000960:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000964:	f001 fa0e 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d10c      	bne.n	8000988 <Bus_State_Handler+0x98>
				  Set_SCL_RisingNFalling(true);
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fd72 	bl	8000458 <Set_SCL_RisingNFalling>
				  Set_SDA_INT(false);
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff fdcd 	bl	8000514 <Set_SDA_INT>
				  Set_SCL_INT(true);
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff fdba 	bl	80004f4 <Set_SCL_INT>
				  main_State = Read_Address; // start is received next is I2C address
 8000980:	4b8f      	ldr	r3, [pc, #572]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000982:	2203      	movs	r2, #3
 8000984:	701a      	strb	r2, [r3, #0]
		  break;
 8000986:	e117      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
				main_State = Reset;
 8000988:	4b8d      	ldr	r3, [pc, #564]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 800098a:	2204      	movs	r2, #4
 800098c:	701a      	strb	r2, [r3, #0]
		  break;
 800098e:	e113      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
			  main_State = Reset;
 8000990:	4b8b      	ldr	r3, [pc, #556]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000992:	2204      	movs	r2, #4
 8000994:	701a      	strb	r2, [r3, #0]
		  break;
 8000996:	e10f      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
	  case Read_Address: // address byte = 9 bit long 7 address, 1 read/wrtie, 1 ack/nack
		  if (source == SCL)
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d162      	bne.n	8000a64 <Bus_State_Handler+0x174>
		  {
			  if (Bit_Count >= 3) // bit count is counting down from 9, when less than 3 are left the bits are no longer part of the address so not important to store
 800099e:	4b89      	ldr	r3, [pc, #548]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	d917      	bls.n	80009d8 <Bus_State_Handler+0xe8>
				  Data_Byte |= (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) << (Bit_Count - 3));
 80009a8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80009b0:	f001 f9e8 	bl	8001d84 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	4b82      	ldr	r3, [pc, #520]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	3b03      	subs	r3, #3
 80009c0:	fa02 f303 	lsl.w	r3, r2, r3
 80009c4:	b25a      	sxtb	r2, r3
 80009c6:	4b80      	ldr	r3, [pc, #512]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	b25b      	sxtb	r3, r3
 80009ce:	4313      	orrs	r3, r2
 80009d0:	b25b      	sxtb	r3, r3
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b7c      	ldr	r3, [pc, #496]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 80009d6:	701a      	strb	r2, [r3, #0]
		  	  Bit_Count--;
 80009d8:	4b7a      	ldr	r3, [pc, #488]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	3b01      	subs	r3, #1
 80009e0:	b2da      	uxtb	r2, r3
 80009e2:	4b78      	ldr	r3, [pc, #480]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 80009e4:	701a      	strb	r2, [r3, #0]
		  	  if (Bit_Count == 2) // check if the received address corresponds with the known sensor address of 0x69 or 105 in base 10
 80009e6:	4b77      	ldr	r3, [pc, #476]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	b2db      	uxtb	r3, r3
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d109      	bne.n	8000a04 <Bus_State_Handler+0x114>
		  	  {
		  		  if (Data_Byte != 105)
 80009f0:	4b75      	ldr	r3, [pc, #468]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	2b69      	cmp	r3, #105	@ 0x69
 80009f8:	f000 80d7 	beq.w	8000baa <Bus_State_Handler+0x2ba>
		  			main_State = Reset;
 80009fc:	4b70      	ldr	r3, [pc, #448]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 80009fe:	2204      	movs	r2, #4
 8000a00:	701a      	strb	r2, [r3, #0]
		  		  break;
 8000a02:	e0d2      	b.n	8000baa <Bus_State_Handler+0x2ba>
		  	  }
		  	  if (Bit_Count == 1) // check read / write, if bit is write ignore everything, reset and wait for the next message
 8000a04:	4b6f      	ldr	r3, [pc, #444]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d10d      	bne.n	8000a2a <Bus_State_Handler+0x13a>
		  	  {
				  if (!HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin))
 8000a0e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a16:	f001 f9b5 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	f040 80c6 	bne.w	8000bae <Bus_State_Handler+0x2be>
					  main_State = Reset;
 8000a22:	4b67      	ldr	r3, [pc, #412]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000a24:	2204      	movs	r2, #4
 8000a26:	701a      	strb	r2, [r3, #0]
				  break;
 8000a28:	e0c1      	b.n	8000bae <Bus_State_Handler+0x2be>
		  	  }
		  	  if (Bit_Count == 0) // ack / nack bit, check if the sensor responds a ack meaning the address was correctly received by the sensor
 8000a2a:	4b66      	ldr	r3, [pc, #408]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000a2c:	781b      	ldrb	r3, [r3, #0]
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	f040 80be 	bne.w	8000bb2 <Bus_State_Handler+0x2c2>
		  	  {
				  if (!HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin)) // ack received go to read data
 8000a36:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a3a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3e:	f001 f9a1 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d109      	bne.n	8000a5c <Bus_State_Handler+0x16c>
				  {
					  Data_Byte = 0;
 8000a48:	4b5f      	ldr	r3, [pc, #380]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	701a      	strb	r2, [r3, #0]
				  	  Bit_Count = 9;
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000a50:	2209      	movs	r2, #9
 8000a52:	701a      	strb	r2, [r3, #0]
					  main_State = Read_Data;
 8000a54:	4b5a      	ldr	r3, [pc, #360]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000a56:	2202      	movs	r2, #2
 8000a58:	701a      	strb	r2, [r3, #0]
				  }
				  else
					  main_State = Reset;
				  break;
 8000a5a:	e0ad      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
					  main_State = Reset;
 8000a5c:	4b58      	ldr	r3, [pc, #352]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000a5e:	2204      	movs	r2, #4
 8000a60:	701a      	strb	r2, [r3, #0]
				  break;
 8000a62:	e0a9      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  	  }
		  }
		  else
			  main_State = Reset;
 8000a64:	4b56      	ldr	r3, [pc, #344]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000a66:	2204      	movs	r2, #4
 8000a68:	701a      	strb	r2, [r3, #0]
		  break;
 8000a6a:	e0a2      	b.n	8000bb2 <Bus_State_Handler+0x2c2>
	  case Read_Data: // Data byte = 9 bit long 8 data, 1 ack/nack
		  if (source == SCL)
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d158      	bne.n	8000b24 <Bus_State_Handler+0x234>
		  {
			  if (Bit_Count >= 2) // bit count is counting down from 9, when less than 2 are left the bits are no longer part of the data so not important to store
 8000a72:	4b54      	ldr	r3, [pc, #336]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b2db      	uxtb	r3, r3
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d917      	bls.n	8000aac <Bus_State_Handler+0x1bc>
				  Data_Byte |= (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) << (Bit_Count - 2));
 8000a7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a84:	f001 f97e 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	3b02      	subs	r3, #2
 8000a94:	fa02 f303 	lsl.w	r3, r2, r3
 8000a98:	b25a      	sxtb	r2, r3
 8000a9a:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	b25b      	sxtb	r3, r3
 8000aa2:	4313      	orrs	r3, r2
 8000aa4:	b25b      	sxtb	r3, r3
 8000aa6:	b2da      	uxtb	r2, r3
 8000aa8:	4b47      	ldr	r3, [pc, #284]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 8000aaa:	701a      	strb	r2, [r3, #0]
			  Bit_Count--;
 8000aac:	4b45      	ldr	r3, [pc, #276]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b43      	ldr	r3, [pc, #268]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000ab8:	701a      	strb	r2, [r3, #0]
			  if (Bit_Count == 1) // last data bit received store the received byte in the packet buffer
 8000aba:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b01      	cmp	r3, #1
 8000ac2:	d113      	bne.n	8000aec <Bus_State_Handler+0x1fc>
			  {
				  (*(uint8_t *)(BufferR))++; // add one to the packer buffer size
 8000ac4:	4b41      	ldr	r3, [pc, #260]	@ (8000bcc <Bus_State_Handler+0x2dc>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	781a      	ldrb	r2, [r3, #0]
 8000aca:	3201      	adds	r2, #1
 8000acc:	b2d2      	uxtb	r2, r2
 8000ace:	701a      	strb	r2, [r3, #0]
				  (*(uint8_t *)(BufferR + rbuf_index++)) = Data_Byte; //add data to the packet buffer and set the point one higher for the next byte
 8000ad0:	4b3e      	ldr	r3, [pc, #248]	@ (8000bcc <Bus_State_Handler+0x2dc>)
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8000bd0 <Bus_State_Handler+0x2e0>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	1c59      	adds	r1, r3, #1
 8000adc:	b2c8      	uxtb	r0, r1
 8000ade:	493c      	ldr	r1, [pc, #240]	@ (8000bd0 <Bus_State_Handler+0x2e0>)
 8000ae0:	7008      	strb	r0, [r1, #0]
 8000ae2:	4413      	add	r3, r2
 8000ae4:	4a38      	ldr	r2, [pc, #224]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 8000ae6:	7812      	ldrb	r2, [r2, #0]
 8000ae8:	b2d2      	uxtb	r2, r2
 8000aea:	701a      	strb	r2, [r3, #0]
			  }
			  if (Bit_Count == 0) // ack/nack received check. ack = more data is to come, nack = end of packet stop receiving data and wait for stop
 8000aec:	4b35      	ldr	r3, [pc, #212]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d15f      	bne.n	8000bb6 <Bus_State_Handler+0x2c6>
			  {
				  if (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin))
 8000af6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000afa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000afe:	f001 f941 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d003      	beq.n	8000b10 <Bus_State_Handler+0x220>
				  {
					  main_State = Wait_Stop; // data packet received wait for stop
 8000b08:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	701a      	strb	r2, [r3, #0]
				  {
					  Data_Byte = 0;
				  	  Bit_Count = 9;
					  main_State = Read_Data; // reset counters and get next byte
				  }
				  break;
 8000b0e:	e053      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
					  Data_Byte = 0;
 8000b10:	4b2d      	ldr	r3, [pc, #180]	@ (8000bc8 <Bus_State_Handler+0x2d8>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	701a      	strb	r2, [r3, #0]
				  	  Bit_Count = 9;
 8000b16:	4b2b      	ldr	r3, [pc, #172]	@ (8000bc4 <Bus_State_Handler+0x2d4>)
 8000b18:	2209      	movs	r2, #9
 8000b1a:	701a      	strb	r2, [r3, #0]
					  main_State = Read_Data; // reset counters and get next byte
 8000b1c:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b1e:	2202      	movs	r2, #2
 8000b20:	701a      	strb	r2, [r3, #0]
				  break;
 8000b22:	e049      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
			  }
		  }
		  else
			  main_State = Reset;
 8000b24:	4b26      	ldr	r3, [pc, #152]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b26:	2204      	movs	r2, #4
 8000b28:	701a      	strb	r2, [r3, #0]
		  break;
 8000b2a:	e044      	b.n	8000bb6 <Bus_State_Handler+0x2c6>
	  case Wait_Stop: // wait for stop first scl goes high than SDA goes high
		  if (source == SCL)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d11c      	bne.n	8000b6c <Bus_State_Handler+0x27c>
		  {
			  if(/*HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin) &&*/ !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin)) // SCL went high
 8000b32:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b36:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b3a:	f001 f923 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d10f      	bne.n	8000b64 <Bus_State_Handler+0x274>
			  {
				  Set_SDA_RisingNFalling(true);
 8000b44:	2001      	movs	r0, #1
 8000b46:	f7ff fcae 	bl	80004a6 <Set_SDA_RisingNFalling>
				  Set_SDA_INT(true);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f7ff fce2 	bl	8000514 <Set_SDA_INT>
				  Set_SCL_INT(false);
 8000b50:	2000      	movs	r0, #0
 8000b52:	f7ff fccf 	bl	80004f4 <Set_SCL_INT>
				  R_Push(&BufferR);
 8000b56:	481d      	ldr	r0, [pc, #116]	@ (8000bcc <Bus_State_Handler+0x2dc>)
 8000b58:	f7ff fb94 	bl	8000284 <R_Push>

				  main_State = Reset;
 8000b5c:	4b18      	ldr	r3, [pc, #96]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	701a      	strb	r2, [r3, #0]
			  else
				  main_State = Reset;
		  }
		  else
			  main_State = Reset;
		  break;
 8000b62:	e029      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
				main_State = Reset;
 8000b64:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b66:	2204      	movs	r2, #4
 8000b68:	701a      	strb	r2, [r3, #0]
		  break;
 8000b6a:	e025      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  else if (source == SDA)
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d113      	bne.n	8000b9a <Bus_State_Handler+0x2aa>
			  if(HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin) /*&& HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) */) // SDA went high
 8000b72:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b76:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7a:	f001 f903 	bl	8001d84 <HAL_GPIO_ReadPin>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d006      	beq.n	8000b92 <Bus_State_Handler+0x2a2>
				  R_Push(&BufferR);
 8000b84:	4811      	ldr	r0, [pc, #68]	@ (8000bcc <Bus_State_Handler+0x2dc>)
 8000b86:	f7ff fb7d 	bl	8000284 <R_Push>
				  main_State = Reset;
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	701a      	strb	r2, [r3, #0]
		  break;
 8000b90:	e012      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
				  main_State = Reset;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b94:	2204      	movs	r2, #4
 8000b96:	701a      	strb	r2, [r3, #0]
		  break;
 8000b98:	e00e      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
			  main_State = Reset;
 8000b9a:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000b9c:	2204      	movs	r2, #4
 8000b9e:	701a      	strb	r2, [r3, #0]
		  break;
 8000ba0:	e00a      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
	  default:
		  main_State = Reset;
 8000ba2:	4b07      	ldr	r3, [pc, #28]	@ (8000bc0 <Bus_State_Handler+0x2d0>)
 8000ba4:	2204      	movs	r2, #4
 8000ba6:	701a      	strb	r2, [r3, #0]
		  break;
 8000ba8:	e006      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  		  break;
 8000baa:	bf00      	nop
 8000bac:	e004      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
				  break;
 8000bae:	bf00      	nop
 8000bb0:	e002      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  break;
 8000bb2:	bf00      	nop
 8000bb4:	e000      	b.n	8000bb8 <Bus_State_Handler+0x2c8>
		  break;
 8000bb6:	bf00      	nop
  }
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	2000016c 	.word	0x2000016c
 8000bc4:	20000001 	.word	0x20000001
 8000bc8:	2000016a 	.word	0x2000016a
 8000bcc:	20000164 	.word	0x20000164
 8000bd0:	20000002 	.word	0x20000002

08000bd4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) // external interupt handler check if the interupt is generated from SDA or SCL (both share an interupt flag)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	4603      	mov	r3, r0
 8000bdc:	80fb      	strh	r3, [r7, #6]

	if(GPIO_Pin == SDA_Pin_Pin && SDA_Enable == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000bde:	88fb      	ldrh	r3, [r7, #6]
 8000be0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000be4:	d107      	bne.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x22>
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <HAL_GPIO_EXTI_Callback+0x48>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d003      	beq.n	8000bf6 <HAL_GPIO_EXTI_Callback+0x22>
		Bus_State_Handler(SDA);
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff fe7e 	bl	80008f0 <Bus_State_Handler>
 8000bf4:	e00a      	b.n	8000c0c <HAL_GPIO_EXTI_Callback+0x38>
	else if(GPIO_Pin == SCL_Pin_Pin && SCL_Enable == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bfc:	d106      	bne.n	8000c0c <HAL_GPIO_EXTI_Callback+0x38>
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x4c>)
 8000c00:	781b      	ldrb	r3, [r3, #0]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d002      	beq.n	8000c0c <HAL_GPIO_EXTI_Callback+0x38>
		Bus_State_Handler(SCL);
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fe72 	bl	80008f0 <Bus_State_Handler>
	counter = 0;
 8000c0c:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
}
 8000c12:	bf00      	nop
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000169 	.word	0x20000169
 8000c20:	20000168 	.word	0x20000168
 8000c24:	2000016b 	.word	0x2000016b

08000c28 <Timer_Reset>:

void Timer_Reset(void) //Timer if there is more than 5mS no interupt and the bus state is not Wait_Start asume something whent wrong and reset the bus state to Wait_Start
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

	counter++;
 8000c2c:	4b11      	ldr	r3, [pc, #68]	@ (8000c74 <Timer_Reset+0x4c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	3301      	adds	r3, #1
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4b0f      	ldr	r3, [pc, #60]	@ (8000c74 <Timer_Reset+0x4c>)
 8000c38:	701a      	strb	r2, [r3, #0]
	if (counter > 5 && main_State != Wait_Start)
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c74 <Timer_Reset+0x4c>)
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d915      	bls.n	8000c70 <Timer_Reset+0x48>
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <Timer_Reset+0x50>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d011      	beq.n	8000c70 <Timer_Reset+0x48>
	{
	  Bit_Count = 9;
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <Timer_Reset+0x54>)
 8000c4e:	2209      	movs	r2, #9
 8000c50:	701a      	strb	r2, [r3, #0]
	  Data_Byte = 0;
 8000c52:	4b0b      	ldr	r3, [pc, #44]	@ (8000c80 <Timer_Reset+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
	  Set_SDA_RisingNFalling(false);
 8000c58:	2000      	movs	r0, #0
 8000c5a:	f7ff fc24 	bl	80004a6 <Set_SDA_RisingNFalling>
	  Set_SDA_INT(true);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f7ff fc58 	bl	8000514 <Set_SDA_INT>
	  Set_SCL_INT(false);
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fc45 	bl	80004f4 <Set_SCL_INT>
	  main_State = Wait_Start;
 8000c6a:	4b03      	ldr	r3, [pc, #12]	@ (8000c78 <Timer_Reset+0x50>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
	}
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000016b 	.word	0x2000016b
 8000c78:	2000016c 	.word	0x2000016c
 8000c7c:	20000001 	.word	0x20000001
 8000c80:	2000016a 	.word	0x2000016a

08000c84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c88:	b672      	cpsid	i
}
 8000c8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c8c:	bf00      	nop
 8000c8e:	e7fd      	b.n	8000c8c <Error_Handler+0x8>

08000c90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c96:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c98:	699b      	ldr	r3, [r3, #24]
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6193      	str	r3, [r2, #24]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cae:	4b09      	ldr	r3, [pc, #36]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb0:	69db      	ldr	r3, [r3, #28]
 8000cb2:	4a08      	ldr	r2, [pc, #32]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cb8:	61d3      	str	r3, [r2, #28]
 8000cba:	4b06      	ldr	r3, [pc, #24]	@ (8000cd4 <HAL_MspInit+0x44>)
 8000cbc:	69db      	ldr	r3, [r3, #28]
 8000cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc6:	2007      	movs	r0, #7
 8000cc8:	f000 fc76 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	40021000 	.word	0x40021000

08000cd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cdc:	bf00      	nop
 8000cde:	e7fd      	b.n	8000cdc <NMI_Handler+0x4>

08000ce0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	#ifdef DEBUG
	 __BKPT(0); // software breakpoint
 8000ce4:	be00      	bkpt	0x0000
	#endif
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ce6:	bf00      	nop
 8000ce8:	e7fd      	b.n	8000ce6 <HardFault_Handler+0x6>

08000cea <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cea:	b480      	push	{r7}
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cee:	bf00      	nop
 8000cf0:	e7fd      	b.n	8000cee <MemManage_Handler+0x4>

08000cf2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cf6:	bf00      	nop
 8000cf8:	e7fd      	b.n	8000cf6 <BusFault_Handler+0x4>

08000cfa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cfe:	bf00      	nop
 8000d00:	e7fd      	b.n	8000cfe <UsageFault_Handler+0x4>

08000d02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Timer_Reset();
 8000d30:	f7ff ff7a 	bl	8000c28 <Timer_Reset>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d34:	f000 f90c 	bl	8000f50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDA_Pin_Pin);
 8000d40:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000d44:	f001 f890 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SCL_Pin_Pin);
 8000d48:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000d4c:	f001 f88c 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000d50:	bf00      	nop
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000d58:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000d5c:	f001 f884 	bl	8001e68 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <SystemInit+0x20>)
 8000d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d6e:	4a05      	ldr	r2, [pc, #20]	@ (8000d84 <SystemInit+0x20>)
 8000d70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	2300      	movs	r3, #0
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000e5c <SystemCoreClockUpdate+0xd4>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 030c 	and.w	r3, r3, #12
 8000da6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d011      	beq.n	8000dd2 <SystemCoreClockUpdate+0x4a>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b08      	cmp	r3, #8
 8000db2:	d83a      	bhi.n	8000e2a <SystemCoreClockUpdate+0xa2>
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d003      	beq.n	8000dc2 <SystemCoreClockUpdate+0x3a>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b04      	cmp	r3, #4
 8000dbe:	d004      	beq.n	8000dca <SystemCoreClockUpdate+0x42>
 8000dc0:	e033      	b.n	8000e2a <SystemCoreClockUpdate+0xa2>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000dc2:	4b27      	ldr	r3, [pc, #156]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000dc4:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <SystemCoreClockUpdate+0xdc>)
 8000dc6:	601a      	str	r2, [r3, #0]
      break;
 8000dc8:	e033      	b.n	8000e32 <SystemCoreClockUpdate+0xaa>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000dca:	4b25      	ldr	r3, [pc, #148]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000dcc:	4a25      	ldr	r2, [pc, #148]	@ (8000e64 <SystemCoreClockUpdate+0xdc>)
 8000dce:	601a      	str	r2, [r3, #0]
      break;
 8000dd0:	e02f      	b.n	8000e32 <SystemCoreClockUpdate+0xaa>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 8000dd2:	4b22      	ldr	r3, [pc, #136]	@ (8000e5c <SystemCoreClockUpdate+0xd4>)
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8000dda:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	@ (8000e5c <SystemCoreClockUpdate+0xd4>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8000de4:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	0c9b      	lsrs	r3, r3, #18
 8000dea:	3302      	adds	r3, #2
 8000dec:	60bb      	str	r3, [r7, #8]

#if defined (STM32F302xE) || defined (STM32F303xE) || defined (STM32F398xx)
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 8000dee:	4b1b      	ldr	r3, [pc, #108]	@ (8000e5c <SystemCoreClockUpdate+0xd4>)
 8000df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df2:	f003 030f 	and.w	r3, r3, #15
 8000df6:	3301      	adds	r3, #1
 8000df8:	603b      	str	r3, [r7, #0]
      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e00:	d109      	bne.n	8000e16 <SystemCoreClockUpdate+0x8e>
      {
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
 8000e02:	4a18      	ldr	r2, [pc, #96]	@ (8000e64 <SystemCoreClockUpdate+0xdc>)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	fb02 f303 	mul.w	r3, r2, r3
 8000e10:	4a13      	ldr	r2, [pc, #76]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000e12:	6013      	str	r3, [r2, #0]
        predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        SystemCoreClock = (HSE_VALUE / predivfactor) * pllmull;
      }
#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
      break;
 8000e14:	e00d      	b.n	8000e32 <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI_VALUE / predivfactor) * pllmull;
 8000e16:	4a13      	ldr	r2, [pc, #76]	@ (8000e64 <SystemCoreClockUpdate+0xdc>)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1e:	68ba      	ldr	r2, [r7, #8]
 8000e20:	fb02 f303 	mul.w	r3, r2, r3
 8000e24:	4a0e      	ldr	r2, [pc, #56]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000e26:	6013      	str	r3, [r2, #0]
      break;
 8000e28:	e003      	b.n	8000e32 <SystemCoreClockUpdate+0xaa>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e64 <SystemCoreClockUpdate+0xdc>)
 8000e2e:	601a      	str	r2, [r3, #0]
      break;
 8000e30:	bf00      	nop
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000e32:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <SystemCoreClockUpdate+0xd4>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	f003 030f 	and.w	r3, r3, #15
 8000e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e68 <SystemCoreClockUpdate+0xe0>)
 8000e3e:	5cd3      	ldrb	r3, [r2, r3]
 8000e40:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	fa22 f303 	lsr.w	r3, r2, r3
 8000e4c:	4a04      	ldr	r2, [pc, #16]	@ (8000e60 <SystemCoreClockUpdate+0xd8>)
 8000e4e:	6013      	str	r3, [r2, #0]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	20000004 	.word	0x20000004
 8000e64:	007a1200 	.word	0x007a1200
 8000e68:	08005a24 	.word	0x08005a24

08000e6c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x28>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x28>)
 8000e76:	f043 0310 	orr.w	r3, r3, #16
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 fb9b 	bl	80015b8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f834 	bl	8000ef0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff ff02 	bl	8000c90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40022000 	.word	0x40022000

08000e98 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 8000eb2:	4b07      	ldr	r3, [pc, #28]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000eba:	f04f 32ff 	mov.w	r2, #4294967295
 8000ebe:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000ec0:	4b03      	ldr	r3, [pc, #12]	@ (8000ed0 <HAL_DeInit+0x38>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ec6:	f000 f80c 	bl	8000ee2 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40021000 	.word	0x40021000
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <HAL_MspDeInit>:
/**
  * @brief  DeInitialize the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ef8:	4b12      	ldr	r3, [pc, #72]	@ (8000f44 <HAL_InitTick+0x54>)
 8000efa:	681a      	ldr	r2, [r3, #0]
 8000efc:	4b12      	ldr	r3, [pc, #72]	@ (8000f48 <HAL_InitTick+0x58>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	4619      	mov	r1, r3
 8000f02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f000 fb99 	bl	8001646 <HAL_SYSTICK_Config>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e00e      	b.n	8000f3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2b0f      	cmp	r3, #15
 8000f22:	d80a      	bhi.n	8000f3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f24:	2200      	movs	r2, #0
 8000f26:	6879      	ldr	r1, [r7, #4]
 8000f28:	f04f 30ff 	mov.w	r0, #4294967295
 8000f2c:	f000 fb4f 	bl	80015ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f30:	4a06      	ldr	r2, [pc, #24]	@ (8000f4c <HAL_InitTick+0x5c>)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000f36:	2300      	movs	r3, #0
 8000f38:	e000      	b.n	8000f3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	20000004 	.word	0x20000004
 8000f48:	2000000c 	.word	0x2000000c
 8000f4c:	20000008 	.word	0x20000008

08000f50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	@ (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	2000000c 	.word	0x2000000c
 8000f74:	20000170 	.word	0x20000170

08000f78 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170

08000f90 <HAL_GetTickPrio>:
/**
  * @brief This function returns a tick priority.
  * @retval tick priority
  */
uint32_t HAL_GetTickPrio(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTickPrio;
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTickPrio+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008

08000fa8 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b084      	sub	sp, #16
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ff0 <HAL_SetTickFreq+0x48>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d012      	beq.n	8000fe6 <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8000fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ff0 <HAL_SetTickFreq+0x48>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 8000fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff0 <HAL_SetTickFreq+0x48>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq */
    status = HAL_InitTick(uwTickPrio);
 8000fcc:	4b09      	ldr	r3, [pc, #36]	@ (8000ff4 <HAL_SetTickFreq+0x4c>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff8d 	bl	8000ef0 <HAL_InitTick>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d002      	beq.n	8000fe6 <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8000fe0:	4a03      	ldr	r2, [pc, #12]	@ (8000ff0 <HAL_SetTickFreq+0x48>)
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3710      	adds	r7, #16
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000000c 	.word	0x2000000c
 8000ff4:	20000008 	.word	0x20000008

08000ff8 <HAL_GetTickFreq>:
  * @brief Return tick frequency.
  * @retval Tick frequency.
  *         Value of @ref HAL_TickFreqTypeDef.
  */
HAL_TickFreqTypeDef HAL_GetTickFreq(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return uwTickFreq;
 8000ffc:	4b03      	ldr	r3, [pc, #12]	@ (800100c <HAL_GetTickFreq+0x14>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	2000000c 	.word	0x2000000c

08001010 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001018:	f7ff ffae 	bl	8000f78 <HAL_GetTick>
 800101c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001028:	d005      	beq.n	8001036 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800102a:	4b0a      	ldr	r3, [pc, #40]	@ (8001054 <HAL_Delay+0x44>)
 800102c:	781b      	ldrb	r3, [r3, #0]
 800102e:	461a      	mov	r2, r3
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4413      	add	r3, r2
 8001034:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001036:	bf00      	nop
 8001038:	f7ff ff9e 	bl	8000f78 <HAL_GetTick>
 800103c:	4602      	mov	r2, r0
 800103e:	68bb      	ldr	r3, [r7, #8]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	68fa      	ldr	r2, [r7, #12]
 8001044:	429a      	cmp	r2, r3
 8001046:	d8f7      	bhi.n	8001038 <HAL_Delay+0x28>
  {
  }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	3710      	adds	r7, #16
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	2000000c 	.word	0x2000000c

08001058 <HAL_SuspendTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800105c:	4b05      	ldr	r3, [pc, #20]	@ (8001074 <HAL_SuspendTick+0x1c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	@ (8001074 <HAL_SuspendTick+0x1c>)
 8001062:	f023 0302 	bic.w	r3, r3, #2
 8001066:	6013      	str	r3, [r2, #0]
                                                   
}
 8001068:	bf00      	nop
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	e000e010 	.word	0xe000e010

08001078 <HAL_ResumeTick>:
  *         The function is declared as __Weak  to be overwritten  in case of other
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800107c:	4b05      	ldr	r3, [pc, #20]	@ (8001094 <HAL_ResumeTick+0x1c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	@ (8001094 <HAL_ResumeTick+0x1c>)
 8001082:	f043 0302 	orr.w	r3, r3, #2
 8001086:	6013      	str	r3, [r2, #0]
  
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000e010 	.word	0xe000e010

08001098 <HAL_GetHalVersion>:
/**
  * @brief  This function returns the HAL revision
  * @retval version 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
 return __STM32F3xx_HAL_VERSION;
 800109c:	4b02      	ldr	r3, [pc, #8]	@ (80010a8 <HAL_GetHalVersion+0x10>)
}
 800109e:	4618      	mov	r0, r3
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	01050800 	.word	0x01050800

080010ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <HAL_GetREVID+0x14>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	0c1b      	lsrs	r3, r3, #16
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e0042000 	.word	0xe0042000

080010c4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <HAL_GetDEVID+0x18>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e0042000 	.word	0xe0042000

080010e0 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 80010e4:	4b03      	ldr	r3, [pc, #12]	@ (80010f4 <HAL_GetUIDw0+0x14>)
 80010e6:	681b      	ldr	r3, [r3, #0]
}
 80010e8:	4618      	mov	r0, r3
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
 80010f2:	bf00      	nop
 80010f4:	1ffff7ac 	.word	0x1ffff7ac

080010f8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <HAL_GetUIDw1+0x14>)
 80010fe:	681b      	ldr	r3, [r3, #0]
}
 8001100:	4618      	mov	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	1ffff7b0 	.word	0x1ffff7b0

08001110 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetUIDw2+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	1ffff7b4 	.word	0x1ffff7b4

08001128 <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800112c:	4b05      	ldr	r3, [pc, #20]	@ (8001144 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_DBGMCU_EnableDBGSleepMode+0x1c>)
 8001132:	f043 0301 	orr.w	r3, r3, #1
 8001136:	6053      	str	r3, [r2, #4]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	e0042000 	.word	0xe0042000

08001148 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800114c:	4b05      	ldr	r3, [pc, #20]	@ (8001164 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	4a04      	ldr	r2, [pc, #16]	@ (8001164 <HAL_DBGMCU_DisableDBGSleepMode+0x1c>)
 8001152:	f023 0301 	bic.w	r3, r3, #1
 8001156:	6053      	str	r3, [r2, #4]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	e0042000 	.word	0xe0042000

08001168 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800116c:	4b05      	ldr	r3, [pc, #20]	@ (8001184 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	4a04      	ldr	r2, [pc, #16]	@ (8001184 <HAL_DBGMCU_EnableDBGStopMode+0x1c>)
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	6053      	str	r3, [r2, #4]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e0042000 	.word	0xe0042000

08001188 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 800118c:	4b05      	ldr	r3, [pc, #20]	@ (80011a4 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a04      	ldr	r2, [pc, #16]	@ (80011a4 <HAL_DBGMCU_DisableDBGStopMode+0x1c>)
 8001192:	f023 0302 	bic.w	r3, r3, #2
 8001196:	6053      	str	r3, [r2, #4]
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e0042000 	.word	0xe0042000

080011a8 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80011ac:	4b05      	ldr	r3, [pc, #20]	@ (80011c4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_DBGMCU_EnableDBGStandbyMode+0x1c>)
 80011b2:	f043 0304 	orr.w	r3, r3, #4
 80011b6:	6053      	str	r3, [r2, #4]
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e0042000 	.word	0xe0042000

080011c8 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80011cc:	4b05      	ldr	r3, [pc, #20]	@ (80011e4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	4a04      	ldr	r2, [pc, #16]	@ (80011e4 <HAL_DBGMCU_DisableDBGStandbyMode+0x1c>)
 80011d2:	f023 0304 	bic.w	r3, r3, #4
 80011d6:	6053      	str	r3, [r2, #4]
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	e0042000 	.word	0xe0042000

080011e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f003 0307 	and.w	r3, r3, #7
 80011f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f8:	4b0c      	ldr	r3, [pc, #48]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fe:	68ba      	ldr	r2, [r7, #8]
 8001200:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001204:	4013      	ands	r3, r2
 8001206:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001210:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001214:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001218:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800121a:	4a04      	ldr	r2, [pc, #16]	@ (800122c <__NVIC_SetPriorityGrouping+0x44>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	60d3      	str	r3, [r2, #12]
}
 8001220:	bf00      	nop
 8001222:	3714      	adds	r7, #20
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001234:	4b04      	ldr	r3, [pc, #16]	@ (8001248 <__NVIC_GetPriorityGrouping+0x18>)
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	0a1b      	lsrs	r3, r3, #8
 800123a:	f003 0307 	and.w	r3, r3, #7
}
 800123e:	4618      	mov	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0b      	blt.n	8001276 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 021f 	and.w	r2, r3, #31
 8001264:	4907      	ldr	r1, [pc, #28]	@ (8001284 <__NVIC_EnableIRQ+0x38>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	095b      	lsrs	r3, r3, #5
 800126c:	2001      	movs	r0, #1
 800126e:	fa00 f202 	lsl.w	r2, r0, r2
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	e000e100 	.word	0xe000e100

08001288 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001296:	2b00      	cmp	r3, #0
 8001298:	db12      	blt.n	80012c0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f003 021f 	and.w	r2, r3, #31
 80012a0:	490a      	ldr	r1, [pc, #40]	@ (80012cc <__NVIC_DisableIRQ+0x44>)
 80012a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a6:	095b      	lsrs	r3, r3, #5
 80012a8:	2001      	movs	r0, #1
 80012aa:	fa00 f202 	lsl.w	r2, r0, r2
 80012ae:	3320      	adds	r3, #32
 80012b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80012b4:	f3bf 8f4f 	dsb	sy
}
 80012b8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012ba:	f3bf 8f6f 	isb	sy
}
 80012be:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_GetPendingIRQ>:
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0e      	blt.n	8001300 <__NVIC_GetPendingIRQ+0x30>
  {
    return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 80012e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <__NVIC_GetPendingIRQ+0x40>)
 80012e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	3340      	adds	r3, #64	@ 0x40
 80012ec:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012f0:	79fb      	ldrb	r3, [r7, #7]
 80012f2:	f003 031f 	and.w	r3, r3, #31
 80012f6:	fa22 f303 	lsr.w	r3, r2, r3
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	e000      	b.n	8001302 <__NVIC_GetPendingIRQ+0x32>
  }
  else
  {
    return(0U);
 8001300:	2300      	movs	r3, #0
  }
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
 800130e:	bf00      	nop
 8001310:	e000e100 	.word	0xe000e100

08001314 <__NVIC_SetPendingIRQ>:
  \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001322:	2b00      	cmp	r3, #0
 8001324:	db0c      	blt.n	8001340 <__NVIC_SetPendingIRQ+0x2c>
  {
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	f003 021f 	and.w	r2, r3, #31
 800132c:	4907      	ldr	r1, [pc, #28]	@ (800134c <__NVIC_SetPendingIRQ+0x38>)
 800132e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001332:	095b      	lsrs	r3, r3, #5
 8001334:	2001      	movs	r0, #1
 8001336:	fa00 f202 	lsl.w	r2, r0, r2
 800133a:	3340      	adds	r3, #64	@ 0x40
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001340:	bf00      	nop
 8001342:	370c      	adds	r7, #12
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000e100 	.word	0xe000e100

08001350 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800135a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135e:	2b00      	cmp	r3, #0
 8001360:	db0c      	blt.n	800137c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f003 021f 	and.w	r2, r3, #31
 8001368:	4907      	ldr	r1, [pc, #28]	@ (8001388 <__NVIC_ClearPendingIRQ+0x38>)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	095b      	lsrs	r3, r3, #5
 8001370:	2001      	movs	r0, #1
 8001372:	fa00 f202 	lsl.w	r2, r0, r2
 8001376:	3360      	adds	r3, #96	@ 0x60
 8001378:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000e100 	.word	0xe000e100

0800138c <__NVIC_GetActive>:
  \return             0  Interrupt status is not active.
  \return             1  Interrupt status is active.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	db0e      	blt.n	80013bc <__NVIC_GetActive+0x30>
  {
    return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800139e:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <__NVIC_GetActive+0x40>)
 80013a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a4:	095b      	lsrs	r3, r3, #5
 80013a6:	3380      	adds	r3, #128	@ 0x80
 80013a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	f003 031f 	and.w	r3, r3, #31
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	e000      	b.n	80013be <__NVIC_GetActive+0x32>
  }
  else
  {
    return(0U);
 80013bc:	2300      	movs	r3, #0
  }
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000e100 	.word	0xe000e100

080013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	6039      	str	r1, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	db0a      	blt.n	80013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	490c      	ldr	r1, [pc, #48]	@ (800141c <__NVIC_SetPriority+0x4c>)
 80013ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ee:	0112      	lsls	r2, r2, #4
 80013f0:	b2d2      	uxtb	r2, r2
 80013f2:	440b      	add	r3, r1
 80013f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013f8:	e00a      	b.n	8001410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4908      	ldr	r1, [pc, #32]	@ (8001420 <__NVIC_SetPriority+0x50>)
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f003 030f 	and.w	r3, r3, #15
 8001406:	3b04      	subs	r3, #4
 8001408:	0112      	lsls	r2, r2, #4
 800140a:	b2d2      	uxtb	r2, r2
 800140c:	440b      	add	r3, r1
 800140e:	761a      	strb	r2, [r3, #24]
}
 8001410:	bf00      	nop
 8001412:	370c      	adds	r7, #12
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	e000e100 	.word	0xe000e100
 8001420:	e000ed00 	.word	0xe000ed00

08001424 <__NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	71fb      	strb	r3, [r7, #7]

  if ((int32_t)(IRQn) >= 0)
 800142e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001432:	2b00      	cmp	r3, #0
 8001434:	db09      	blt.n	800144a <__NVIC_GetPriority+0x26>
  {
    return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]               >> (8U - __NVIC_PRIO_BITS)));
 8001436:	4a0d      	ldr	r2, [pc, #52]	@ (800146c <__NVIC_GetPriority+0x48>)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	4413      	add	r3, r2
 800143e:	f893 3300 	ldrb.w	r3, [r3, #768]	@ 0x300
 8001442:	b2db      	uxtb	r3, r3
 8001444:	091b      	lsrs	r3, r3, #4
 8001446:	b2db      	uxtb	r3, r3
 8001448:	e009      	b.n	800145e <__NVIC_GetPriority+0x3a>
  }
  else
  {
    return(((uint32_t)SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <__NVIC_GetPriority+0x4c>)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	3b04      	subs	r3, #4
 8001454:	4413      	add	r3, r2
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	b2db      	uxtb	r3, r3
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	b2db      	uxtb	r3, r3
  }
}
 800145e:	4618      	mov	r0, r3
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000e100 	.word	0xe000e100
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001474:	b480      	push	{r7}
 8001476:	b089      	sub	sp, #36	@ 0x24
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f1c3 0307 	rsb	r3, r3, #7
 800148e:	2b04      	cmp	r3, #4
 8001490:	bf28      	it	cs
 8001492:	2304      	movcs	r3, #4
 8001494:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	3304      	adds	r3, #4
 800149a:	2b06      	cmp	r3, #6
 800149c:	d902      	bls.n	80014a4 <NVIC_EncodePriority+0x30>
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	3b03      	subs	r3, #3
 80014a2:	e000      	b.n	80014a6 <NVIC_EncodePriority+0x32>
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a8:	f04f 32ff 	mov.w	r2, #4294967295
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	43da      	mvns	r2, r3
 80014b4:	68bb      	ldr	r3, [r7, #8]
 80014b6:	401a      	ands	r2, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014bc:	f04f 31ff 	mov.w	r1, #4294967295
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	fa01 f303 	lsl.w	r3, r1, r3
 80014c6:	43d9      	mvns	r1, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014cc:	4313      	orrs	r3, r2
         );
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	3724      	adds	r7, #36	@ 0x24
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <NVIC_DecodePriority>:
  \param [in]     PriorityGroup  Used priority group.
  \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
  \param [out]     pSubPriority  Subpriority value (starting from 0).
 */
__STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* const pPreemptPriority, uint32_t* const pSubPriority)
{
 80014da:	b480      	push	{r7}
 80014dc:	b089      	sub	sp, #36	@ 0x24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	603b      	str	r3, [r7, #0]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	f1c3 0307 	rsb	r3, r3, #7
 80014f6:	2b04      	cmp	r3, #4
 80014f8:	bf28      	it	cs
 80014fa:	2304      	movcs	r3, #4
 80014fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	3304      	adds	r3, #4
 8001502:	2b06      	cmp	r3, #6
 8001504:	d902      	bls.n	800150c <NVIC_DecodePriority+0x32>
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	3b03      	subs	r3, #3
 800150a:	e000      	b.n	800150e <NVIC_DecodePriority+0x34>
 800150c:	2300      	movs	r3, #0
 800150e:	617b      	str	r3, [r7, #20]

  *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL);
 8001510:	68fa      	ldr	r2, [r7, #12]
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	40da      	lsrs	r2, r3
 8001516:	f04f 31ff 	mov.w	r1, #4294967295
 800151a:	69bb      	ldr	r3, [r7, #24]
 800151c:	fa01 f303 	lsl.w	r3, r1, r3
 8001520:	43db      	mvns	r3, r3
 8001522:	401a      	ands	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	601a      	str	r2, [r3, #0]
  *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL);
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	401a      	ands	r2, r3
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	601a      	str	r2, [r3, #0]
}
 800153c:	bf00      	nop
 800153e:	3724      	adds	r7, #36	@ 0x24
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800154c:	f3bf 8f4f 	dsb	sy
}
 8001550:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001552:	4b06      	ldr	r3, [pc, #24]	@ (800156c <__NVIC_SystemReset+0x24>)
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800155a:	4904      	ldr	r1, [pc, #16]	@ (800156c <__NVIC_SystemReset+0x24>)
 800155c:	4b04      	ldr	r3, [pc, #16]	@ (8001570 <__NVIC_SystemReset+0x28>)
 800155e:	4313      	orrs	r3, r2
 8001560:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001562:	f3bf 8f4f 	dsb	sy
}
 8001566:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <__NVIC_SystemReset+0x20>
 800156c:	e000ed00 	.word	0xe000ed00
 8001570:	05fa0004 	.word	0x05fa0004

08001574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	3b01      	subs	r3, #1
 8001580:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001584:	d301      	bcc.n	800158a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001586:	2301      	movs	r3, #1
 8001588:	e00f      	b.n	80015aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158a:	4a0a      	ldr	r2, [pc, #40]	@ (80015b4 <SysTick_Config+0x40>)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3b01      	subs	r3, #1
 8001590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001592:	210f      	movs	r1, #15
 8001594:	f04f 30ff 	mov.w	r0, #4294967295
 8001598:	f7ff ff1a 	bl	80013d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800159c:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <SysTick_Config+0x40>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a2:	4b04      	ldr	r3, [pc, #16]	@ (80015b4 <SysTick_Config+0x40>)
 80015a4:	2207      	movs	r2, #7
 80015a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3708      	adds	r7, #8
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	e000e010 	.word	0xe000e010

080015b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff fe11 	bl	80011e8 <__NVIC_SetPriorityGrouping>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b086      	sub	sp, #24
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	4603      	mov	r3, r0
 80015d6:	60b9      	str	r1, [r7, #8]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015e0:	f7ff fe26 	bl	8001230 <__NVIC_GetPriorityGrouping>
 80015e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	68b9      	ldr	r1, [r7, #8]
 80015ea:	6978      	ldr	r0, [r7, #20]
 80015ec:	f7ff ff42 	bl	8001474 <NVIC_EncodePriority>
 80015f0:	4602      	mov	r2, r0
 80015f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fee9 	bl	80013d0 <__NVIC_SetPriority>
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	4603      	mov	r3, r0
 800160e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fe19 	bl	800124c <__NVIC_EnableIRQ>
}
 800161a:	bf00      	nop
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b082      	sub	sp, #8
 8001626:	af00      	add	r7, sp, #0
 8001628:	4603      	mov	r3, r0
 800162a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fe29 	bl	8001288 <__NVIC_DisableIRQ>
}
 8001636:	bf00      	nop
 8001638:	3708      	adds	r7, #8
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}

0800163e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001642:	f7ff ff81 	bl	8001548 <__NVIC_SystemReset>

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff90 	bl	8001574 <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}

0800165e <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU also clears the HFNMIENA bit (ARM recommendation) 
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800165e:	b480      	push	{r7}
 8001660:	af00      	add	r7, sp, #0
  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001662:	4b07      	ldr	r3, [pc, #28]	@ (8001680 <HAL_MPU_Disable+0x22>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	4a06      	ldr	r2, [pc, #24]	@ (8001680 <HAL_MPU_Disable+0x22>)
 8001668:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166c:	6253      	str	r3, [r2, #36]	@ 0x24
  
  /* Disable the MPU */
  MPU->CTRL = 0U;
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <HAL_MPU_Disable+0x26>)
 8001670:	2200      	movs	r2, #0
 8001672:	605a      	str	r2, [r3, #4]
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00
 8001684:	e000ed90 	.word	0xe000ed90

08001688 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001688:	b480      	push	{r7}
 800168a:	b083      	sub	sp, #12
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL   = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001690:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MPU_Enable+0x2c>)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_MPU_Enable+0x30>)
 800169c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169e:	4a06      	ldr	r2, [pc, #24]	@ (80016b8 <HAL_MPU_Enable+0x30>)
 80016a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016a4:	6253      	str	r3, [r2, #36]	@ 0x24
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	e000ed90 	.word	0xe000ed90
 80016b8:	e000ed00 	.word	0xe000ed00

080016bc <HAL_MPU_EnableRegion>:
/**
  * @brief  Enables the MPU Region.
  * @retval None
  */
void HAL_MPU_EnableRegion(uint32_t RegionNumber)
{
 80016bc:	b480      	push	{r7}
 80016be:	b083      	sub	sp, #12
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
 80016c4:	4a07      	ldr	r2, [pc, #28]	@ (80016e4 <HAL_MPU_EnableRegion+0x28>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6093      	str	r3, [r2, #8]

  /* Enable the Region */
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016ca:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <HAL_MPU_EnableRegion+0x28>)
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	4a05      	ldr	r2, [pc, #20]	@ (80016e4 <HAL_MPU_EnableRegion+0x28>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6113      	str	r3, [r2, #16]
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr
 80016e2:	bf00      	nop
 80016e4:	e000ed90 	.word	0xe000ed90

080016e8 <HAL_MPU_DisableRegion>:
/**
  * @brief  Disables the MPU Region.
  * @retval None
  */
void HAL_MPU_DisableRegion(uint32_t RegionNumber)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b083      	sub	sp, #12
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(RegionNumber));

  /* Set the Region number */
  MPU->RNR = RegionNumber;
 80016f0:	4a07      	ldr	r2, [pc, #28]	@ (8001710 <HAL_MPU_DisableRegion+0x28>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6093      	str	r3, [r2, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016f6:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <HAL_MPU_DisableRegion+0x28>)
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <HAL_MPU_DisableRegion+0x28>)
 80016fc:	f023 0301 	bic.w	r3, r3, #1
 8001700:	6113      	str	r3, [r2, #16]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed90 	.word	0xe000ed90

08001714 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	785a      	ldrb	r2, [r3, #1]
 8001720:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_MPU_ConfigRegion+0x7c>)
 8001722:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001724:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_MPU_ConfigRegion+0x7c>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a19      	ldr	r2, [pc, #100]	@ (8001790 <HAL_MPU_ConfigRegion+0x7c>)
 800172a:	f023 0301 	bic.w	r3, r3, #1
 800172e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001730:	4a17      	ldr	r2, [pc, #92]	@ (8001790 <HAL_MPU_ConfigRegion+0x7c>)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	7b1b      	ldrb	r3, [r3, #12]
 800173c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	7adb      	ldrb	r3, [r3, #11]
 8001742:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001744:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7a9b      	ldrb	r3, [r3, #10]
 800174a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800174c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7b5b      	ldrb	r3, [r3, #13]
 8001752:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001754:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	7b9b      	ldrb	r3, [r3, #14]
 800175a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800175c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7bdb      	ldrb	r3, [r3, #15]
 8001762:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001764:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7a5b      	ldrb	r3, [r3, #9]
 800176a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800176c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a1b      	ldrb	r3, [r3, #8]
 8001772:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001774:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	7812      	ldrb	r2, [r2, #0]
 800177a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800177c:	4a04      	ldr	r2, [pc, #16]	@ (8001790 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800177e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001780:	6113      	str	r3, [r2, #16]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	e000ed90 	.word	0xe000ed90

08001794 <HAL_NVIC_GetPriorityGrouping>:
/**
  * @brief  Gets the priority grouping field from the NVIC Interrupt Controller.
  * @retval Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field)
  */
uint32_t HAL_NVIC_GetPriorityGrouping(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Get the PRIGROUP[10:8] field value */
  return NVIC_GetPriorityGrouping();
 8001798:	f7ff fd4a 	bl	8001230 <__NVIC_GetPriorityGrouping>
 800179c:	4603      	mov	r3, r0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_NVIC_GetPriority>:
  * @param  pPreemptPriority Pointer on the Preemptive priority value (starting from 0).
  * @param  pSubPriority Pointer on the Subpriority value (starting from 0).
  * @retval None
  */
void HAL_NVIC_GetPriority(IRQn_Type IRQn, uint32_t PriorityGroup, uint32_t* pPreemptPriority, uint32_t* pSubPriority)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b084      	sub	sp, #16
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	4603      	mov	r3, r0
 80017b0:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  /* Get priority for Cortex-M system or device specific interrupts */
  NVIC_DecodePriority(NVIC_GetPriority(IRQn), PriorityGroup, pPreemptPriority, pSubPriority);
 80017b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff fe34 	bl	8001424 <__NVIC_GetPriority>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	68b9      	ldr	r1, [r7, #8]
 80017c2:	f7ff fe8a 	bl	80014da <NVIC_DecodePriority>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b082      	sub	sp, #8
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	4603      	mov	r3, r0
 80017d6:	71fb      	strb	r3, [r7, #7]
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80017d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff fd99 	bl	8001314 <__NVIC_SetPendingIRQ>
}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	4603      	mov	r3, r0
 80017f2:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if pending else 0U */
  return NVIC_GetPendingIRQ(IRQn);
 80017f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7ff fd69 	bl	80012d0 <__NVIC_GetPendingIRQ>
 80017fe:	4603      	mov	r3, r0
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	4603      	mov	r3, r0
 8001810:	71fb      	strb	r3, [r7, #7]
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8001812:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff fd9a 	bl	8001350 <__NVIC_ClearPendingIRQ>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <HAL_NVIC_GetActive>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetActive(IRQn_Type IRQn)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  /* Return 1 if active else 0U */
  return NVIC_GetActive(IRQn);
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff fdaa 	bl	800138c <__NVIC_GetActive>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8001842:	b480      	push	{r7}
 8001844:	b083      	sub	sp, #12
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d106      	bne.n	800185e <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001850:	4b09      	ldr	r3, [pc, #36]	@ (8001878 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a08      	ldr	r2, [pc, #32]	@ (8001878 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001856:	f043 0304 	orr.w	r3, r3, #4
 800185a:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800185c:	e005      	b.n	800186a <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800185e:	4b06      	ldr	r3, [pc, #24]	@ (8001878 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a05      	ldr	r2, [pc, #20]	@ (8001878 <HAL_SYSTICK_CLKSourceConfig+0x36>)
 8001864:	f023 0304 	bic.w	r3, r3, #4
 8001868:	6013      	str	r3, [r2, #0]
}
 800186a:	bf00      	nop
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000e010 	.word	0xe000e010

0800187c <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8001880:	f000 f802 	bl	8001888 <HAL_SYSTICK_Callback>
}
 8001884:	bf00      	nop
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop

08001898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001898:	b480      	push	{r7}
 800189a:	b087      	sub	sp, #28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
 80018a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018a6:	e160      	b.n	8001b6a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	2101      	movs	r1, #1
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	fa01 f303 	lsl.w	r3, r1, r3
 80018b4:	4013      	ands	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	f000 8152 	beq.w	8001b64 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d005      	beq.n	80018d8 <HAL_GPIO_Init+0x40>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0303 	and.w	r3, r3, #3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d130      	bne.n	800193a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	2203      	movs	r2, #3
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	693a      	ldr	r2, [r7, #16]
 80018ec:	4013      	ands	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	005b      	lsls	r3, r3, #1
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	4313      	orrs	r3, r2
 8001900:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800190e:	2201      	movs	r2, #1
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	fa02 f303 	lsl.w	r3, r2, r3
 8001916:	43db      	mvns	r3, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4013      	ands	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	091b      	lsrs	r3, r3, #4
 8001924:	f003 0201 	and.w	r2, r3, #1
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	4313      	orrs	r3, r2
 8001932:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f003 0303 	and.w	r3, r3, #3
 8001942:	2b03      	cmp	r3, #3
 8001944:	d017      	beq.n	8001976 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	2203      	movs	r2, #3
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	4013      	ands	r3, r2
 800195c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4313      	orrs	r3, r2
 800196e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	693a      	ldr	r2, [r7, #16]
 8001974:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f003 0303 	and.w	r3, r3, #3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d123      	bne.n	80019ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800198e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	220f      	movs	r2, #15
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4013      	ands	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	6939      	ldr	r1, [r7, #16]
 80019c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	2203      	movs	r2, #3
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0203 	and.w	r2, r3, #3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80ac 	beq.w	8001b64 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	4a5d      	ldr	r2, [pc, #372]	@ (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	6193      	str	r3, [r2, #24]
 8001a18:	4b5b      	ldr	r3, [pc, #364]	@ (8001b88 <HAL_GPIO_Init+0x2f0>)
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a24:	4a59      	ldr	r2, [pc, #356]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	089b      	lsrs	r3, r3, #2
 8001a2a:	3302      	adds	r3, #2
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	220f      	movs	r2, #15
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	693a      	ldr	r2, [r7, #16]
 8001a44:	4013      	ands	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001a4e:	d025      	beq.n	8001a9c <HAL_GPIO_Init+0x204>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a4f      	ldr	r2, [pc, #316]	@ (8001b90 <HAL_GPIO_Init+0x2f8>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d01f      	beq.n	8001a98 <HAL_GPIO_Init+0x200>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a4e      	ldr	r2, [pc, #312]	@ (8001b94 <HAL_GPIO_Init+0x2fc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d019      	beq.n	8001a94 <HAL_GPIO_Init+0x1fc>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a4d      	ldr	r2, [pc, #308]	@ (8001b98 <HAL_GPIO_Init+0x300>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_GPIO_Init+0x1f8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a4c      	ldr	r2, [pc, #304]	@ (8001b9c <HAL_GPIO_Init+0x304>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d00d      	beq.n	8001a8c <HAL_GPIO_Init+0x1f4>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a4b      	ldr	r2, [pc, #300]	@ (8001ba0 <HAL_GPIO_Init+0x308>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d007      	beq.n	8001a88 <HAL_GPIO_Init+0x1f0>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	4a4a      	ldr	r2, [pc, #296]	@ (8001ba4 <HAL_GPIO_Init+0x30c>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_GPIO_Init+0x1ec>
 8001a80:	2306      	movs	r3, #6
 8001a82:	e00c      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a84:	2307      	movs	r3, #7
 8001a86:	e00a      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a88:	2305      	movs	r3, #5
 8001a8a:	e008      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a8c:	2304      	movs	r3, #4
 8001a8e:	e006      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a90:	2303      	movs	r3, #3
 8001a92:	e004      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e002      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <HAL_GPIO_Init+0x206>
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	697a      	ldr	r2, [r7, #20]
 8001aa0:	f002 0203 	and.w	r2, r2, #3
 8001aa4:	0092      	lsls	r2, r2, #2
 8001aa6:	4093      	lsls	r3, r2
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001aae:	4937      	ldr	r1, [pc, #220]	@ (8001b8c <HAL_GPIO_Init+0x2f4>)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	089b      	lsrs	r3, r3, #2
 8001ab4:	3302      	adds	r3, #2
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001abc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	693a      	ldr	r2, [r7, #16]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d003      	beq.n	8001ae0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ae0:	4a31      	ldr	r2, [pc, #196]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ae6:	4b30      	ldr	r3, [pc, #192]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	4013      	ands	r3, r2
 8001af4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b0a:	4a27      	ldr	r2, [pc, #156]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d003      	beq.n	8001b34 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b5e:	4a12      	ldr	r2, [pc, #72]	@ (8001ba8 <HAL_GPIO_Init+0x310>)
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3301      	adds	r3, #1
 8001b68:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f47f ae97 	bne.w	80018a8 <HAL_GPIO_Init+0x10>
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	bf00      	nop
 8001b7e:	371c      	adds	r7, #28
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	48000400 	.word	0x48000400
 8001b94:	48000800 	.word	0x48000800
 8001b98:	48000c00 	.word	0x48000c00
 8001b9c:	48001000 	.word	0x48001000
 8001ba0:	48001400 	.word	0x48001400
 8001ba4:	48001800 	.word	0x48001800
 8001ba8:	40010400 	.word	0x40010400

08001bac <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b087      	sub	sp, #28
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001bba:	e0c4      	b.n	8001d46 <HAL_GPIO_DeInit+0x19a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	683a      	ldr	r2, [r7, #0]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 80b7 	beq.w	8001d40 <HAL_GPIO_DeInit+0x194>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001bd2:	4a64      	ldr	r2, [pc, #400]	@ (8001d64 <HAL_GPIO_DeInit+0x1b8>)
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bde:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	220f      	movs	r2, #15
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001bfa:	d025      	beq.n	8001c48 <HAL_GPIO_DeInit+0x9c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a5a      	ldr	r2, [pc, #360]	@ (8001d68 <HAL_GPIO_DeInit+0x1bc>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d01f      	beq.n	8001c44 <HAL_GPIO_DeInit+0x98>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a59      	ldr	r2, [pc, #356]	@ (8001d6c <HAL_GPIO_DeInit+0x1c0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d019      	beq.n	8001c40 <HAL_GPIO_DeInit+0x94>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a58      	ldr	r2, [pc, #352]	@ (8001d70 <HAL_GPIO_DeInit+0x1c4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d013      	beq.n	8001c3c <HAL_GPIO_DeInit+0x90>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a57      	ldr	r2, [pc, #348]	@ (8001d74 <HAL_GPIO_DeInit+0x1c8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d00d      	beq.n	8001c38 <HAL_GPIO_DeInit+0x8c>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a56      	ldr	r2, [pc, #344]	@ (8001d78 <HAL_GPIO_DeInit+0x1cc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d007      	beq.n	8001c34 <HAL_GPIO_DeInit+0x88>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a55      	ldr	r2, [pc, #340]	@ (8001d7c <HAL_GPIO_DeInit+0x1d0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_GPIO_DeInit+0x84>
 8001c2c:	2306      	movs	r3, #6
 8001c2e:	e00c      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c30:	2307      	movs	r3, #7
 8001c32:	e00a      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c34:	2305      	movs	r3, #5
 8001c36:	e008      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c38:	2304      	movs	r3, #4
 8001c3a:	e006      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e004      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c40:	2302      	movs	r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c44:	2301      	movs	r3, #1
 8001c46:	e000      	b.n	8001c4a <HAL_GPIO_DeInit+0x9e>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	f002 0203 	and.w	r2, r2, #3
 8001c50:	0092      	lsls	r2, r2, #2
 8001c52:	4093      	lsls	r3, r2
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d132      	bne.n	8001cc0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001c5a:	4b49      	ldr	r3, [pc, #292]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	4947      	ldr	r1, [pc, #284]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c64:	4013      	ands	r3, r2
 8001c66:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8001c68:	4b45      	ldr	r3, [pc, #276]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	4943      	ldr	r1, [pc, #268]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c72:	4013      	ands	r3, r2
 8001c74:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8001c76:	4b42      	ldr	r3, [pc, #264]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	4940      	ldr	r1, [pc, #256]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8001c84:	4b3e      	ldr	r3, [pc, #248]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	493c      	ldr	r1, [pc, #240]	@ (8001d80 <HAL_GPIO_DeInit+0x1d4>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	220f      	movs	r2, #15
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001ca2:	4a30      	ldr	r2, [pc, #192]	@ (8001d64 <HAL_GPIO_DeInit+0x1b8>)
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	089b      	lsrs	r3, r3, #2
 8001ca8:	3302      	adds	r3, #2
 8001caa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43da      	mvns	r2, r3
 8001cb2:	482c      	ldr	r0, [pc, #176]	@ (8001d64 <HAL_GPIO_DeInit+0x1b8>)
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	400a      	ands	r2, r1
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	2103      	movs	r1, #3
 8001cca:	fa01 f303 	lsl.w	r3, r1, r3
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	401a      	ands	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	08da      	lsrs	r2, r3, #3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	3208      	adds	r2, #8
 8001cde:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	f003 0307 	and.w	r3, r3, #7
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	220f      	movs	r2, #15
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	08d2      	lsrs	r2, r2, #3
 8001cf6:	4019      	ands	r1, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3208      	adds	r2, #8
 8001cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	2103      	movs	r1, #3
 8001d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	401a      	ands	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685a      	ldr	r2, [r3, #4]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	689a      	ldr	r2, [r3, #8]
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2103      	movs	r1, #3
 8001d34:	fa01 f303 	lsl.w	r3, r1, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	401a      	ands	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	609a      	str	r2, [r3, #8]
    }

    position++;
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	3301      	adds	r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	f47f af34 	bne.w	8001bbc <HAL_GPIO_DeInit+0x10>
  }
}
 8001d54:	bf00      	nop
 8001d56:	bf00      	nop
 8001d58:	371c      	adds	r7, #28
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40010000 	.word	0x40010000
 8001d68:	48000400 	.word	0x48000400
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	48000c00 	.word	0x48000c00
 8001d74:	48001000 	.word	0x48001000
 8001d78:	48001400 	.word	0x48001400
 8001d7c:	48001800 	.word	0x48001800
 8001d80:	40010400 	.word	0x40010400

08001d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b085      	sub	sp, #20
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691a      	ldr	r2, [r3, #16]
 8001d94:	887b      	ldrh	r3, [r7, #2]
 8001d96:	4013      	ands	r3, r2
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d002      	beq.n	8001da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e001      	b.n	8001da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	807b      	strh	r3, [r7, #2]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc4:	787b      	ldrb	r3, [r7, #1]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dca:	887a      	ldrh	r2, [r7, #2]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dd2:	887a      	ldrh	r2, [r7, #2]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b085      	sub	sp, #20
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	460b      	mov	r3, r1
 8001dee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	43d9      	mvns	r1, r3
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	400b      	ands	r3, r1
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	619a      	str	r2, [r3, #24]
}
 8001e0c:	bf00      	nop
 8001e0e:	3714      	adds	r7, #20
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b085      	sub	sp, #20
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8001e24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e28:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  tmp |= GPIO_Pin;
 8001e2a:	887a      	ldrh	r2, [r7, #2]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15U-0] */
  GPIOx->LCKR = tmp;
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15U-0] */
  GPIOx->LCKR = GPIO_Pin;
 8001e38:	887a      	ldrh	r2, [r7, #2]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15U-0] */
  GPIOx->LCKR = tmp;
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	61da      	str	r2, [r3, #28]
  /* Read LCKK register. This read is mandatory to complete key lock sequence */
  tmp = GPIOx->LCKR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69db      	ldr	r3, [r3, #28]
 8001e48:	60fb      	str	r3, [r7, #12]

  /* read again in order to confirm lock is active */
 if((GPIOx->LCKR & GPIO_LCKR_LCKK) != 0x00u)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_GPIO_LockPin+0x42>
  {
    return HAL_OK;
 8001e56:	2300      	movs	r3, #0
 8001e58:	e000      	b.n	8001e5c <HAL_GPIO_LockPin+0x44>
  }
  else
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
  }
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e72:	4b08      	ldr	r3, [pc, #32]	@ (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7e:	4a05      	ldr	r2, [pc, #20]	@ (8001e94 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e84:	88fb      	ldrh	r3, [r7, #6]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fea4 	bl	8000bd4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	40010400 	.word	0x40010400
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop

08001eb0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001eba:	4b49      	ldr	r3, [pc, #292]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001ec0:	f043 0301 	orr.w	r3, r3, #1
 8001ec4:	6013      	str	r3, [r2, #0]

  /* Insure HSIRDY bit is set before writing default HSITRIM value */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001ec6:	f7ff f857 	bl	8000f78 <HAL_GetTick>
 8001eca:	60f8      	str	r0, [r7, #12]

  /* Wait till HSI is ready */
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ecc:	e008      	b.n	8001ee0 <HAL_RCC_DeInit+0x30>
  {
    if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ece:	f7ff f853 	bl	8000f78 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d901      	bls.n	8001ee0 <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e07b      	b.n	8001fd8 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001ee0:	4b3f      	ldr	r3, [pc, #252]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0302 	and.w	r3, r3, #2
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f0      	beq.n	8001ece <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM default value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, RCC_CR_HSITRIM_4);
 8001eec:	4b3c      	ldr	r3, [pc, #240]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8001ef4:	4a3a      	ldr	r2, [pc, #232]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efa:	6013      	str	r3, [r2, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 | RCC_CFGR_PPRE2 | RCC_CFGR_MCO);
 8001efc:	4b38      	ldr	r3, [pc, #224]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	4937      	ldr	r1, [pc, #220]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f02:	4b38      	ldr	r3, [pc, #224]	@ (8001fe4 <HAL_RCC_DeInit+0x134>)
 8001f04:	4013      	ands	r3, r2
 8001f06:	604b      	str	r3, [r1, #4]

  /* Insure HSI selected as system clock source */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001f08:	f7ff f836 	bl	8000f78 <HAL_GetTick>
 8001f0c:	60f8      	str	r0, [r7, #12]

  /* Wait till system clock source is ready */
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_DeInit+0x76>
  {
    if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f10:	f7ff f832 	bl	8000f78 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_DeInit+0x76>
    {
      return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e058      	b.n	8001fd8 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8001f26:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 030c 	and.w	r3, r3, #12
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1ee      	bne.n	8001f10 <HAL_RCC_DeInit+0x60>
    }
  }

  /* Update the SystemCoreClock global variable for HSI as system clock source */
  SystemCoreClock = HSI_VALUE;
 8001f32:	4b2d      	ldr	r3, [pc, #180]	@ (8001fe8 <HAL_RCC_DeInit+0x138>)
 8001f34:	4a2d      	ldr	r2, [pc, #180]	@ (8001fec <HAL_RCC_DeInit+0x13c>)
 8001f36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clock settings  */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <HAL_RCC_DeInit+0x140>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7fe ffd7 	bl	8000ef0 <HAL_InitTick>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <HAL_RCC_DeInit+0x9c>
  {
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e045      	b.n	8001fd8 <HAL_RCC_DeInit+0x128>
  }

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 8001f4c:	4b24      	ldr	r3, [pc, #144]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f52:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8001f56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f5a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8001f5c:	4b20      	ldr	r3, [pc, #128]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1f      	ldr	r2, [pc, #124]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f66:	6013      	str	r3, [r2, #0]

  /* Insure PLLRDY is reset */
  /* Get start tick */
  tickstart = HAL_GetTick();
 8001f68:	f7ff f806 	bl	8000f78 <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_DeInit+0xd2>
  {
    if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7ff f802 	bl	8000f78 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_DeInit+0xd2>
    {
      return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e02a      	b.n	8001fd8 <HAL_RCC_DeInit+0x128>
  while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f82:	4b17      	ldr	r3, [pc, #92]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_DeInit+0xc0>
    }
  }

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001f8e:	4b14      	ldr	r3, [pc, #80]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 8001f94:	4b12      	ldr	r3, [pc, #72]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8001f9a:	4b11      	ldr	r3, [pc, #68]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8001fa0:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001fa6:	f443 031f 	orr.w	r3, r3, #10420224	@ 0x9f0000
 8001faa:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8001fac:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe0 <HAL_RCC_DeInit+0x130>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
 8001fb2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001fb6:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	fa93 f3a3 	rbit	r3, r3
 8001fbe:	607b      	str	r3, [r7, #4]
  return result;
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* Reset all CSR flags */
  __HAL_RCC_CLEAR_RESET_FLAGS();
 8001fc2:	fab3 f383 	clz	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff4 <HAL_RCC_DeInit+0x144>)
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	f8ffc00c 	.word	0xf8ffc00c
 8001fe8:	20000004 	.word	0x20000004
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	20000008 	.word	0x20000008
 8001ff4:	10908120 	.word	0x10908120

08001ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001ffe:	af00      	add	r7, sp, #0
 8002000:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002004:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002008:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800200a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	f001 b83a 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800201e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002022:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	2b00      	cmp	r3, #0
 8002030:	f000 816f 	beq.w	8002312 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002034:	4bb5      	ldr	r3, [pc, #724]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d00c      	beq.n	800205a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002040:	4bb2      	ldr	r3, [pc, #712]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d15c      	bne.n	8002106 <HAL_RCC_OscConfig+0x10e>
 800204c:	4baf      	ldr	r3, [pc, #700]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002054:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002058:	d155      	bne.n	8002106 <HAL_RCC_OscConfig+0x10e>
 800205a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800205e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002062:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002066:	fa93 f3a3 	rbit	r3, r3
 800206a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  return result;
 800206e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002072:	fab3 f383 	clz	r3, r3
 8002076:	b2db      	uxtb	r3, r3
 8002078:	095b      	lsrs	r3, r3, #5
 800207a:	b2db      	uxtb	r3, r3
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d102      	bne.n	800208c <HAL_RCC_OscConfig+0x94>
 8002086:	4ba1      	ldr	r3, [pc, #644]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	e015      	b.n	80020b8 <HAL_RCC_OscConfig+0xc0>
 800208c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002090:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002094:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 80020a0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020a4:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80020a8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80020b4:	4b95      	ldr	r3, [pc, #596]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 80020b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020bc:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80020c0:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80020c4:	fa92 f2a2 	rbit	r2, r2
 80020c8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80020cc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80020d0:	fab2 f282 	clz	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f042 0220 	orr.w	r2, r2, #32
 80020da:	b2d2      	uxtb	r2, r2
 80020dc:	f002 021f 	and.w	r2, r2, #31
 80020e0:	2101      	movs	r1, #1
 80020e2:	fa01 f202 	lsl.w	r2, r1, r2
 80020e6:	4013      	ands	r3, r2
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 8111 	beq.w	8002310 <HAL_RCC_OscConfig+0x318>
 80020ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020f2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 8108 	bne.w	8002310 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f000 bfc6 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800210a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002116:	d106      	bne.n	8002126 <HAL_RCC_OscConfig+0x12e>
 8002118:	4b7c      	ldr	r3, [pc, #496]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a7b      	ldr	r2, [pc, #492]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800211e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	e036      	b.n	8002194 <HAL_RCC_OscConfig+0x19c>
 8002126:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800212a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x158>
 8002136:	4b75      	ldr	r3, [pc, #468]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a74      	ldr	r2, [pc, #464]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800213c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b72      	ldr	r3, [pc, #456]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a71      	ldr	r2, [pc, #452]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002148:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e021      	b.n	8002194 <HAL_RCC_OscConfig+0x19c>
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x184>
 8002162:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a69      	ldr	r2, [pc, #420]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b67      	ldr	r3, [pc, #412]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a66      	ldr	r2, [pc, #408]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002174:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e00b      	b.n	8002194 <HAL_RCC_OscConfig+0x19c>
 800217c:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a62      	ldr	r2, [pc, #392]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002182:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002186:	6013      	str	r3, [r2, #0]
 8002188:	4b60      	ldr	r3, [pc, #384]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a5f      	ldr	r2, [pc, #380]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 800218e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002192:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d059      	beq.n	8002258 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a4:	f7fe fee8 	bl	8000f78 <HAL_GetTick>
 80021a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ac:	e00a      	b.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021ae:	f7fe fee3 	bl	8000f78 <HAL_GetTick>
 80021b2:	4602      	mov	r2, r0
 80021b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	@ 0x64
 80021bc:	d902      	bls.n	80021c4 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	f000 bf67 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 80021c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021c8:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 80021d0:	fa93 f3a3 	rbit	r3, r3
 80021d4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 80021d8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021dc:	fab3 f383 	clz	r3, r3
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_OscConfig+0x1fe>
 80021f0:	4b46      	ldr	r3, [pc, #280]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	e015      	b.n	8002222 <HAL_RCC_OscConfig+0x22a>
 80021f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80021fa:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800220a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800220e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002212:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8002216:	fa93 f3a3 	rbit	r3, r3
 800221a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800221e:	4b3b      	ldr	r3, [pc, #236]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002226:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800222a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800222e:	fa92 f2a2 	rbit	r2, r2
 8002232:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002236:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800223a:	fab2 f282 	clz	r2, r2
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	f042 0220 	orr.w	r2, r2, #32
 8002244:	b2d2      	uxtb	r2, r2
 8002246:	f002 021f 	and.w	r2, r2, #31
 800224a:	2101      	movs	r1, #1
 800224c:	fa01 f202 	lsl.w	r2, r1, r2
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0ab      	beq.n	80021ae <HAL_RCC_OscConfig+0x1b6>
 8002256:	e05c      	b.n	8002312 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7fe fe8e 	bl	8000f78 <HAL_GetTick>
 800225c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002260:	e00a      	b.n	8002278 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002262:	f7fe fe89 	bl	8000f78 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b64      	cmp	r3, #100	@ 0x64
 8002270:	d902      	bls.n	8002278 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	f000 bf0d 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 8002278:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800227c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002280:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800228c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	b2db      	uxtb	r3, r3
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d102      	bne.n	80022aa <HAL_RCC_OscConfig+0x2b2>
 80022a4:	4b19      	ldr	r3, [pc, #100]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e015      	b.n	80022d6 <HAL_RCC_OscConfig+0x2de>
 80022aa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022ae:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 80022b6:	fa93 f3a3 	rbit	r3, r3
 80022ba:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 80022be:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80022c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80022c6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 80022ca:	fa93 f3a3 	rbit	r3, r3
 80022ce:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <HAL_RCC_OscConfig+0x314>)
 80022d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022da:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80022de:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80022e2:	fa92 f2a2 	rbit	r2, r2
 80022e6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80022ea:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80022ee:	fab2 f282 	clz	r2, r2
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	f042 0220 	orr.w	r2, r2, #32
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	f002 021f 	and.w	r2, r2, #31
 80022fe:	2101      	movs	r1, #1
 8002300:	fa01 f202 	lsl.w	r2, r1, r2
 8002304:	4013      	ands	r3, r2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1ab      	bne.n	8002262 <HAL_RCC_OscConfig+0x26a>
 800230a:	e002      	b.n	8002312 <HAL_RCC_OscConfig+0x31a>
 800230c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002310:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002316:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 817f 	beq.w	8002626 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002328:	4ba7      	ldr	r3, [pc, #668]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 030c 	and.w	r3, r3, #12
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002334:	4ba4      	ldr	r3, [pc, #656]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b08      	cmp	r3, #8
 800233e:	d173      	bne.n	8002428 <HAL_RCC_OscConfig+0x430>
 8002340:	4ba1      	ldr	r3, [pc, #644]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002348:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800234c:	d16c      	bne.n	8002428 <HAL_RCC_OscConfig+0x430>
 800234e:	2302      	movs	r3, #2
 8002350:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002354:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002358:	fa93 f3a3 	rbit	r3, r3
 800235c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002360:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002364:	fab3 f383 	clz	r3, r3
 8002368:	b2db      	uxtb	r3, r3
 800236a:	095b      	lsrs	r3, r3, #5
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	b2db      	uxtb	r3, r3
 8002374:	2b01      	cmp	r3, #1
 8002376:	d102      	bne.n	800237e <HAL_RCC_OscConfig+0x386>
 8002378:	4b93      	ldr	r3, [pc, #588]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	e013      	b.n	80023a6 <HAL_RCC_OscConfig+0x3ae>
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002384:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002388:	fa93 f3a3 	rbit	r3, r3
 800238c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002390:	2302      	movs	r3, #2
 8002392:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002396:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800239a:	fa93 f3a3 	rbit	r3, r3
 800239e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80023a2:	4b89      	ldr	r3, [pc, #548]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 80023a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a6:	2202      	movs	r2, #2
 80023a8:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80023ac:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80023b0:	fa92 f2a2 	rbit	r2, r2
 80023b4:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 80023b8:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80023bc:	fab2 f282 	clz	r2, r2
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	f042 0220 	orr.w	r2, r2, #32
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	f002 021f 	and.w	r2, r2, #31
 80023cc:	2101      	movs	r1, #1
 80023ce:	fa01 f202 	lsl.w	r2, r1, r2
 80023d2:	4013      	ands	r3, r2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00a      	beq.n	80023ee <HAL_RCC_OscConfig+0x3f6>
 80023d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d002      	beq.n	80023ee <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80023e8:	2301      	movs	r3, #1
 80023ea:	f000 be52 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b76      	ldr	r3, [pc, #472]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80023f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	21f8      	movs	r1, #248	@ 0xf8
 8002404:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002408:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800240c:	fa91 f1a1 	rbit	r1, r1
 8002410:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8002414:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002418:	fab1 f181 	clz	r1, r1
 800241c:	b2c9      	uxtb	r1, r1
 800241e:	408b      	lsls	r3, r1
 8002420:	4969      	ldr	r1, [pc, #420]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e0fe      	b.n	8002626 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 8088 	beq.w	800254a <HAL_RCC_OscConfig+0x552>
 800243a:	2301      	movs	r3, #1
 800243c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002440:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002444:	fa93 f3a3 	rbit	r3, r3
 8002448:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800244c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002450:	fab3 f383 	clz	r3, r3
 8002454:	b2db      	uxtb	r3, r3
 8002456:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800245a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	461a      	mov	r2, r3
 8002462:	2301      	movs	r3, #1
 8002464:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002466:	f7fe fd87 	bl	8000f78 <HAL_GetTick>
 800246a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	e00a      	b.n	8002486 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002470:	f7fe fd82 	bl	8000f78 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d902      	bls.n	8002486 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	f000 be06 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 8002486:	2302      	movs	r3, #2
 8002488:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002498:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800249c:	fab3 f383 	clz	r3, r3
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	095b      	lsrs	r3, r3, #5
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d102      	bne.n	80024b6 <HAL_RCC_OscConfig+0x4be>
 80024b0:	4b45      	ldr	r3, [pc, #276]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	e013      	b.n	80024de <HAL_RCC_OscConfig+0x4e6>
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024bc:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80024c0:	fa93 f3a3 	rbit	r3, r3
 80024c4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 80024c8:	2302      	movs	r3, #2
 80024ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80024ce:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80024d2:	fa93 f3a3 	rbit	r3, r3
 80024d6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80024da:	4b3b      	ldr	r3, [pc, #236]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 80024dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024de:	2202      	movs	r2, #2
 80024e0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80024e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80024e8:	fa92 f2a2 	rbit	r2, r2
 80024ec:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80024f0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80024f4:	fab2 f282 	clz	r2, r2
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	f042 0220 	orr.w	r2, r2, #32
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	f002 021f 	and.w	r2, r2, #31
 8002504:	2101      	movs	r1, #1
 8002506:	fa01 f202 	lsl.w	r2, r1, r2
 800250a:	4013      	ands	r3, r2
 800250c:	2b00      	cmp	r3, #0
 800250e:	d0af      	beq.n	8002470 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002510:	4b2d      	ldr	r3, [pc, #180]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002518:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	21f8      	movs	r1, #248	@ 0xf8
 8002526:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800252e:	fa91 f1a1 	rbit	r1, r1
 8002532:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002536:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800253a:	fab1 f181 	clz	r1, r1
 800253e:	b2c9      	uxtb	r1, r1
 8002540:	408b      	lsls	r3, r1
 8002542:	4921      	ldr	r1, [pc, #132]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	600b      	str	r3, [r1, #0]
 8002548:	e06d      	b.n	8002626 <HAL_RCC_OscConfig+0x62e>
 800254a:	2301      	movs	r3, #1
 800254c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002550:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002554:	fa93 f3a3 	rbit	r3, r3
 8002558:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800255c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002560:	fab3 f383 	clz	r3, r3
 8002564:	b2db      	uxtb	r3, r3
 8002566:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800256a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	461a      	mov	r2, r3
 8002572:	2300      	movs	r3, #0
 8002574:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002576:	f7fe fcff 	bl	8000f78 <HAL_GetTick>
 800257a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002580:	f7fe fcfa 	bl	8000f78 <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b02      	cmp	r3, #2
 800258e:	d902      	bls.n	8002596 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	f000 bd7e 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 80025a8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ac:	fab3 f383 	clz	r3, r3
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCC_OscConfig+0x5d4>
 80025c0:	4b01      	ldr	r3, [pc, #4]	@ (80025c8 <HAL_RCC_OscConfig+0x5d0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	e016      	b.n	80025f4 <HAL_RCC_OscConfig+0x5fc>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
 80025cc:	2302      	movs	r3, #2
 80025ce:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80025de:	2302      	movs	r3, #2
 80025e0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80025e4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025e8:	fa93 f3a3 	rbit	r3, r3
 80025ec:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80025f0:	4bbf      	ldr	r3, [pc, #764]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 80025f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025f4:	2202      	movs	r2, #2
 80025f6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80025fa:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80025fe:	fa92 f2a2 	rbit	r2, r2
 8002602:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8002606:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800260a:	fab2 f282 	clz	r2, r2
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	f042 0220 	orr.w	r2, r2, #32
 8002614:	b2d2      	uxtb	r2, r2
 8002616:	f002 021f 	and.w	r2, r2, #31
 800261a:	2101      	movs	r1, #1
 800261c:	fa01 f202 	lsl.w	r2, r1, r2
 8002620:	4013      	ands	r3, r2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d1ac      	bne.n	8002580 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002626:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800262a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0308 	and.w	r3, r3, #8
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 8113 	beq.w	8002862 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002640:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695b      	ldr	r3, [r3, #20]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d07c      	beq.n	8002746 <HAL_RCC_OscConfig+0x74e>
 800264c:	2301      	movs	r3, #1
 800264e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002656:	fa93 f3a3 	rbit	r3, r3
 800265a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800265e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	461a      	mov	r2, r3
 800266a:	4ba2      	ldr	r3, [pc, #648]	@ (80028f4 <HAL_RCC_OscConfig+0x8fc>)
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	461a      	mov	r2, r3
 8002672:	2301      	movs	r3, #1
 8002674:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002676:	f7fe fc7f 	bl	8000f78 <HAL_GetTick>
 800267a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800267e:	e00a      	b.n	8002696 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002680:	f7fe fc7a 	bl	8000f78 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	2b02      	cmp	r3, #2
 800268e:	d902      	bls.n	8002696 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002690:	2303      	movs	r3, #3
 8002692:	f000 bcfe 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80026a0:	fa93 f2a3 	rbit	r2, r3
 80026a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026a8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026b2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026b6:	2202      	movs	r2, #2
 80026b8:	601a      	str	r2, [r3, #0]
 80026ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026be:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	fa93 f2a3 	rbit	r2, r3
 80026c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026d6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026da:	2202      	movs	r2, #2
 80026dc:	601a      	str	r2, [r3, #0]
 80026de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026e2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026f0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80026f4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b7e      	ldr	r3, [pc, #504]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 80026f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80026fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fe:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002702:	2102      	movs	r1, #2
 8002704:	6019      	str	r1, [r3, #0]
 8002706:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800270a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	fa93 f1a3 	rbit	r1, r3
 8002714:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002718:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800271c:	6019      	str	r1, [r3, #0]
  return result;
 800271e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002722:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fab3 f383 	clz	r3, r3
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f003 031f 	and.w	r3, r3, #31
 8002738:	2101      	movs	r1, #1
 800273a:	fa01 f303 	lsl.w	r3, r1, r3
 800273e:	4013      	ands	r3, r2
 8002740:	2b00      	cmp	r3, #0
 8002742:	d09d      	beq.n	8002680 <HAL_RCC_OscConfig+0x688>
 8002744:	e08d      	b.n	8002862 <HAL_RCC_OscConfig+0x86a>
 8002746:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800274a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800274e:	2201      	movs	r2, #1
 8002750:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002752:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002756:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	fa93 f2a3 	rbit	r2, r3
 8002760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002764:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002768:	601a      	str	r2, [r3, #0]
  return result;
 800276a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800276e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002772:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	461a      	mov	r2, r3
 800277c:	4b5d      	ldr	r3, [pc, #372]	@ (80028f4 <HAL_RCC_OscConfig+0x8fc>)
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	461a      	mov	r2, r3
 8002784:	2300      	movs	r3, #0
 8002786:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002788:	f7fe fbf6 	bl	8000f78 <HAL_GetTick>
 800278c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002792:	f7fe fbf1 	bl	8000f78 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d902      	bls.n	80027a8 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	f000 bc75 	b.w	8003092 <HAL_RCC_OscConfig+0x109a>
 80027a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027b0:	2202      	movs	r2, #2
 80027b2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b8:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	fa93 f2a3 	rbit	r2, r3
 80027c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027c6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027d4:	2202      	movs	r2, #2
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027dc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	fa93 f2a3 	rbit	r2, r3
 80027e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ea:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027f4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80027f8:	2202      	movs	r2, #2
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002800:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	fa93 f2a3 	rbit	r2, r3
 800280a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800280e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8002812:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002814:	4b36      	ldr	r3, [pc, #216]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 8002816:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800281c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8002820:	2102      	movs	r1, #2
 8002822:	6019      	str	r1, [r3, #0]
 8002824:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002828:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f1a3 	rbit	r1, r3
 8002832:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002836:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800283a:	6019      	str	r1, [r3, #0]
  return result;
 800283c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002840:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	fab3 f383 	clz	r3, r3
 800284a:	b2db      	uxtb	r3, r3
 800284c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	2101      	movs	r1, #1
 8002858:	fa01 f303 	lsl.w	r3, r1, r3
 800285c:	4013      	ands	r3, r2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d197      	bne.n	8002792 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002862:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002866:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0304 	and.w	r3, r3, #4
 8002872:	2b00      	cmp	r3, #0
 8002874:	f000 81a5 	beq.w	8002bc2 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002878:	2300      	movs	r3, #0
 800287a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800287e:	4b1c      	ldr	r3, [pc, #112]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d116      	bne.n	80028b8 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800288a:	4b19      	ldr	r3, [pc, #100]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 8002890:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002894:	61d3      	str	r3, [r2, #28]
 8002896:	4b16      	ldr	r3, [pc, #88]	@ (80028f0 <HAL_RCC_OscConfig+0x8f8>)
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800289e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028ac:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80028b0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b0f      	ldr	r3, [pc, #60]	@ (80028f8 <HAL_RCC_OscConfig+0x900>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d121      	bne.n	8002908 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c4:	4b0c      	ldr	r3, [pc, #48]	@ (80028f8 <HAL_RCC_OscConfig+0x900>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a0b      	ldr	r2, [pc, #44]	@ (80028f8 <HAL_RCC_OscConfig+0x900>)
 80028ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ce:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d0:	f7fe fb52 	bl	8000f78 <HAL_GetTick>
 80028d4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	e010      	b.n	80028fc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7fe fb4d 	bl	8000f78 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80028e4:	1ad3      	subs	r3, r2, r3
 80028e6:	2b64      	cmp	r3, #100	@ 0x64
 80028e8:	d908      	bls.n	80028fc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e3d1      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 80028ee:	bf00      	nop
 80028f0:	40021000 	.word	0x40021000
 80028f4:	10908120 	.word	0x10908120
 80028f8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028fc:	4b8d      	ldr	r3, [pc, #564]	@ (8002b34 <HAL_RCC_OscConfig+0xb3c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0e8      	beq.n	80028da <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800290c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	2b01      	cmp	r3, #1
 8002916:	d106      	bne.n	8002926 <HAL_RCC_OscConfig+0x92e>
 8002918:	4b87      	ldr	r3, [pc, #540]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a86      	ldr	r2, [pc, #536]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e035      	b.n	8002992 <HAL_RCC_OscConfig+0x99a>
 8002926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10c      	bne.n	8002950 <HAL_RCC_OscConfig+0x958>
 8002936:	4b80      	ldr	r3, [pc, #512]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	4a7f      	ldr	r2, [pc, #508]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6213      	str	r3, [r2, #32]
 8002942:	4b7d      	ldr	r3, [pc, #500]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002944:	6a1b      	ldr	r3, [r3, #32]
 8002946:	4a7c      	ldr	r2, [pc, #496]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002948:	f023 0304 	bic.w	r3, r3, #4
 800294c:	6213      	str	r3, [r2, #32]
 800294e:	e020      	b.n	8002992 <HAL_RCC_OscConfig+0x99a>
 8002950:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002954:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b05      	cmp	r3, #5
 800295e:	d10c      	bne.n	800297a <HAL_RCC_OscConfig+0x982>
 8002960:	4b75      	ldr	r3, [pc, #468]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	4a74      	ldr	r2, [pc, #464]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002966:	f043 0304 	orr.w	r3, r3, #4
 800296a:	6213      	str	r3, [r2, #32]
 800296c:	4b72      	ldr	r3, [pc, #456]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	4a71      	ldr	r2, [pc, #452]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	6213      	str	r3, [r2, #32]
 8002978:	e00b      	b.n	8002992 <HAL_RCC_OscConfig+0x99a>
 800297a:	4b6f      	ldr	r3, [pc, #444]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002980:	f023 0301 	bic.w	r3, r3, #1
 8002984:	6213      	str	r3, [r2, #32]
 8002986:	4b6c      	ldr	r3, [pc, #432]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002988:	6a1b      	ldr	r3, [r3, #32]
 800298a:	4a6b      	ldr	r2, [pc, #428]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 800298c:	f023 0304 	bic.w	r3, r3, #4
 8002990:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8081 	beq.w	8002aa6 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a4:	f7fe fae8 	bl	8000f78 <HAL_GetTick>
 80029a8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ac:	e00b      	b.n	80029c6 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ae:	f7fe fae3 	bl	8000f78 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e365      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 80029c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ca:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029ce:	2202      	movs	r2, #2
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029f2:	2202      	movs	r2, #2
 80029f4:	601a      	str	r2, [r3, #0]
 80029f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029fa:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	fa93 f2a3 	rbit	r2, r3
 8002a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a08:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a0c:	601a      	str	r2, [r3, #0]
  return result;
 8002a0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a12:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8002a16:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	f043 0302 	orr.w	r3, r3, #2
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	d102      	bne.n	8002a32 <HAL_RCC_OscConfig+0xa3a>
 8002a2c:	4b42      	ldr	r3, [pc, #264]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	e013      	b.n	8002a5a <HAL_RCC_OscConfig+0xa62>
 8002a32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a36:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a42:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a50:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002a54:	601a      	str	r2, [r3, #0]
 8002a56:	4b38      	ldr	r3, [pc, #224]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a5a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a5e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a62:	2102      	movs	r1, #2
 8002a64:	6011      	str	r1, [r2, #0]
 8002a66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a6a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	fa92 f1a2 	rbit	r1, r2
 8002a74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a78:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a7c:	6011      	str	r1, [r2, #0]
  return result;
 8002a7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002a82:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	fab2 f282 	clz	r2, r2
 8002a8c:	b2d2      	uxtb	r2, r2
 8002a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	f002 021f 	and.w	r2, r2, #31
 8002a98:	2101      	movs	r1, #1
 8002a9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d084      	beq.n	80029ae <HAL_RCC_OscConfig+0x9b6>
 8002aa4:	e083      	b.n	8002bae <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fa67 	bl	8000f78 <HAL_GetTick>
 8002aaa:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002aae:	e00b      	b.n	8002ac8 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fe fa62 	bl	8000f78 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e2e4      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 8002ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002acc:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002ad0:	2202      	movs	r2, #2
 8002ad2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ad8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	fa93 f2a3 	rbit	r2, r3
 8002ae2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ae6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002af0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002af4:	2202      	movs	r2, #2
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002afc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	fa93 f2a3 	rbit	r2, r3
 8002b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b0a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b0e:	601a      	str	r2, [r3, #0]
  return result;
 8002b10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b14:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002b18:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b1a:	fab3 f383 	clz	r3, r3
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	b2db      	uxtb	r3, r3
 8002b24:	f043 0302 	orr.w	r3, r3, #2
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b02      	cmp	r3, #2
 8002b2c:	d106      	bne.n	8002b3c <HAL_RCC_OscConfig+0xb44>
 8002b2e:	4b02      	ldr	r3, [pc, #8]	@ (8002b38 <HAL_RCC_OscConfig+0xb40>)
 8002b30:	6a1b      	ldr	r3, [r3, #32]
 8002b32:	e017      	b.n	8002b64 <HAL_RCC_OscConfig+0xb6c>
 8002b34:	40007000 	.word	0x40007000
 8002b38:	40021000 	.word	0x40021000
 8002b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b40:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b44:	2202      	movs	r2, #2
 8002b46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b4c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	fa93 f2a3 	rbit	r2, r3
 8002b56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b5a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8002b5e:	601a      	str	r2, [r3, #0]
 8002b60:	4bb3      	ldr	r3, [pc, #716]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b64:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b68:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	6011      	str	r1, [r2, #0]
 8002b70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b74:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002b78:	6812      	ldr	r2, [r2, #0]
 8002b7a:	fa92 f1a2 	rbit	r1, r2
 8002b7e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b82:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b86:	6011      	str	r1, [r2, #0]
  return result;
 8002b88:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002b8c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	fab2 f282 	clz	r2, r2
 8002b96:	b2d2      	uxtb	r2, r2
 8002b98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	f002 021f 	and.w	r2, r2, #31
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ba8:	4013      	ands	r3, r2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d180      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002bae:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d105      	bne.n	8002bc2 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb6:	4b9e      	ldr	r3, [pc, #632]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4a9d      	ldr	r2, [pc, #628]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002bbc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bc0:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 825e 	beq.w	8003090 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd4:	4b96      	ldr	r3, [pc, #600]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 030c 	and.w	r3, r3, #12
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	f000 821f 	beq.w	8003020 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002be6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	f040 8170 	bne.w	8002ed4 <HAL_RCC_OscConfig+0xedc>
 8002bf4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bf8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002bfc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c06:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	fa93 f2a3 	rbit	r2, r3
 8002c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c14:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c18:	601a      	str	r2, [r3, #0]
  return result;
 8002c1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c1e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002c22:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	461a      	mov	r2, r3
 8002c36:	2300      	movs	r3, #0
 8002c38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3a:	f7fe f99d 	bl	8000f78 <HAL_GetTick>
 8002c3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c42:	e009      	b.n	8002c58 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c44:	f7fe f998 	bl	8000f78 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	2b02      	cmp	r3, #2
 8002c52:	d901      	bls.n	8002c58 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e21c      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 8002c58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c5c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c6a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	fa93 f2a3 	rbit	r2, r3
 8002c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c78:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c7c:	601a      	str	r2, [r3, #0]
  return result;
 8002c7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c82:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002c86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c88:	fab3 f383 	clz	r3, r3
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d102      	bne.n	8002ca2 <HAL_RCC_OscConfig+0xcaa>
 8002c9c:	4b64      	ldr	r3, [pc, #400]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	e027      	b.n	8002cf2 <HAL_RCC_OscConfig+0xcfa>
 8002ca2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca6:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002caa:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	fa93 f2a3 	rbit	r2, r3
 8002cbe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002cc6:	601a      	str	r2, [r3, #0]
 8002cc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ccc:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cd0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cda:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	fa93 f2a3 	rbit	r2, r3
 8002ce4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ce8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	4b50      	ldr	r3, [pc, #320]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002cf6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002cfa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002cfe:	6011      	str	r1, [r2, #0]
 8002d00:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d04:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002d08:	6812      	ldr	r2, [r2, #0]
 8002d0a:	fa92 f1a2 	rbit	r1, r2
 8002d0e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d12:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d16:	6011      	str	r1, [r2, #0]
  return result;
 8002d18:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002d1c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002d20:	6812      	ldr	r2, [r2, #0]
 8002d22:	fab2 f282 	clz	r2, r2
 8002d26:	b2d2      	uxtb	r2, r2
 8002d28:	f042 0220 	orr.w	r2, r2, #32
 8002d2c:	b2d2      	uxtb	r2, r2
 8002d2e:	f002 021f 	and.w	r2, r2, #31
 8002d32:	2101      	movs	r1, #1
 8002d34:	fa01 f202 	lsl.w	r2, r1, r2
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d182      	bne.n	8002c44 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d3e:	4b3c      	ldr	r3, [pc, #240]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	4937      	ldr	r1, [pc, #220]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002d58:	4b35      	ldr	r3, [pc, #212]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a19      	ldr	r1, [r3, #32]
 8002d6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d70:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	492d      	ldr	r1, [pc, #180]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	604b      	str	r3, [r1, #4]
 8002d80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d84:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d88:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002d8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d92:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	fa93 f2a3 	rbit	r2, r3
 8002d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002da0:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002da4:	601a      	str	r2, [r3, #0]
  return result;
 8002da6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002daa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002dae:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db0:	fab3 f383 	clz	r3, r3
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002dba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7fe f8d7 	bl	8000f78 <HAL_GetTick>
 8002dca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002dce:	e009      	b.n	8002de4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002dd0:	f7fe f8d2 	bl	8000f78 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002dda:	1ad3      	subs	r3, r2, r3
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e156      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 8002de4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002de8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002df0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	fa93 f2a3 	rbit	r2, r3
 8002e00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e04:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e08:	601a      	str	r2, [r3, #0]
  return result;
 8002e0a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e0e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002e12:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0xe3c>
 8002e28:	4b01      	ldr	r3, [pc, #4]	@ (8002e30 <HAL_RCC_OscConfig+0xe38>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	e02a      	b.n	8002e84 <HAL_RCC_OscConfig+0xe8c>
 8002e2e:	bf00      	nop
 8002e30:	40021000 	.word	0x40021000
 8002e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e38:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e3c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e46:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	fa93 f2a3 	rbit	r2, r3
 8002e50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e54:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002e58:	601a      	str	r2, [r3, #0]
 8002e5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e5e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	fa93 f2a3 	rbit	r2, r3
 8002e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e7a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002e7e:	601a      	str	r2, [r3, #0]
 8002e80:	4b86      	ldr	r3, [pc, #536]	@ (800309c <HAL_RCC_OscConfig+0x10a4>)
 8002e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e84:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e88:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e8c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002e90:	6011      	str	r1, [r2, #0]
 8002e92:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002e96:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	fa92 f1a2 	rbit	r1, r2
 8002ea0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ea4:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002ea8:	6011      	str	r1, [r2, #0]
  return result;
 8002eaa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002eae:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	fab2 f282 	clz	r2, r2
 8002eb8:	b2d2      	uxtb	r2, r2
 8002eba:	f042 0220 	orr.w	r2, r2, #32
 8002ebe:	b2d2      	uxtb	r2, r2
 8002ec0:	f002 021f 	and.w	r2, r2, #31
 8002ec4:	2101      	movs	r1, #1
 8002ec6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eca:	4013      	ands	r3, r2
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f43f af7f 	beq.w	8002dd0 <HAL_RCC_OscConfig+0xdd8>
 8002ed2:	e0dd      	b.n	8003090 <HAL_RCC_OscConfig+0x1098>
 8002ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ed8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002edc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002ee0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ee6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	fa93 f2a3 	rbit	r2, r3
 8002ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ef4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002ef8:	601a      	str	r2, [r3, #0]
  return result;
 8002efa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002efe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002f02:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002f0e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	461a      	mov	r2, r3
 8002f16:	2300      	movs	r3, #0
 8002f18:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1a:	f7fe f82d 	bl	8000f78 <HAL_GetTick>
 8002f1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f22:	e009      	b.n	8002f38 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f24:	f7fe f828 	bl	8000f78 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e0ac      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
 8002f38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f3c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f40:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f4a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	fa93 f2a3 	rbit	r2, r3
 8002f54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f58:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f5c:	601a      	str	r2, [r3, #0]
  return result;
 8002f5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f62:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002f66:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f68:	fab3 f383 	clz	r3, r3
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d102      	bne.n	8002f82 <HAL_RCC_OscConfig+0xf8a>
 8002f7c:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_OscConfig+0x10a4>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	e027      	b.n	8002fd2 <HAL_RCC_OscConfig+0xfda>
 8002f82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f86:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002f8e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002f94:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	fa93 f2a3 	rbit	r2, r3
 8002f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fa2:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fac:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002fb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fba:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	fa93 f2a3 	rbit	r2, r3
 8002fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc8:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002fcc:	601a      	str	r2, [r3, #0]
 8002fce:	4b33      	ldr	r3, [pc, #204]	@ (800309c <HAL_RCC_OscConfig+0x10a4>)
 8002fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fd6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fda:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002fde:	6011      	str	r1, [r2, #0]
 8002fe0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002fe4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	fa92 f1a2 	rbit	r1, r2
 8002fee:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ff2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002ff6:	6011      	str	r1, [r2, #0]
  return result;
 8002ff8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ffc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003000:	6812      	ldr	r2, [r2, #0]
 8003002:	fab2 f282 	clz	r2, r2
 8003006:	b2d2      	uxtb	r2, r2
 8003008:	f042 0220 	orr.w	r2, r2, #32
 800300c:	b2d2      	uxtb	r2, r2
 800300e:	f002 021f 	and.w	r2, r2, #31
 8003012:	2101      	movs	r1, #1
 8003014:	fa01 f202 	lsl.w	r2, r1, r2
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d182      	bne.n	8002f24 <HAL_RCC_OscConfig+0xf2c>
 800301e:	e037      	b.n	8003090 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003020:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003024:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	699b      	ldr	r3, [r3, #24]
 800302c:	2b01      	cmp	r3, #1
 800302e:	d101      	bne.n	8003034 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e02e      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003034:	4b19      	ldr	r3, [pc, #100]	@ (800309c <HAL_RCC_OscConfig+0x10a4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800303c:	4b17      	ldr	r3, [pc, #92]	@ (800309c <HAL_RCC_OscConfig+0x10a4>)
 800303e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003040:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003044:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003048:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 800304c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003050:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69db      	ldr	r3, [r3, #28]
 8003058:	429a      	cmp	r2, r3
 800305a:	d117      	bne.n	800308c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800305c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8003060:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003068:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003070:	429a      	cmp	r2, r3
 8003072:	d10b      	bne.n	800308c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003074:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003078:	f003 020f 	and.w	r2, r3, #15
 800307c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003080:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	40021000 	.word	0x40021000

080030a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b09e      	sub	sp, #120	@ 0x78
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030aa:	2300      	movs	r3, #0
 80030ac:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d101      	bne.n	80030b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e162      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030b8:	4b90      	ldr	r3, [pc, #576]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0307 	and.w	r3, r3, #7
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d910      	bls.n	80030e8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030c6:	4b8d      	ldr	r3, [pc, #564]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	498b      	ldr	r1, [pc, #556]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030d6:	4b89      	ldr	r3, [pc, #548]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d001      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e14a      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d008      	beq.n	8003106 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f4:	4b82      	ldr	r3, [pc, #520]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	497f      	ldr	r1, [pc, #508]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003102:	4313      	orrs	r3, r2
 8003104:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 80dc 	beq.w	80032cc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d13c      	bne.n	8003196 <HAL_RCC_ClockConfig+0xf6>
 800311c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003120:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003122:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003124:	fa93 f3a3 	rbit	r3, r3
 8003128:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800312a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	095b      	lsrs	r3, r3, #5
 8003134:	b2db      	uxtb	r3, r3
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	b2db      	uxtb	r3, r3
 800313c:	2b01      	cmp	r3, #1
 800313e:	d102      	bne.n	8003146 <HAL_RCC_ClockConfig+0xa6>
 8003140:	4b6f      	ldr	r3, [pc, #444]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	e00f      	b.n	8003166 <HAL_RCC_ClockConfig+0xc6>
 8003146:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800314a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800314e:	fa93 f3a3 	rbit	r3, r3
 8003152:	667b      	str	r3, [r7, #100]	@ 0x64
 8003154:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003158:	663b      	str	r3, [r7, #96]	@ 0x60
 800315a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800315c:	fa93 f3a3 	rbit	r3, r3
 8003160:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003162:	4b67      	ldr	r3, [pc, #412]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003166:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800316a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800316c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800316e:	fa92 f2a2 	rbit	r2, r2
 8003172:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003174:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003176:	fab2 f282 	clz	r2, r2
 800317a:	b2d2      	uxtb	r2, r2
 800317c:	f042 0220 	orr.w	r2, r2, #32
 8003180:	b2d2      	uxtb	r2, r2
 8003182:	f002 021f 	and.w	r2, r2, #31
 8003186:	2101      	movs	r1, #1
 8003188:	fa01 f202 	lsl.w	r2, r1, r2
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d17b      	bne.n	800328a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e0f3      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	2b02      	cmp	r3, #2
 800319c:	d13c      	bne.n	8003218 <HAL_RCC_ClockConfig+0x178>
 800319e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031a6:	fa93 f3a3 	rbit	r3, r3
 80031aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80031ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ae:	fab3 f383 	clz	r3, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	095b      	lsrs	r3, r3, #5
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f043 0301 	orr.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d102      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x128>
 80031c2:	4b4f      	ldr	r3, [pc, #316]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	e00f      	b.n	80031e8 <HAL_RCC_ClockConfig+0x148>
 80031c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031d0:	fa93 f3a3 	rbit	r3, r3
 80031d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80031d6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031da:	643b      	str	r3, [r7, #64]	@ 0x40
 80031dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031de:	fa93 f3a3 	rbit	r3, r3
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e4:	4b46      	ldr	r3, [pc, #280]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80031e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80031ec:	63ba      	str	r2, [r7, #56]	@ 0x38
 80031ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80031f0:	fa92 f2a2 	rbit	r2, r2
 80031f4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80031f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80031f8:	fab2 f282 	clz	r2, r2
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f042 0220 	orr.w	r2, r2, #32
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	f002 021f 	and.w	r2, r2, #31
 8003208:	2101      	movs	r1, #1
 800320a:	fa01 f202 	lsl.w	r2, r1, r2
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d13a      	bne.n	800328a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e0b2      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
 8003218:	2302      	movs	r3, #2
 800321a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800321c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800321e:	fa93 f3a3 	rbit	r3, r3
 8003222:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003226:	fab3 f383 	clz	r3, r3
 800322a:	b2db      	uxtb	r3, r3
 800322c:	095b      	lsrs	r3, r3, #5
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f043 0301 	orr.w	r3, r3, #1
 8003234:	b2db      	uxtb	r3, r3
 8003236:	2b01      	cmp	r3, #1
 8003238:	d102      	bne.n	8003240 <HAL_RCC_ClockConfig+0x1a0>
 800323a:	4b31      	ldr	r3, [pc, #196]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	e00d      	b.n	800325c <HAL_RCC_ClockConfig+0x1bc>
 8003240:	2302      	movs	r3, #2
 8003242:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	fa93 f3a3 	rbit	r3, r3
 800324a:	627b      	str	r3, [r7, #36]	@ 0x24
 800324c:	2302      	movs	r3, #2
 800324e:	623b      	str	r3, [r7, #32]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	61fb      	str	r3, [r7, #28]
 8003258:	4b29      	ldr	r3, [pc, #164]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 800325a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800325c:	2202      	movs	r2, #2
 800325e:	61ba      	str	r2, [r7, #24]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	fa92 f2a2 	rbit	r2, r2
 8003266:	617a      	str	r2, [r7, #20]
  return result;
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	fab2 f282 	clz	r2, r2
 800326e:	b2d2      	uxtb	r2, r2
 8003270:	f042 0220 	orr.w	r2, r2, #32
 8003274:	b2d2      	uxtb	r2, r2
 8003276:	f002 021f 	and.w	r2, r2, #31
 800327a:	2101      	movs	r1, #1
 800327c:	fa01 f202 	lsl.w	r2, r1, r2
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d101      	bne.n	800328a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e079      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328a:	4b1d      	ldr	r3, [pc, #116]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f023 0203 	bic.w	r2, r3, #3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	491a      	ldr	r1, [pc, #104]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 8003298:	4313      	orrs	r3, r2
 800329a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800329c:	f7fd fe6c 	bl	8000f78 <HAL_GetTick>
 80032a0:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a2:	e00a      	b.n	80032ba <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a4:	f7fd fe68 	bl	8000f78 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e061      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ba:	4b11      	ldr	r3, [pc, #68]	@ (8003300 <HAL_RCC_ClockConfig+0x260>)
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 020c 	and.w	r2, r3, #12
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d1eb      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032cc:	4b0b      	ldr	r3, [pc, #44]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d214      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032da:	4b08      	ldr	r3, [pc, #32]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f023 0207 	bic.w	r2, r3, #7
 80032e2:	4906      	ldr	r1, [pc, #24]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b04      	ldr	r3, [pc, #16]	@ (80032fc <HAL_RCC_ClockConfig+0x25c>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d005      	beq.n	8003304 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e040      	b.n	800337e <HAL_RCC_ClockConfig+0x2de>
 80032fc:	40022000 	.word	0x40022000
 8003300:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b1d      	ldr	r3, [pc, #116]	@ (8003388 <HAL_RCC_ClockConfig+0x2e8>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	491a      	ldr	r1, [pc, #104]	@ (8003388 <HAL_RCC_ClockConfig+0x2e8>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800332e:	4b16      	ldr	r3, [pc, #88]	@ (8003388 <HAL_RCC_ClockConfig+0x2e8>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	4912      	ldr	r1, [pc, #72]	@ (8003388 <HAL_RCC_ClockConfig+0x2e8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003342:	f000 f895 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8003346:	4601      	mov	r1, r0
 8003348:	4b0f      	ldr	r3, [pc, #60]	@ (8003388 <HAL_RCC_ClockConfig+0x2e8>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003350:	22f0      	movs	r2, #240	@ 0xf0
 8003352:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	fa92 f2a2 	rbit	r2, r2
 800335a:	60fa      	str	r2, [r7, #12]
  return result;
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	fab2 f282 	clz	r2, r2
 8003362:	b2d2      	uxtb	r2, r2
 8003364:	40d3      	lsrs	r3, r2
 8003366:	4a09      	ldr	r2, [pc, #36]	@ (800338c <HAL_RCC_ClockConfig+0x2ec>)
 8003368:	5cd3      	ldrb	r3, [r2, r3]
 800336a:	fa21 f303 	lsr.w	r3, r1, r3
 800336e:	4a08      	ldr	r2, [pc, #32]	@ (8003390 <HAL_RCC_ClockConfig+0x2f0>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003372:	4b08      	ldr	r3, [pc, #32]	@ (8003394 <HAL_RCC_ClockConfig+0x2f4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd fdba 	bl	8000ef0 <HAL_InitTick>
  
  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3778      	adds	r7, #120	@ 0x78
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40021000 	.word	0x40021000
 800338c:	08005a24 	.word	0x08005a24
 8003390:	20000004 	.word	0x20000004
 8003394:	20000008 	.word	0x20000008

08003398 <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	@ 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	61bb      	str	r3, [r7, #24]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 80033a8:	2303      	movs	r3, #3
 80033aa:	623b      	str	r3, [r7, #32]
  gpio.Pull      = GPIO_NOPULL;
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
  gpio.Pin       = MCO1_PIN;
 80033b0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80033b4:	617b      	str	r3, [r7, #20]
  gpio.Alternate = GPIO_AF0_MCO;
 80033b6:	2300      	movs	r3, #0
 80033b8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <HAL_RCC_MCOConfig+0x64>)
 80033bc:	695b      	ldr	r3, [r3, #20]
 80033be:	4a0f      	ldr	r2, [pc, #60]	@ (80033fc <HAL_RCC_MCOConfig+0x64>)
 80033c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033c4:	6153      	str	r3, [r2, #20]
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <HAL_RCC_MCOConfig+0x64>)
 80033c8:	695b      	ldr	r3, [r3, #20]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 80033d2:	f107 0314 	add.w	r3, r7, #20
 80033d6:	4619      	mov	r1, r3
 80033d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80033dc:	f7fe fa5c 	bl	8001898 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 80033e0:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <HAL_RCC_MCOConfig+0x64>)
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f023 42ee 	bic.w	r2, r3, #1996488704	@ 0x77000000
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	430b      	orrs	r3, r1
 80033ee:	4903      	ldr	r1, [pc, #12]	@ (80033fc <HAL_RCC_MCOConfig+0x64>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]
}
 80033f4:	bf00      	nop
 80033f6:	3728      	adds	r7, #40	@ 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000

08003400 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800340a:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	fa93 f3a3 	rbit	r3, r3
 8003412:	603b      	str	r3, [r7, #0]
  return result;
 8003414:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003416:	fab3 f383 	clz	r3, r3
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003420:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	461a      	mov	r2, r3
 8003428:	2301      	movs	r3, #1
 800342a:	6013      	str	r3, [r2, #0]
}
 800342c:	bf00      	nop
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8003438:	b480      	push	{r7}
 800343a:	b083      	sub	sp, #12
 800343c:	af00      	add	r7, sp, #0
 800343e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8003442:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	fa93 f3a3 	rbit	r3, r3
 800344a:	603b      	str	r3, [r7, #0]
  return result;
 800344c:	683b      	ldr	r3, [r7, #0]
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
 800344e:	fab3 f383 	clz	r3, r3
 8003452:	b2db      	uxtb	r3, r3
 8003454:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003458:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	461a      	mov	r2, r3
 8003460:	2300      	movs	r3, #0
 8003462:	6013      	str	r3, [r2, #0]
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]
 800347e:	2300      	movs	r3, #0
 8003480:	617b      	str	r3, [r7, #20]
 8003482:	2300      	movs	r3, #0
 8003484:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800348a:	4b1f      	ldr	r3, [pc, #124]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x98>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b04      	cmp	r3, #4
 8003498:	d002      	beq.n	80034a0 <HAL_RCC_GetSysClockFreq+0x30>
 800349a:	2b08      	cmp	r3, #8
 800349c:	d003      	beq.n	80034a6 <HAL_RCC_GetSysClockFreq+0x36>
 800349e:	e029      	b.n	80034f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034a0:	4b1a      	ldr	r3, [pc, #104]	@ (800350c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034a2:	613b      	str	r3, [r7, #16]
      break;
 80034a4:	e029      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	0c9b      	lsrs	r3, r3, #18
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	4a18      	ldr	r2, [pc, #96]	@ (8003510 <HAL_RCC_GetSysClockFreq+0xa0>)
 80034b0:	5cd3      	ldrb	r3, [r2, r3]
 80034b2:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80034b4:	4b14      	ldr	r3, [pc, #80]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x98>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b8:	f003 030f 	and.w	r3, r3, #15
 80034bc:	4a15      	ldr	r2, [pc, #84]	@ (8003514 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034be:	5cd3      	ldrb	r3, [r2, r3]
 80034c0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d008      	beq.n	80034de <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034cc:	4a0f      	ldr	r2, [pc, #60]	@ (800350c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	fb02 f303 	mul.w	r3, r2, r3
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e007      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80034de:	4a0b      	ldr	r2, [pc, #44]	@ (800350c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fb02 f303 	mul.w	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	613b      	str	r3, [r7, #16]
      break;
 80034f2:	e002      	b.n	80034fa <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <HAL_RCC_GetSysClockFreq+0x9c>)
 80034f6:	613b      	str	r3, [r7, #16]
      break;
 80034f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034fa:	693b      	ldr	r3, [r7, #16]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr
 8003508:	40021000 	.word	0x40021000
 800350c:	007a1200 	.word	0x007a1200
 8003510:	08005a3c 	.word	0x08005a3c
 8003514:	08005a4c 	.word	0x08005a4c

08003518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003518:	b480      	push	{r7}
 800351a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800351c:	4b03      	ldr	r3, [pc, #12]	@ (800352c <HAL_RCC_GetHCLKFreq+0x14>)
 800351e:	681b      	ldr	r3, [r3, #0]
}
 8003520:	4618      	mov	r0, r3
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000004 	.word	0x20000004

08003530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003536:	f7ff ffef 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 800353a:	4601      	mov	r1, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003544:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003548:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	fa92 f2a2 	rbit	r2, r2
 8003550:	603a      	str	r2, [r7, #0]
  return result;
 8003552:	683a      	ldr	r2, [r7, #0]
 8003554:	fab2 f282 	clz	r2, r2
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	40d3      	lsrs	r3, r2
 800355c:	4a04      	ldr	r2, [pc, #16]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x40>)
 800355e:	5cd3      	ldrb	r3, [r2, r3]
 8003560:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	40021000 	.word	0x40021000
 8003570:	08005a34 	.word	0x08005a34

08003574 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800357a:	f7ff ffcd 	bl	8003518 <HAL_RCC_GetHCLKFreq>
 800357e:	4601      	mov	r1, r0
 8003580:	4b0b      	ldr	r3, [pc, #44]	@ (80035b0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003588:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800358c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	fa92 f2a2 	rbit	r2, r2
 8003594:	603a      	str	r2, [r7, #0]
  return result;
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	fab2 f282 	clz	r2, r2
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	40d3      	lsrs	r3, r2
 80035a0:	4a04      	ldr	r2, [pc, #16]	@ (80035b4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80035a2:	5cd3      	ldrb	r3, [r2, r3]
 80035a4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	08005a34 	.word	0x08005a34

080035b8 <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b083      	sub	sp, #12
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	220f      	movs	r2, #15
 80035c4:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 80035c6:	4b3c      	ldr	r3, [pc, #240]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035d2:	d104      	bne.n	80035de <HAL_RCC_GetOscConfig+0x26>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f44f 22a0 	mov.w	r2, #327680	@ 0x50000
 80035da:	605a      	str	r2, [r3, #4]
 80035dc:	e00e      	b.n	80035fc <HAL_RCC_GetOscConfig+0x44>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 80035de:	4b36      	ldr	r3, [pc, #216]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035ea:	d104      	bne.n	80035f6 <HAL_RCC_GetOscConfig+0x3e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	e002      	b.n	80035fc <HAL_RCC_GetOscConfig+0x44>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	605a      	str	r2, [r3, #4]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
  RCC_OscInitStruct->HSEPredivValue = __HAL_RCC_HSE_GET_PREDIV();
#endif

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 80035fc:	4b2e      	ldr	r3, [pc, #184]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b01      	cmp	r3, #1
 8003606:	d103      	bne.n	8003610 <HAL_RCC_GetOscConfig+0x58>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	60da      	str	r2, [r3, #12]
 800360e:	e002      	b.n	8003616 <HAL_RCC_GetOscConfig+0x5e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR & RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
 8003616:	4b28      	ldr	r3, [pc, #160]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	08db      	lsrs	r3, r3, #3
 800361c:	f003 021f 	and.w	r2, r3, #31
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8003624:	4b24      	ldr	r3, [pc, #144]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	f003 0304 	and.w	r3, r3, #4
 800362c:	2b04      	cmp	r3, #4
 800362e:	d103      	bne.n	8003638 <HAL_RCC_GetOscConfig+0x80>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2205      	movs	r2, #5
 8003634:	609a      	str	r2, [r3, #8]
 8003636:	e00c      	b.n	8003652 <HAL_RCC_GetOscConfig+0x9a>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8003638:	4b1f      	ldr	r3, [pc, #124]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b01      	cmp	r3, #1
 8003642:	d103      	bne.n	800364c <HAL_RCC_GetOscConfig+0x94>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetOscConfig+0x9a>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8003652:	4b19      	ldr	r3, [pc, #100]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 8003654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b01      	cmp	r3, #1
 800365c:	d103      	bne.n	8003666 <HAL_RCC_GetOscConfig+0xae>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	615a      	str	r2, [r3, #20]
 8003664:	e002      	b.n	800366c <HAL_RCC_GetOscConfig+0xb4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
  }
  

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 800366c:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003678:	d103      	bne.n	8003682 <HAL_RCC_GetOscConfig+0xca>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	619a      	str	r2, [r3, #24]
 8003680:	e002      	b.n	8003688 <HAL_RCC_GetOscConfig+0xd0>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	619a      	str	r2, [r3, #24]
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	621a      	str	r2, [r3, #32]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
 80036a0:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <HAL_RCC_GetOscConfig+0x100>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	f003 020f 	and.w	r2, r3, #15
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	625a      	str	r2, [r3, #36]	@ 0x24
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	40021000 	.word	0x40021000

080036bc <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	220f      	movs	r2, #15
 80036ca:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036cc:	4b12      	ldr	r3, [pc, #72]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f003 0203 	and.w	r2, r3, #3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 80036d8:	4b0f      	ldr	r3, [pc, #60]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 80036e4:	4b0c      	ldr	r3, [pc, #48]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80036f0:	4b09      	ldr	r3, [pc, #36]	@ (8003718 <HAL_RCC_GetClockConfig+0x5c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	08db      	lsrs	r3, r3, #3
 80036f6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 80036fe:	4b07      	ldr	r3, [pc, #28]	@ (800371c <HAL_RCC_GetClockConfig+0x60>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0207 	and.w	r2, r3, #7
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	601a      	str	r2, [r3, #0]
}
 800370a:	bf00      	nop
 800370c:	370c      	adds	r7, #12
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	40021000 	.word	0x40021000
 800371c:	40022000 	.word	0x40022000

08003720 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800372c:	2b80      	cmp	r3, #128	@ 0x80
 800372e:	d104      	bne.n	800373a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003730:	f000 f80a 	bl	8003748 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003736:	2280      	movs	r2, #128	@ 0x80
 8003738:	701a      	strb	r2, [r3, #0]
  }
}
 800373a:	bf00      	nop
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	4002100a 	.word	0x4002100a

08003748 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 800374c:	bf00      	nop
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b092      	sub	sp, #72	@ 0x48
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003764:	2300      	movs	r3, #0
 8003766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003768:	2300      	movs	r3, #0
 800376a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003776:	2b00      	cmp	r3, #0
 8003778:	f000 80d4 	beq.w	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800377c:	4b4e      	ldr	r3, [pc, #312]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377e:	69db      	ldr	r3, [r3, #28]
 8003780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10e      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003788:	4b4b      	ldr	r3, [pc, #300]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	4a4a      	ldr	r2, [pc, #296]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003792:	61d3      	str	r3, [r2, #28]
 8003794:	4b48      	ldr	r3, [pc, #288]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003796:	69db      	ldr	r3, [r3, #28]
 8003798:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379c:	60bb      	str	r3, [r7, #8]
 800379e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a6:	4b45      	ldr	r3, [pc, #276]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d118      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037b2:	4b42      	ldr	r3, [pc, #264]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a41      	ldr	r2, [pc, #260]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037bc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037be:	f7fd fbdb 	bl	8000f78 <HAL_GetTick>
 80037c2:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	e008      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037c6:	f7fd fbd7 	bl	8000f78 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b64      	cmp	r3, #100	@ 0x64
 80037d2:	d901      	bls.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e1d6      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d0f0      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80037e4:	4b34      	ldr	r3, [pc, #208]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e6:	6a1b      	ldr	r3, [r3, #32]
 80037e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	f000 8084 	beq.w	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037fe:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003800:	429a      	cmp	r2, r3
 8003802:	d07c      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003804:	4b2c      	ldr	r3, [pc, #176]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800380c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800380e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003812:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	fa93 f3a3 	rbit	r3, r3
 800381a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800381c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003828:	4413      	add	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	461a      	mov	r2, r3
 800382e:	2301      	movs	r3, #1
 8003830:	6013      	str	r3, [r2, #0]
 8003832:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003836:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	fab3 f383 	clz	r3, r3
 8003846:	b2db      	uxtb	r3, r3
 8003848:	461a      	mov	r2, r3
 800384a:	4b1d      	ldr	r3, [pc, #116]	@ (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800384c:	4413      	add	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	461a      	mov	r2, r3
 8003852:	2300      	movs	r3, #0
 8003854:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003856:	4a18      	ldr	r2, [pc, #96]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800385c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	d04b      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003866:	f7fd fb87 	bl	8000f78 <HAL_GetTick>
 800386a:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386c:	e00a      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800386e:	f7fd fb83 	bl	8000f78 <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	f241 3288 	movw	r2, #5000	@ 0x1388
 800387c:	4293      	cmp	r3, r2
 800387e:	d901      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e180      	b.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003884:	2302      	movs	r3, #2
 8003886:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800388a:	fa93 f3a3 	rbit	r3, r3
 800388e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003890:	2302      	movs	r3, #2
 8003892:	623b      	str	r3, [r7, #32]
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	61fb      	str	r3, [r7, #28]
  return result;
 800389c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	fab3 f383 	clz	r3, r3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	095b      	lsrs	r3, r3, #5
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f043 0302 	orr.w	r3, r3, #2
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d108      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80038b2:	4b01      	ldr	r3, [pc, #4]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	e00d      	b.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40007000 	.word	0x40007000
 80038c0:	10908100 	.word	0x10908100
 80038c4:	2302      	movs	r3, #2
 80038c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	fa93 f3a3 	rbit	r3, r3
 80038ce:	617b      	str	r3, [r7, #20]
 80038d0:	4b9a      	ldr	r3, [pc, #616]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80038d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d4:	2202      	movs	r2, #2
 80038d6:	613a      	str	r2, [r7, #16]
 80038d8:	693a      	ldr	r2, [r7, #16]
 80038da:	fa92 f2a2 	rbit	r2, r2
 80038de:	60fa      	str	r2, [r7, #12]
  return result;
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	fab2 f282 	clz	r2, r2
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	f002 021f 	and.w	r2, r2, #31
 80038f2:	2101      	movs	r1, #1
 80038f4:	fa01 f202 	lsl.w	r2, r1, r2
 80038f8:	4013      	ands	r3, r2
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d0b7      	beq.n	800386e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80038fe:	4b8f      	ldr	r3, [pc, #572]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003900:	6a1b      	ldr	r3, [r3, #32]
 8003902:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	498c      	ldr	r1, [pc, #560]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800390c:	4313      	orrs	r3, r2
 800390e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003910:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003914:	2b01      	cmp	r3, #1
 8003916:	d105      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003918:	4b88      	ldr	r3, [pc, #544]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	4a87      	ldr	r2, [pc, #540]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800391e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003922:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003930:	4b82      	ldr	r3, [pc, #520]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003932:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003934:	f023 0203 	bic.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	497f      	ldr	r1, [pc, #508]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0302 	and.w	r3, r3, #2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800394e:	4b7b      	ldr	r3, [pc, #492]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	4978      	ldr	r1, [pc, #480]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800395c:	4313      	orrs	r3, r2
 800395e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b00      	cmp	r3, #0
 800396a:	d008      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800396c:	4b73      	ldr	r3, [pc, #460]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	4970      	ldr	r1, [pc, #448]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800397a:	4313      	orrs	r3, r2
 800397c:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d008      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800398a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800398c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398e:	f023 0210 	bic.w	r2, r3, #16
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	69db      	ldr	r3, [r3, #28]
 8003996:	4969      	ldr	r1, [pc, #420]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003998:	4313      	orrs	r3, r2
 800399a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80039a8:	4b64      	ldr	r3, [pc, #400]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b4:	4961      	ldr	r1, [pc, #388]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d008      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80039c6:	4b5d      	ldr	r3, [pc, #372]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	f023 0220 	bic.w	r2, r3, #32
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	495a      	ldr	r1, [pc, #360]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d008      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80039e4:	4b55      	ldr	r3, [pc, #340]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f0:	4952      	ldr	r1, [pc, #328]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d008      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a02:	4b4e      	ldr	r3, [pc, #312]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	494b      	ldr	r1, [pc, #300]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a10:	4313      	orrs	r3, r2
 8003a12:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a20:	4b46      	ldr	r3, [pc, #280]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a24:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	4943      	ldr	r1, [pc, #268]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a3e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a4a:	493c      	ldr	r1, [pc, #240]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d008      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003a5c:	4b37      	ldr	r3, [pc, #220]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	4934      	ldr	r1, [pc, #208]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d008      	beq.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8003a7a:	4b30      	ldr	r3, [pc, #192]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7e:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a86:	492d      	ldr	r1, [pc, #180]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d008      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003a98:	4b28      	ldr	r3, [pc, #160]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa4:	4925      	ldr	r1, [pc, #148]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8003ab6:	4b21      	ldr	r3, [pc, #132]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aba:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac2:	491e      	ldr	r1, [pc, #120]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d008      	beq.n	8003ae6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8003ad4:	4b19      	ldr	r3, [pc, #100]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ad6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ad8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	4916      	ldr	r1, [pc, #88]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8003af2:	4b12      	ldr	r3, [pc, #72]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003af6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afe:	490f      	ldr	r1, [pc, #60]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b00:	4313      	orrs	r3, r2
 8003b02:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d008      	beq.n	8003b22 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003b10:	4b0a      	ldr	r3, [pc, #40]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b14:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1c:	4907      	ldr	r1, [pc, #28]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d00c      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003b2e:	4b03      	ldr	r3, [pc, #12]	@ (8003b3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b32:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	e002      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b42:	4913      	ldr	r1, [pc, #76]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b44:	4313      	orrs	r3, r2
 8003b46:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d008      	beq.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003b54:	4b0e      	ldr	r3, [pc, #56]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b58:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b60:	490b      	ldr	r1, [pc, #44]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d008      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8003b72:	4b07      	ldr	r3, [pc, #28]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b76:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7e:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3748      	adds	r7, #72	@ 0x48
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         returns the configuration information for the Extended Peripherals clocks
  *         (ADC, CEC, I2C, I2S, SDADC, HRTIM, TIM, USART, RTC and USB clocks).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  /* Common part first */
#if defined(RCC_CFGR3_USART2SW) && defined(RCC_CFGR3_USART3SW)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_USART3 | \
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a70      	ldr	r2, [pc, #448]	@ (8003d60 <HAL_RCCEx_GetPeriphCLKConfig+0x1cc>)
 8003ba0:	601a      	str	r2, [r3, #0]
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | \
                                        RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_RTC;
#endif /* RCC_CFGR3_USART2SW && RCC_CFGR3_USART3SW */
  
  /* Get the RTC configuration --------------------------------------------*/
  PeriphClkInit->RTCClockSelection = __HAL_RCC_GET_RTC_SOURCE();
 8003ba2:	4b70      	ldr	r3, [pc, #448]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	605a      	str	r2, [r3, #4]
  /* Get the USART1 clock configuration --------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8003bae:	4b6d      	ldr	r3, [pc, #436]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0203 	and.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	609a      	str	r2, [r3, #8]
#if defined(RCC_CFGR3_USART2SW)
  /* Get the USART2 clock configuration -----------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8003bba:	4b6a      	ldr	r3, [pc, #424]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	60da      	str	r2, [r3, #12]
#endif /* RCC_CFGR3_USART2SW */
#if defined(RCC_CFGR3_USART3SW)
   /* Get the USART3 clock configuration -----------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8003bc6:	4b67      	ldr	r3, [pc, #412]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bca:	f403 2240 	and.w	r2, r3, #786432	@ 0xc0000
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]
#endif /* RCC_CFGR3_USART3SW */
  /* Get the I2C1 clock configuration -----------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8003bd2:	4b64      	ldr	r3, [pc, #400]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd6:	f003 0210 	and.w	r2, r3, #16
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	61da      	str	r2, [r3, #28]
#if defined(STM32F302xE) || defined(STM32F303xE)\
    || defined(STM32F302xC) || defined(STM32F303xC)\
    || defined(STM32F302x8)                        \
    || defined(STM32F373xC)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USB;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	601a      	str	r2, [r3, #0]
  /* Get the USB clock configuration -----------------------------------------*/
  PeriphClkInit->USBClockSelection = __HAL_RCC_GET_USB_SOURCE();
 8003bea:	4b5e      	ldr	r3, [pc, #376]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	655a      	str	r2, [r3, #84]	@ 0x54
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
    || defined(STM32F373xC) || defined(STM32F378xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C2;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	601a      	str	r2, [r3, #0]
  /* Get the I2C2 clock configuration -----------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 8003c02:	4b58      	ldr	r3, [pc, #352]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c06:	f003 0220 	and.w	r2, r3, #32
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	621a      	str	r2, [r3, #32]
       /* STM32F373xC || STM32F378xx                   */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C3;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	601a      	str	r2, [r3, #0]
  /* Get the I2C3 clock configuration -----------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8003c1a:	4b52      	ldr	r3, [pc, #328]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1e:	f003 0240 	and.w	r2, r3, #64	@ 0x40
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	625a      	str	r2, [r3, #36]	@ 0x24
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F302xC) || defined(STM32F303xC) ||defined(STM32F358xx)

  PeriphClkInit->PeriphClockSelection |= (RCC_PERIPHCLK_UART4  | RCC_PERIPHCLK_UART5);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f043 0218 	orr.w	r2, r3, #24
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	601a      	str	r2, [r3, #0]
  /* Get the UART4 clock configuration -----------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 8003c32:	4b4c      	ldr	r3, [pc, #304]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c36:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	615a      	str	r2, [r3, #20]
  /* Get the UART5 clock configuration -----------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8003c3e:	4b49      	ldr	r3, [pc, #292]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c42:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	619a      	str	r2, [r3, #24]

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2S;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	601a      	str	r2, [r3, #0]
  /* Get the I2S clock configuration -----------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2S_SOURCE();
 8003c56:	4b43      	ldr	r3, [pc, #268]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f403 0200 	and.w	r2, r3, #8388608	@ 0x800000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	631a      	str	r2, [r3, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC12;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	601a      	str	r2, [r3, #0]
  /* Get the ADC1 & ADC2 clock configuration -----------------------------------------*/
  PeriphClkInit->Adc12ClockSelection = __HAL_RCC_GET_ADC12_SOURCE();
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c72:	f403 72f8 	and.w	r2, r3, #496	@ 0x1f0
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	629a      	str	r2, [r3, #40]	@ 0x28
       /* STM32F303x8 || STM32F334x8 || STM32F328xx    */

#if defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F303xC) || defined(STM32F358xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_ADC34;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	601a      	str	r2, [r3, #0]
   /* Get the ADC3 & ADC4 clock configuration -----------------------------------------*/
  PeriphClkInit->Adc34ClockSelection = __HAL_RCC_GET_ADC34_SOURCE();
 8003c86:	4b37      	ldr	r3, [pc, #220]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003c88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c8a:	f403 5278 	and.w	r2, r3, #15872	@ 0x3e00
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	62da      	str	r2, [r3, #44]	@ 0x2c
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
    || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
    || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM1;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	601a      	str	r2, [r3, #0]
  /* Get the TIM1 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim1ClockSelection = __HAL_RCC_GET_TIM1_SOURCE();
 8003c9e:	4b31      	ldr	r3, [pc, #196]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	635a      	str	r2, [r3, #52]	@ 0x34
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
    || defined(STM32F303xC) || defined(STM32F358xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM8;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	601a      	str	r2, [r3, #0]
  /* Get the TIM8 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim8ClockSelection = __HAL_RCC_GET_TIM8_SOURCE();
 8003cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cba:	f403 7200 	and.w	r2, r3, #512	@ 0x200
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	641a      	str	r2, [r3, #64]	@ 0x40

#endif /* STM32F373xC || STM32F378xx */

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM2;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	601a      	str	r2, [r3, #0]
  /* Get the TIM2 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim2ClockSelection = __HAL_RCC_GET_TIM2_SOURCE();
 8003cce:	4b25      	ldr	r3, [pc, #148]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cd2:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	639a      	str	r2, [r3, #56]	@ 0x38

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM34;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	601a      	str	r2, [r3, #0]
  /* Get the TIM3 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim34ClockSelection = __HAL_RCC_GET_TIM34_SOURCE();
 8003ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM15;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]
  /* Get the TIM15 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim15ClockSelection = __HAL_RCC_GET_TIM15_SOURCE();
 8003cfe:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f403 6280 	and.w	r2, r3, #1024	@ 0x400
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	645a      	str	r2, [r3, #68]	@ 0x44

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM16;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	601a      	str	r2, [r3, #0]
  /* Get the TIM16 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim16ClockSelection = __HAL_RCC_GET_TIM16_SOURCE();
 8003d16:	4b13      	ldr	r3, [pc, #76]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d1a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	649a      	str	r2, [r3, #72]	@ 0x48

  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM17;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	601a      	str	r2, [r3, #0]
  /* Get the TIM17 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim17ClockSelection = __HAL_RCC_GET_TIM17_SOURCE();
 8003d2e:	4b0d      	ldr	r3, [pc, #52]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	64da      	str	r2, [r3, #76]	@ 0x4c

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */
  
#if defined (STM32F303xE) || defined(STM32F398xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_TIM20;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	601a      	str	r2, [r3, #0]
  /* Get the TIM20 clock configuration -----------------------------------------*/
  PeriphClkInit->Tim20ClockSelection = __HAL_RCC_GET_TIM20_SOURCE();
 8003d46:	4b07      	ldr	r3, [pc, #28]	@ (8003d64 <HAL_RCCEx_GetPeriphCLKConfig+0x1d0>)
 8003d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4a:	f403 4200 	and.w	r2, r3, #32768	@ 0x8000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* STM32F303xE || STM32F398xx */
}
 8003d52:	bf00      	nop
 8003d54:	370c      	adds	r7, #12
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	00010027 	.word	0x00010027
 8003d64:	40021000 	.word	0x40021000

08003d68 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_TIM34   TIM34 peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	60fb      	str	r3, [r7, #12]

  uint32_t srcclk = 0U;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CFGR_SDPRE */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d7e:	f000 837d 	beq.w	800447c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003d88:	f200 83b0 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d92:	f000 8357 	beq.w	8004444 <HAL_RCCEx_GetPeriphCLKFreq+0x6dc>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d9c:	f200 83a6 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003da6:	f000 8325 	beq.w	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003db0:	f200 839c 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dba:	f000 82fe 	beq.w	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x652>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dc4:	f200 8392 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dce:	f000 8371 	beq.w	80044b4 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003dd8:	f200 8388 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003de2:	f000 82b0 	beq.w	8004346 <HAL_RCCEx_GetPeriphCLKFreq+0x5de>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dec:	f200 837e 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003df6:	f000 81fa 	beq.w	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e00:	f200 8374 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e0a:	f000 821d 	beq.w	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e14:	f200 836a 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e1e:	f000 808a 	beq.w	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e28:	f200 8360 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e32:	f000 82a5 	beq.w	8004380 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e3c:	f200 8356 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e46:	f000 8261 	beq.w	800430c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e50:	f200 834c 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e5a:	f000 81e1 	beq.w	8004220 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e64:	f200 8342 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e6e:	f000 822b 	beq.w	80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e78:	f200 8338 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b80      	cmp	r3, #128	@ 0x80
 8003e80:	f000 8200 	beq.w	8004284 <HAL_RCCEx_GetPeriphCLKFreq+0x51c>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2b80      	cmp	r3, #128	@ 0x80
 8003e88:	f200 8330 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d84c      	bhi.n	8003f2c <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 8329 	beq.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	2b1f      	cmp	r3, #31
 8003ea0:	f200 8324 	bhi.w	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
 8003ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8003eac <HAL_RCCEx_GetPeriphCLKFreq+0x144>)
 8003ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eaa:	bf00      	nop
 8003eac:	08003f9b 	.word	0x08003f9b
 8003eb0:	08003ff7 	.word	0x08003ff7
 8003eb4:	080044ed 	.word	0x080044ed
 8003eb8:	08004059 	.word	0x08004059
 8003ebc:	080044ed 	.word	0x080044ed
 8003ec0:	080044ed 	.word	0x080044ed
 8003ec4:	080044ed 	.word	0x080044ed
 8003ec8:	080040bb 	.word	0x080040bb
 8003ecc:	080044ed 	.word	0x080044ed
 8003ed0:	080044ed 	.word	0x080044ed
 8003ed4:	080044ed 	.word	0x080044ed
 8003ed8:	080044ed 	.word	0x080044ed
 8003edc:	080044ed 	.word	0x080044ed
 8003ee0:	080044ed 	.word	0x080044ed
 8003ee4:	080044ed 	.word	0x080044ed
 8003ee8:	0800411d 	.word	0x0800411d
 8003eec:	080044ed 	.word	0x080044ed
 8003ef0:	080044ed 	.word	0x080044ed
 8003ef4:	080044ed 	.word	0x080044ed
 8003ef8:	080044ed 	.word	0x080044ed
 8003efc:	080044ed 	.word	0x080044ed
 8003f00:	080044ed 	.word	0x080044ed
 8003f04:	080044ed 	.word	0x080044ed
 8003f08:	080044ed 	.word	0x080044ed
 8003f0c:	080044ed 	.word	0x080044ed
 8003f10:	080044ed 	.word	0x080044ed
 8003f14:	080044ed 	.word	0x080044ed
 8003f18:	080044ed 	.word	0x080044ed
 8003f1c:	080044ed 	.word	0x080044ed
 8003f20:	080044ed 	.word	0x080044ed
 8003f24:	080044ed 	.word	0x080044ed
 8003f28:	0800417f 	.word	0x0800417f
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b40      	cmp	r3, #64	@ 0x40
 8003f30:	f000 8144 	beq.w	80041bc <HAL_RCCEx_GetPeriphCLKFreq+0x454>
      break;
    }
#endif /* RCC_CFGR3_CECSW */
  default: 
    {
      break;
 8003f34:	e2da      	b.n	80044ec <HAL_RCCEx_GetPeriphCLKFreq+0x784>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003f36:	4b9a      	ldr	r3, [pc, #616]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3e:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f46:	d109      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8003f48:	4b95      	ldr	r3, [pc, #596]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	f003 0302 	and.w	r3, r3, #2
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d103      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
        frequency = LSE_VALUE;
 8003f54:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f62:	d109      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8003f64:	4b8e      	ldr	r3, [pc, #568]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d103      	bne.n	8003f78 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
        frequency = LSI_VALUE;
 8003f70:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003f74:	60fb      	str	r3, [r7, #12]
 8003f76:	e00f      	b.n	8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7e:	f040 82b7 	bne.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8003f82:	4b87      	ldr	r3, [pc, #540]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f8e:	f040 82af 	bne.w	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
        frequency = HSE_VALUE / 32U;
 8003f92:	4b84      	ldr	r3, [pc, #528]	@ (80041a4 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8003f94:	60fb      	str	r3, [r7, #12]
      break;
 8003f96:	e2ab      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8003f98:	e2aa      	b.n	80044f0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003f9a:	4b81      	ldr	r3, [pc, #516]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f003 0303 	and.w	r3, r3, #3
 8003fa2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d103      	bne.n	8003fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x24a>
        frequency = HAL_RCC_GetPCLK2Freq();
 8003faa:	f7ff fae3 	bl	8003574 <HAL_RCC_GetPCLK2Freq>
 8003fae:	60f8      	str	r0, [r7, #12]
      break;
 8003fb0:	e2a0      	b.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	2b03      	cmp	r3, #3
 8003fb6:	d108      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8003fb8:	4b79      	ldr	r3, [pc, #484]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 0302 	and.w	r3, r3, #2
 8003fc0:	2b02      	cmp	r3, #2
 8003fc2:	d102      	bne.n	8003fca <HAL_RCCEx_GetPeriphCLKFreq+0x262>
        frequency = HSI_VALUE;
 8003fc4:	4b78      	ldr	r3, [pc, #480]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8003fc6:	60fb      	str	r3, [r7, #12]
      break;
 8003fc8:	e294      	b.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d103      	bne.n	8003fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
        frequency = HAL_RCC_GetSysClockFreq();
 8003fd0:	f7ff fa4e 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8003fd4:	60f8      	str	r0, [r7, #12]
      break;
 8003fd6:	e28d      	b.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	f040 828a 	bne.w	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
 8003fe0:	4b6f      	ldr	r3, [pc, #444]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	f003 0302 	and.w	r3, r3, #2
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f040 8283 	bne.w	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
        frequency = LSE_VALUE;
 8003fee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ff2:	60fb      	str	r3, [r7, #12]
      break;
 8003ff4:	e27e      	b.n	80044f4 <HAL_RCCEx_GetPeriphCLKFreq+0x78c>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003ff6:	4b6a      	ldr	r3, [pc, #424]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ffe:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d103      	bne.n	800400e <HAL_RCCEx_GetPeriphCLKFreq+0x2a6>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004006:	f7ff fa93 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800400a:	60f8      	str	r0, [r7, #12]
      break;
 800400c:	e274      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004014:	d108      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8004016:	4b62      	ldr	r3, [pc, #392]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b02      	cmp	r3, #2
 8004020:	d102      	bne.n	8004028 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
        frequency = HSI_VALUE;
 8004022:	4b61      	ldr	r3, [pc, #388]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8004024:	60fb      	str	r3, [r7, #12]
      break;
 8004026:	e267      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800402e:	d103      	bne.n	8004038 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
        frequency = HAL_RCC_GetSysClockFreq();
 8004030:	f7ff fa1e 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8004034:	60f8      	str	r0, [r7, #12]
      break;
 8004036:	e25f      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800403e:	f040 825b 	bne.w	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
 8004042:	4b57      	ldr	r3, [pc, #348]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	f003 0302 	and.w	r3, r3, #2
 800404a:	2b02      	cmp	r3, #2
 800404c:	f040 8254 	bne.w	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
        frequency = LSE_VALUE;
 8004050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004054:	60fb      	str	r3, [r7, #12]
      break;
 8004056:	e24f      	b.n	80044f8 <HAL_RCCEx_GetPeriphCLKFreq+0x790>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004058:	4b51      	ldr	r3, [pc, #324]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800405a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004060:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d103      	bne.n	8004070 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
        frequency = HAL_RCC_GetPCLK1Freq();
 8004068:	f7ff fa62 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 800406c:	60f8      	str	r0, [r7, #12]
     break;
 800406e:	e245      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004076:	d108      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8004078:	4b49      	ldr	r3, [pc, #292]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b02      	cmp	r3, #2
 8004082:	d102      	bne.n	800408a <HAL_RCCEx_GetPeriphCLKFreq+0x322>
        frequency = HSI_VALUE;
 8004084:	4b48      	ldr	r3, [pc, #288]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 8004086:	60fb      	str	r3, [r7, #12]
     break;
 8004088:	e238      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004090:	d103      	bne.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
        frequency = HAL_RCC_GetSysClockFreq();
 8004092:	f7ff f9ed 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8004096:	60f8      	str	r0, [r7, #12]
     break;
 8004098:	e230      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80040a0:	f040 822c 	bne.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
 80040a4:	4b3e      	ldr	r3, [pc, #248]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80040a6:	6a1b      	ldr	r3, [r3, #32]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	f040 8225 	bne.w	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
        frequency = LSE_VALUE;
 80040b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80040b6:	60fb      	str	r3, [r7, #12]
     break;
 80040b8:	e220      	b.n	80044fc <HAL_RCCEx_GetPeriphCLKFreq+0x794>
      srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80040ba:	4b39      	ldr	r3, [pc, #228]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80040c2:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d103      	bne.n	80040d2 <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
        frequency = HAL_RCC_GetPCLK1Freq();
 80040ca:	f7ff fa31 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 80040ce:	60f8      	str	r0, [r7, #12]
      break;
 80040d0:	e216      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
      else if ((srcclk == RCC_UART4CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80040d8:	d108      	bne.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>
 80040da:	4b31      	ldr	r3, [pc, #196]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d102      	bne.n	80040ec <HAL_RCCEx_GetPeriphCLKFreq+0x384>
        frequency = HSI_VALUE;
 80040e6:	4b30      	ldr	r3, [pc, #192]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 80040e8:	60fb      	str	r3, [r7, #12]
      break;
 80040ea:	e209      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
      else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040f2:	d103      	bne.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0x394>
        frequency = HAL_RCC_GetSysClockFreq();
 80040f4:	f7ff f9bc 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 80040f8:	60f8      	str	r0, [r7, #12]
      break;
 80040fa:	e201      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
      else if ((srcclk == RCC_UART4CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004102:	f040 81fd 	bne.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
 8004106:	4b26      	ldr	r3, [pc, #152]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	f040 81f6 	bne.w	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
        frequency = LSE_VALUE;
 8004114:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004118:	60fb      	str	r3, [r7, #12]
      break;
 800411a:	e1f1      	b.n	8004500 <HAL_RCCEx_GetPeriphCLKFreq+0x798>
      srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800411c:	4b20      	ldr	r3, [pc, #128]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800411e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004120:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004124:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d103      	bne.n	8004134 <HAL_RCCEx_GetPeriphCLKFreq+0x3cc>
        frequency = HAL_RCC_GetPCLK1Freq();
 800412c:	f7ff fa00 	bl	8003530 <HAL_RCC_GetPCLK1Freq>
 8004130:	60f8      	str	r0, [r7, #12]
      break;
 8004132:	e1e7      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
      else if ((srcclk == RCC_UART5CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800413a:	d108      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
 800413c:	4b18      	ldr	r3, [pc, #96]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0302 	and.w	r3, r3, #2
 8004144:	2b02      	cmp	r3, #2
 8004146:	d102      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
        frequency = HSI_VALUE;
 8004148:	4b17      	ldr	r3, [pc, #92]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800414a:	60fb      	str	r3, [r7, #12]
      break;
 800414c:	e1da      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
      else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004154:	d103      	bne.n	800415e <HAL_RCCEx_GetPeriphCLKFreq+0x3f6>
        frequency = HAL_RCC_GetSysClockFreq();
 8004156:	f7ff f98b 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800415a:	60f8      	str	r0, [r7, #12]
      break;
 800415c:	e1d2      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
      else if ((srcclk == RCC_UART5CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004164:	f040 81ce 	bne.w	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
 8004168:	4b0d      	ldr	r3, [pc, #52]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f003 0302 	and.w	r3, r3, #2
 8004170:	2b02      	cmp	r3, #2
 8004172:	f040 81c7 	bne.w	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        frequency = LSE_VALUE;
 8004176:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800417a:	60fb      	str	r3, [r7, #12]
      break;
 800417c:	e1c2      	b.n	8004504 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800417e:	4b08      	ldr	r3, [pc, #32]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f003 0310 	and.w	r3, r3, #16
 8004186:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10e      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x444>
 800418e:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b02      	cmp	r3, #2
 8004198:	d108      	bne.n	80041ac <HAL_RCCEx_GetPeriphCLKFreq+0x444>
        frequency = HSI_VALUE;
 800419a:	4b03      	ldr	r3, [pc, #12]	@ (80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x440>)
 800419c:	60fb      	str	r3, [r7, #12]
      break;
 800419e:	e1b3      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
 80041a0:	40021000 	.word	0x40021000
 80041a4:	0003d090 	.word	0x0003d090
 80041a8:	007a1200 	.word	0x007a1200
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	f040 81aa 	bne.w	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
        frequency = HAL_RCC_GetSysClockFreq();
 80041b4:	f7ff f95c 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 80041b8:	60f8      	str	r0, [r7, #12]
      break;
 80041ba:	e1a5      	b.n	8004508 <HAL_RCCEx_GetPeriphCLKFreq+0x7a0>
      srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041bc:	4b9c      	ldr	r3, [pc, #624]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80041be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_I2C2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d108      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 80041cc:	4b98      	ldr	r3, [pc, #608]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b02      	cmp	r3, #2
 80041d6:	d102      	bne.n	80041de <HAL_RCCEx_GetPeriphCLKFreq+0x476>
        frequency = HSI_VALUE;
 80041d8:	4b96      	ldr	r3, [pc, #600]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 80041da:	60fb      	str	r3, [r7, #12]
      break;
 80041dc:	e196      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
      else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	f040 8193 	bne.w	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
        frequency = HAL_RCC_GetSysClockFreq();
 80041e6:	f7ff f943 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 80041ea:	60f8      	str	r0, [r7, #12]
      break;
 80041ec:	e18e      	b.n	800450c <HAL_RCCEx_GetPeriphCLKFreq+0x7a4>
      srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80041ee:	4b90      	ldr	r3, [pc, #576]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041f6:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_I2C3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d108      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 80041fe:	4b8c      	ldr	r3, [pc, #560]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b02      	cmp	r3, #2
 8004208:	d102      	bne.n	8004210 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
        frequency = HSI_VALUE;
 800420a:	4b8a      	ldr	r3, [pc, #552]	@ (8004434 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>)
 800420c:	60fb      	str	r3, [r7, #12]
      break;
 800420e:	e17f      	b.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
      else if (srcclk == RCC_I2C3CLKSOURCE_SYSCLK)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	2b40      	cmp	r3, #64	@ 0x40
 8004214:	f040 817c 	bne.w	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
        frequency = HAL_RCC_GetSysClockFreq();
 8004218:	f7ff f92a 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 800421c:	60f8      	str	r0, [r7, #12]
      break;
 800421e:	e177      	b.n	8004510 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004220:	4b83      	ldr	r3, [pc, #524]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004228:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_I2SCLKSOURCE_EXT)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004230:	d102      	bne.n	8004238 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        frequency = 0xDEADDEADU;
 8004232:	4b81      	ldr	r3, [pc, #516]	@ (8004438 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>)
 8004234:	60fb      	str	r3, [r7, #12]
      break;
 8004236:	e16d      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
      else if (srcclk == RCC_I2SCLKSOURCE_SYSCLK)
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f040 816a 	bne.w	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
        frequency = HAL_RCC_GetSysClockFreq();
 8004240:	f7ff f916 	bl	8003470 <HAL_RCC_GetSysClockFreq>
 8004244:	60f8      	str	r0, [r7, #12]
      break;
 8004246:	e165      	b.n	8004514 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004248:	4b79      	ldr	r3, [pc, #484]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004250:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004254:	f040 8160 	bne.w	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
        srcclk = __HAL_RCC_GET_USB_SOURCE();
 8004258:	4b75      	ldr	r3, [pc, #468]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004260:	60bb      	str	r3, [r7, #8]
        if (srcclk == RCC_USBCLKSOURCE_PLL)
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004268:	d103      	bne.n	8004272 <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
          frequency = RCC_GetPLLCLKFreq();
 800426a:	f000 f973 	bl	8004554 <RCC_GetPLLCLKFreq>
 800426e:	60f8      	str	r0, [r7, #12]
      break;
 8004270:	e152      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
          frequency = (RCC_GetPLLCLKFreq() * 3U) / 2U;
 8004272:	f000 f96f 	bl	8004554 <RCC_GetPLLCLKFreq>
 8004276:	4602      	mov	r2, r0
 8004278:	4613      	mov	r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4413      	add	r3, r2
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	60fb      	str	r3, [r7, #12]
      break;
 8004282:	e149      	b.n	8004518 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>
      srcclk = __HAL_RCC_GET_ADC12_SOURCE();
 8004284:	4b6a      	ldr	r3, [pc, #424]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004288:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800428c:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADC12PLLCLK_OFF)
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d103      	bne.n	800429c <HAL_RCCEx_GetPeriphCLKFreq+0x534>
          frequency = SystemCoreClock;
 8004294:	4b69      	ldr	r3, [pc, #420]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	60fb      	str	r3, [r7, #12]
      break;
 800429a:	e13f      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800429c:	4b64      	ldr	r3, [pc, #400]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042a8:	f040 8138 	bne.w	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> RCC_CFGR2_ADCPRE12_Pos) & 0xF];
 80042ac:	f000 f952 	bl	8004554 <RCC_GetPLLCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	4961      	ldr	r1, [pc, #388]	@ (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 80042bc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80042c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042c4:	60fb      	str	r3, [r7, #12]
      break;
 80042c6:	e129      	b.n	800451c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
      srcclk = __HAL_RCC_GET_ADC34_SOURCE();
 80042c8:	4b59      	ldr	r3, [pc, #356]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80042ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042cc:	f403 5378 	and.w	r3, r3, #15872	@ 0x3e00
 80042d0:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_ADC34PLLCLK_OFF)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
          frequency = SystemCoreClock;
 80042d8:	4b58      	ldr	r3, [pc, #352]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	60fb      	str	r3, [r7, #12]
      break;
 80042de:	e11f      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80042e0:	4b53      	ldr	r3, [pc, #332]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80042ec:	f040 8118 	bne.w	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
          frequency = RCC_GetPLLCLKFreq() / adc_pll_prediv_table[(srcclk >> RCC_CFGR2_ADCPRE34_Pos) & 0xF];
 80042f0:	f000 f930 	bl	8004554 <RCC_GetPLLCLKFreq>
 80042f4:	4602      	mov	r2, r0
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	0a5b      	lsrs	r3, r3, #9
 80042fa:	f003 030f 	and.w	r3, r3, #15
 80042fe:	4950      	ldr	r1, [pc, #320]	@ (8004440 <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>)
 8004300:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8004304:	fbb2 f3f3 	udiv	r3, r2, r3
 8004308:	60fb      	str	r3, [r7, #12]
      break;
 800430a:	e109      	b.n	8004520 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
      srcclk = __HAL_RCC_GET_TIM1_SOURCE();
 800430c:	4b48      	ldr	r3, [pc, #288]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004314:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM1CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800431c:	d10b      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
 800431e:	4b44      	ldr	r3, [pc, #272]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004326:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800432a:	d104      	bne.n	8004336 <HAL_RCCEx_GetPeriphCLKFreq+0x5ce>
        frequency = RCC_GetPLLCLKFreq();
 800432c:	f000 f912 	bl	8004554 <RCC_GetPLLCLKFreq>
 8004330:	60f8      	str	r0, [r7, #12]
 8004332:	bf00      	nop
      break;
 8004334:	e0f6      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
      else if (srcclk == RCC_TIM1CLK_HCLK)
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2b00      	cmp	r3, #0
 800433a:	f040 80f3 	bne.w	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
        frequency = SystemCoreClock;
 800433e:	4b3f      	ldr	r3, [pc, #252]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60fb      	str	r3, [r7, #12]
      break;
 8004344:	e0ee      	b.n	8004524 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
      srcclk = __HAL_RCC_GET_TIM2_SOURCE();
 8004346:	4b3a      	ldr	r3, [pc, #232]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434e:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM2CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004356:	d10b      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
 8004358:	4b35      	ldr	r3, [pc, #212]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004364:	d104      	bne.n	8004370 <HAL_RCCEx_GetPeriphCLKFreq+0x608>
        frequency = RCC_GetPLLCLKFreq();
 8004366:	f000 f8f5 	bl	8004554 <RCC_GetPLLCLKFreq>
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	bf00      	nop
      break;
 800436e:	e0db      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
      else if (srcclk == RCC_TIM2CLK_HCLK)
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	f040 80d8 	bne.w	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
        frequency = SystemCoreClock;
 8004378:	4b30      	ldr	r3, [pc, #192]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	60fb      	str	r3, [r7, #12]
      break;
 800437e:	e0d3      	b.n	8004528 <HAL_RCCEx_GetPeriphCLKFreq+0x7c0>
      srcclk = __HAL_RCC_GET_TIM8_SOURCE();
 8004380:	4b2b      	ldr	r3, [pc, #172]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004388:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM8CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004390:	d10b      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x642>
 8004392:	4b27      	ldr	r3, [pc, #156]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800439e:	d104      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0x642>
        frequency = RCC_GetPLLCLKFreq();
 80043a0:	f000 f8d8 	bl	8004554 <RCC_GetPLLCLKFreq>
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	bf00      	nop
      break;
 80043a8:	e0c0      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
      else if (srcclk == RCC_TIM8CLK_HCLK)
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f040 80bd 	bne.w	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
        frequency = SystemCoreClock;
 80043b2:	4b22      	ldr	r3, [pc, #136]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	60fb      	str	r3, [r7, #12]
      break;
 80043b8:	e0b8      	b.n	800452c <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
      srcclk = __HAL_RCC_GET_TIM15_SOURCE();
 80043ba:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80043bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043c2:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM15CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ca:	d10b      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80043cc:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043d8:	d104      	bne.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        frequency = RCC_GetPLLCLKFreq();
 80043da:	f000 f8bb 	bl	8004554 <RCC_GetPLLCLKFreq>
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	bf00      	nop
      break;
 80043e2:	e0a5      	b.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
      else if (srcclk == RCC_TIM15CLK_HCLK)
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f040 80a2 	bne.w	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
        frequency = SystemCoreClock;
 80043ec:	4b13      	ldr	r3, [pc, #76]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	60fb      	str	r3, [r7, #12]
      break;
 80043f2:	e09d      	b.n	8004530 <HAL_RCCEx_GetPeriphCLKFreq+0x7c8>
      srcclk = __HAL_RCC_GET_TIM16_SOURCE();
 80043f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 80043f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80043fc:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM16CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004404:	d10b      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
 8004406:	4b0a      	ldr	r3, [pc, #40]	@ (8004430 <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800440e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004412:	d104      	bne.n	800441e <HAL_RCCEx_GetPeriphCLKFreq+0x6b6>
        frequency = RCC_GetPLLCLKFreq();
 8004414:	f000 f89e 	bl	8004554 <RCC_GetPLLCLKFreq>
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	bf00      	nop
      break;
 800441c:	e08a      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
      else if (srcclk == RCC_TIM16CLK_HCLK)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f040 8087 	bne.w	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
        frequency = SystemCoreClock;
 8004426:	4b05      	ldr	r3, [pc, #20]	@ (800443c <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	60fb      	str	r3, [r7, #12]
      break;
 800442c:	e082      	b.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x7cc>
 800442e:	bf00      	nop
 8004430:	40021000 	.word	0x40021000
 8004434:	007a1200 	.word	0x007a1200
 8004438:	deaddead 	.word	0xdeaddead
 800443c:	20000004 	.word	0x20000004
 8004440:	08005a5c 	.word	0x08005a5c
      srcclk = __HAL_RCC_GET_TIM17_SOURCE();
 8004444:	4b41      	ldr	r3, [pc, #260]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444c:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM17CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004454:	d10b      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8004456:	4b3d      	ldr	r3, [pc, #244]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004462:	d104      	bne.n	800446e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
        frequency = RCC_GetPLLCLKFreq();
 8004464:	f000 f876 	bl	8004554 <RCC_GetPLLCLKFreq>
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	bf00      	nop
      break;
 800446c:	e064      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      else if (srcclk == RCC_TIM17CLK_HCLK)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d161      	bne.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
        frequency = SystemCoreClock;
 8004474:	4b36      	ldr	r3, [pc, #216]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
      break;
 800447a:	e05d      	b.n	8004538 <HAL_RCCEx_GetPeriphCLKFreq+0x7d0>
      srcclk = __HAL_RCC_GET_TIM20_SOURCE();
 800447c:	4b33      	ldr	r3, [pc, #204]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 800447e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004484:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM20CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448c:	d10b      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
 800448e:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004496:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800449a:	d104      	bne.n	80044a6 <HAL_RCCEx_GetPeriphCLKFreq+0x73e>
        frequency = RCC_GetPLLCLKFreq();
 800449c:	f000 f85a 	bl	8004554 <RCC_GetPLLCLKFreq>
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	bf00      	nop
      break;
 80044a4:	e04a      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
      else if (srcclk == RCC_TIM20CLK_HCLK)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d147      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
        frequency = SystemCoreClock;
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60fb      	str	r3, [r7, #12]
      break;
 80044b2:	e043      	b.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x7d4>
      srcclk = __HAL_RCC_GET_TIM34_SOURCE();
 80044b4:	4b25      	ldr	r3, [pc, #148]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 80044b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044bc:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_TIM34CLK_PLLCLK) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY)))
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044c4:	d10b      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 80044c6:	4b21      	ldr	r3, [pc, #132]	@ (800454c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80044d2:	d104      	bne.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x776>
        frequency = RCC_GetPLLCLKFreq();
 80044d4:	f000 f83e 	bl	8004554 <RCC_GetPLLCLKFreq>
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	bf00      	nop
      break;
 80044dc:	e030      	b.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
      else if (srcclk == RCC_TIM34CLK_HCLK)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d12d      	bne.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
        frequency = SystemCoreClock;
 80044e4:	4b1a      	ldr	r3, [pc, #104]	@ (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0x7e8>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	60fb      	str	r3, [r7, #12]
      break;
 80044ea:	e029      	b.n	8004540 <HAL_RCCEx_GetPeriphCLKFreq+0x7d8>
      break;
 80044ec:	bf00      	nop
 80044ee:	e028      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 80044f0:	bf00      	nop
 80044f2:	e026      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 80044f4:	bf00      	nop
 80044f6:	e024      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 80044f8:	bf00      	nop
 80044fa:	e022      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
     break;
 80044fc:	bf00      	nop
 80044fe:	e020      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004500:	bf00      	nop
 8004502:	e01e      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004504:	bf00      	nop
 8004506:	e01c      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004508:	bf00      	nop
 800450a:	e01a      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 800450c:	bf00      	nop
 800450e:	e018      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004510:	bf00      	nop
 8004512:	e016      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004514:	bf00      	nop
 8004516:	e014      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004518:	bf00      	nop
 800451a:	e012      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 800451c:	bf00      	nop
 800451e:	e010      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004520:	bf00      	nop
 8004522:	e00e      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004524:	bf00      	nop
 8004526:	e00c      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004528:	bf00      	nop
 800452a:	e00a      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 800452c:	bf00      	nop
 800452e:	e008      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004530:	bf00      	nop
 8004532:	e006      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004534:	bf00      	nop
 8004536:	e004      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004538:	bf00      	nop
 800453a:	e002      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 800453c:	bf00      	nop
 800453e:	e000      	b.n	8004542 <HAL_RCCEx_GetPeriphCLKFreq+0x7da>
      break;
 8004540:	bf00      	nop
    }
  }
  return(frequency);
 8004542:	68fb      	ldr	r3, [r7, #12]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	40021000 	.word	0x40021000
 8004550:	20000004 	.word	0x20000004

08004554 <RCC_GetPLLCLKFreq>:

/** @addtogroup RCCEx_Private_Functions
  * @{
  */
static uint32_t RCC_GetPLLCLKFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
  uint32_t pllmul = 0U, pllsource = 0U, prediv = 0U, pllclk = 0U;
 800455a:	2300      	movs	r3, #0
 800455c:	60bb      	str	r3, [r7, #8]
 800455e:	2300      	movs	r3, #0
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	2300      	movs	r3, #0
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	2300      	movs	r3, #0
 8004568:	60fb      	str	r3, [r7, #12]

  pllmul = RCC->CFGR & RCC_CFGR_PLLMUL;
 800456a:	4b18      	ldr	r3, [pc, #96]	@ (80045cc <RCC_GetPLLCLKFreq+0x78>)
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8004572:	60bb      	str	r3, [r7, #8]
  pllmul = ( pllmul >> 18U) + 2U;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	0c9b      	lsrs	r3, r3, #18
 8004578:	3302      	adds	r3, #2
 800457a:	60bb      	str	r3, [r7, #8]
  pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800457c:	4b13      	ldr	r3, [pc, #76]	@ (80045cc <RCC_GetPLLCLKFreq+0x78>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8004584:	607b      	str	r3, [r7, #4]
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/2U * PLLMUL */
    pllclk = (HSI_VALUE >> 1U) * pllmul;
  }
#else
  prediv = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1U;
 8004586:	4b11      	ldr	r3, [pc, #68]	@ (80045cc <RCC_GetPLLCLKFreq+0x78>)
 8004588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458a:	f003 030f 	and.w	r3, r3, #15
 800458e:	3301      	adds	r3, #1
 8004590:	603b      	str	r3, [r7, #0]
  if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004598:	d108      	bne.n	80045ac <RCC_GetPLLCLKFreq+0x58>
  {
    /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
    pllclk = (HSE_VALUE/prediv) * pllmul;
 800459a:	4a0d      	ldr	r2, [pc, #52]	@ (80045d0 <RCC_GetPLLCLKFreq+0x7c>)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	fbb2 f2f3 	udiv	r2, r2, r3
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	fb02 f303 	mul.w	r3, r2, r3
 80045a8:	60fb      	str	r3, [r7, #12]
 80045aa:	e007      	b.n	80045bc <RCC_GetPLLCLKFreq+0x68>
  }
  else
  {
    /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
    pllclk = (HSI_VALUE/prediv) * pllmul;
 80045ac:	4a08      	ldr	r2, [pc, #32]	@ (80045d0 <RCC_GetPLLCLKFreq+0x7c>)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	60fb      	str	r3, [r7, #12]
  }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

  return pllclk;
 80045bc:	68fb      	ldr	r3, [r7, #12]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3714      	adds	r7, #20
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	40021000 	.word	0x40021000
 80045d0:	007a1200 	.word	0x007a1200

080045d4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80045d4:	b480      	push	{r7}
 80045d6:	b089      	sub	sp, #36	@ 0x24
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	fa93 f3a3 	rbit	r3, r3
 80045ee:	613b      	str	r3, [r7, #16]
  return result;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	fab3 f383 	clz	r3, r3
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	2103      	movs	r1, #3
 80045fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	401a      	ands	r2, r3
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	61bb      	str	r3, [r7, #24]
  return result;
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	fab3 f383 	clz	r3, r3
 8004616:	b2db      	uxtb	r3, r3
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	6879      	ldr	r1, [r7, #4]
 800461c:	fa01 f303 	lsl.w	r3, r1, r3
 8004620:	431a      	orrs	r2, r3
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	601a      	str	r2, [r3, #0]
}
 8004626:	bf00      	nop
 8004628:	3724      	adds	r7, #36	@ 0x24
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr

08004632 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8004632:	b480      	push	{r7}
 8004634:	b085      	sub	sp, #20
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	68bb      	ldr	r3, [r7, #8]
 8004644:	43db      	mvns	r3, r3
 8004646:	401a      	ands	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	fb01 f303 	mul.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	605a      	str	r2, [r3, #4]
}
 8004656:	bf00      	nop
 8004658:	3714      	adds	r7, #20
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8004662:	b480      	push	{r7}
 8004664:	b089      	sub	sp, #36	@ 0x24
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	689a      	ldr	r2, [r3, #8]
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	fa93 f3a3 	rbit	r3, r3
 800467c:	613b      	str	r3, [r7, #16]
  return result;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	fab3 f383 	clz	r3, r3
 8004684:	b2db      	uxtb	r3, r3
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	2103      	movs	r1, #3
 800468a:	fa01 f303 	lsl.w	r3, r1, r3
 800468e:	43db      	mvns	r3, r3
 8004690:	401a      	ands	r2, r3
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	61bb      	str	r3, [r7, #24]
  return result;
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	fab3 f383 	clz	r3, r3
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	431a      	orrs	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80046b4:	bf00      	nop
 80046b6:	3724      	adds	r7, #36	@ 0x24
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	@ 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	68da      	ldr	r2, [r3, #12]
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	fa93 f3a3 	rbit	r3, r3
 80046da:	613b      	str	r3, [r7, #16]
  return result;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	005b      	lsls	r3, r3, #1
 80046e6:	2103      	movs	r1, #3
 80046e8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ec:	43db      	mvns	r3, r3
 80046ee:	401a      	ands	r2, r3
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	fa93 f3a3 	rbit	r3, r3
 80046fa:	61bb      	str	r3, [r7, #24]
  return result;
 80046fc:	69bb      	ldr	r3, [r7, #24]
 80046fe:	fab3 f383 	clz	r3, r3
 8004702:	b2db      	uxtb	r3, r3
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	6879      	ldr	r1, [r7, #4]
 8004708:	fa01 f303 	lsl.w	r3, r1, r3
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	60da      	str	r2, [r3, #12]
}
 8004712:	bf00      	nop
 8004714:	3724      	adds	r7, #36	@ 0x24
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800471e:	b480      	push	{r7}
 8004720:	b089      	sub	sp, #36	@ 0x24
 8004722:	af00      	add	r7, sp, #0
 8004724:	60f8      	str	r0, [r7, #12]
 8004726:	60b9      	str	r1, [r7, #8]
 8004728:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6a1a      	ldr	r2, [r3, #32]
 800472e:	68bb      	ldr	r3, [r7, #8]
 8004730:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	fa93 f3a3 	rbit	r3, r3
 8004738:	613b      	str	r3, [r7, #16]
  return result;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	fab3 f383 	clz	r3, r3
 8004740:	b2db      	uxtb	r3, r3
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	210f      	movs	r1, #15
 8004746:	fa01 f303 	lsl.w	r3, r1, r3
 800474a:	43db      	mvns	r3, r3
 800474c:	401a      	ands	r2, r3
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	fa93 f3a3 	rbit	r3, r3
 8004758:	61bb      	str	r3, [r7, #24]
  return result;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	fab3 f383 	clz	r3, r3
 8004760:	b2db      	uxtb	r3, r3
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	6879      	ldr	r1, [r7, #4]
 8004766:	fa01 f303 	lsl.w	r3, r1, r3
 800476a:	431a      	orrs	r2, r3
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8004770:	bf00      	nop
 8004772:	3724      	adds	r7, #36	@ 0x24
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	4770      	bx	lr

0800477c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800477c:	b480      	push	{r7}
 800477e:	b089      	sub	sp, #36	@ 0x24
 8004780:	af00      	add	r7, sp, #0
 8004782:	60f8      	str	r0, [r7, #12]
 8004784:	60b9      	str	r1, [r7, #8]
 8004786:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	0a1b      	lsrs	r3, r3, #8
 8004790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	fa93 f3a3 	rbit	r3, r3
 8004798:	613b      	str	r3, [r7, #16]
  return result;
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	fab3 f383 	clz	r3, r3
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	210f      	movs	r1, #15
 80047a6:	fa01 f303 	lsl.w	r3, r1, r3
 80047aa:	43db      	mvns	r3, r3
 80047ac:	401a      	ands	r2, r3
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	0a1b      	lsrs	r3, r3, #8
 80047b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	61bb      	str	r3, [r7, #24]
  return result;
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	fab3 f383 	clz	r3, r3
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	6879      	ldr	r1, [r7, #4]
 80047c8:	fa01 f303 	lsl.w	r3, r1, r3
 80047cc:	431a      	orrs	r2, r3
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	625a      	str	r2, [r3, #36]	@ 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80047d2:	bf00      	nop
 80047d4:	3724      	adds	r7, #36	@ 0x24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <LL_AHB1_GRP1_ForceReset>:
{
 80047de:	b480      	push	{r7}
 80047e0:	b083      	sub	sp, #12
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBRSTR, Periphs);
 80047e6:	4b06      	ldr	r3, [pc, #24]	@ (8004800 <LL_AHB1_GRP1_ForceReset+0x22>)
 80047e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047ea:	4905      	ldr	r1, [pc, #20]	@ (8004800 <LL_AHB1_GRP1_ForceReset+0x22>)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	628b      	str	r3, [r1, #40]	@ 0x28
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	40021000 	.word	0x40021000

08004804 <LL_AHB1_GRP1_ReleaseReset>:
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->AHBRSTR, Periphs);
 800480c:	4b06      	ldr	r3, [pc, #24]	@ (8004828 <LL_AHB1_GRP1_ReleaseReset+0x24>)
 800480e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	43db      	mvns	r3, r3
 8004814:	4904      	ldr	r1, [pc, #16]	@ (8004828 <LL_AHB1_GRP1_ReleaseReset+0x24>)
 8004816:	4013      	ands	r3, r2
 8004818:	628b      	str	r3, [r1, #40]	@ 0x28
}
 800481a:	bf00      	nop
 800481c:	370c      	adds	r7, #12
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40021000 	.word	0x40021000

0800482c <LL_GPIO_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are de-initialized
  *          - ERROR:   Wrong GPIO Port
  */
ErrorStatus LL_GPIO_DeInit(GPIO_TypeDef *GPIOx)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b084      	sub	sp, #16
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8004834:	2300      	movs	r3, #0
 8004836:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Force and Release reset on clock of GPIOx Port */
  if (GPIOx == GPIOA)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800483e:	d108      	bne.n	8004852 <LL_GPIO_DeInit+0x26>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004840:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8004844:	f7ff ffcb 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOA);
 8004848:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800484c:	f7ff ffda 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 8004850:	e05c      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
  else if (GPIOx == GPIOB)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a30      	ldr	r2, [pc, #192]	@ (8004918 <LL_GPIO_DeInit+0xec>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d108      	bne.n	800486c <LL_GPIO_DeInit+0x40>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOB);
 800485a:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 800485e:	f7ff ffbe 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOB);
 8004862:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8004866:	f7ff ffcd 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 800486a:	e04f      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
  else if (GPIOx == GPIOC)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a2b      	ldr	r2, [pc, #172]	@ (800491c <LL_GPIO_DeInit+0xf0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d108      	bne.n	8004886 <LL_GPIO_DeInit+0x5a>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOC);
 8004874:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004878:	f7ff ffb1 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOC);
 800487c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004880:	f7ff ffc0 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 8004884:	e042      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#if defined(GPIOD)
  else if (GPIOx == GPIOD)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a25      	ldr	r2, [pc, #148]	@ (8004920 <LL_GPIO_DeInit+0xf4>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d108      	bne.n	80048a0 <LL_GPIO_DeInit+0x74>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOD);
 800488e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8004892:	f7ff ffa4 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOD);
 8004896:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800489a:	f7ff ffb3 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 800489e:	e035      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#endif /* GPIOD */
#if defined(GPIOE)
  else if (GPIOx == GPIOE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a20      	ldr	r2, [pc, #128]	@ (8004924 <LL_GPIO_DeInit+0xf8>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <LL_GPIO_DeInit+0x8e>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOE);
 80048a8:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80048ac:	f7ff ff97 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOE);
 80048b0:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80048b4:	f7ff ffa6 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 80048b8:	e028      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#endif /* GPIOE */
#if defined(GPIOF)
  else if (GPIOx == GPIOF)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	4a1a      	ldr	r2, [pc, #104]	@ (8004928 <LL_GPIO_DeInit+0xfc>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d108      	bne.n	80048d4 <LL_GPIO_DeInit+0xa8>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOF);
 80048c2:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80048c6:	f7ff ff8a 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOF);
 80048ca:	f44f 0080 	mov.w	r0, #4194304	@ 0x400000
 80048ce:	f7ff ff99 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 80048d2:	e01b      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#endif /* GPIOF */
#if defined(GPIOG)
  else if (GPIOx == GPIOG)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a15      	ldr	r2, [pc, #84]	@ (800492c <LL_GPIO_DeInit+0x100>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d108      	bne.n	80048ee <LL_GPIO_DeInit+0xc2>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOG);
 80048dc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80048e0:	f7ff ff7d 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOG);
 80048e4:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80048e8:	f7ff ff8c 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 80048ec:	e00e      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#endif /* GPIOG */
#if defined(GPIOH)
  else if (GPIOx == GPIOH)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004930 <LL_GPIO_DeInit+0x104>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d108      	bne.n	8004908 <LL_GPIO_DeInit+0xdc>
  {
    LL_AHB1_GRP1_ForceReset(LL_AHB1_GRP1_PERIPH_GPIOH);
 80048f6:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 80048fa:	f7ff ff70 	bl	80047de <LL_AHB1_GRP1_ForceReset>
    LL_AHB1_GRP1_ReleaseReset(LL_AHB1_GRP1_PERIPH_GPIOH);
 80048fe:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8004902:	f7ff ff7f 	bl	8004804 <LL_AHB1_GRP1_ReleaseReset>
 8004906:	e001      	b.n	800490c <LL_GPIO_DeInit+0xe0>
  }
#endif /* GPIOH */
  else
  {
    status = ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	48000400 	.word	0x48000400
 800491c:	48000800 	.word	0x48000800
 8004920:	48000c00 	.word	0x48000c00
 8004924:	48001000 	.word	0x48001000
 8004928:	48001400 	.word	0x48001400
 800492c:	48001800 	.word	0x48001800
 8004930:	48001c00 	.word	0x48001c00

08004934 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
 800493c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	613b      	str	r3, [r7, #16]
  return result;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	fab3 f383 	clz	r3, r3
 8004952:	b2db      	uxtb	r3, r3
 8004954:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8004956:	e051      	b.n	80049fc <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	2101      	movs	r1, #1
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	fa01 f303 	lsl.w	r3, r1, r3
 8004964:	4013      	ands	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d043      	beq.n	80049f6 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d003      	beq.n	800497e <LL_GPIO_Init+0x4a>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	2b02      	cmp	r3, #2
 800497c:	d10e      	bne.n	800499c <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	461a      	mov	r2, r3
 8004984:	69b9      	ldr	r1, [r7, #24]
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fe6b 	bl	8004662 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	461a      	mov	r2, r3
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7ff fe4b 	bl	8004632 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	461a      	mov	r2, r3
 80049a2:	69b9      	ldr	r1, [r7, #24]
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fe8b 	bl	80046c0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d11a      	bne.n	80049e8 <LL_GPIO_Init+0xb4>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	fa93 f3a3 	rbit	r3, r3
 80049bc:	60bb      	str	r3, [r7, #8]
  return result;
 80049be:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80049c0:	fab3 f383 	clz	r3, r3
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b07      	cmp	r3, #7
 80049c8:	d807      	bhi.n	80049da <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	461a      	mov	r2, r3
 80049d0:	69b9      	ldr	r1, [r7, #24]
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff fea3 	bl	800471e <LL_GPIO_SetAFPin_0_7>
 80049d8:	e006      	b.n	80049e8 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	461a      	mov	r2, r3
 80049e0:	69b9      	ldr	r1, [r7, #24]
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7ff feca 	bl	800477c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	461a      	mov	r2, r3
 80049ee:	69b9      	ldr	r1, [r7, #24]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fdef 	bl	80045d4 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	3301      	adds	r3, #1
 80049fa:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	fa22 f303 	lsr.w	r3, r2, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1a6      	bne.n	8004958 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3720      	adds	r7, #32
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <LL_GPIO_StructInit>:
  *                          whose fields will be set to default values.
  * @retval None
  */

void LL_GPIO_StructInit(LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->Pin        = LL_GPIO_PIN_ALL;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct->Mode       = LL_GPIO_MODE_ANALOG;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2203      	movs	r2, #3
 8004a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct->Speed      = LL_GPIO_SPEED_FREQ_LOW;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct->OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	60da      	str	r2, [r3, #12]
  GPIO_InitStruct->Pull       = LL_GPIO_PULL_NO;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct->Alternate  = LL_GPIO_AF_0;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	615a      	str	r2, [r3, #20]
}
 8004a42:	bf00      	nop
 8004a44:	370c      	adds	r7, #12
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop

08004a50 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004a54:	4b05      	ldr	r3, [pc, #20]	@ (8004a6c <LL_RCC_HSE_DisableBypass+0x1c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a04      	ldr	r2, [pc, #16]	@ (8004a6c <LL_RCC_HSE_DisableBypass+0x1c>)
 8004a5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a5e:	6013      	str	r3, [r2, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000

08004a70 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8004a70:	b480      	push	{r7}
 8004a72:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004a74:	4b05      	ldr	r3, [pc, #20]	@ (8004a8c <LL_RCC_HSI_Enable+0x1c>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <LL_RCC_HSI_Enable+0x1c>)
 8004a7a:	f043 0301 	orr.w	r3, r3, #1
 8004a7e:	6013      	str	r3, [r2, #0]
}
 8004a80:	bf00      	nop
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004a94:	4b06      	ldr	r3, [pc, #24]	@ (8004ab0 <LL_RCC_HSI_IsReady+0x20>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8004abc:	4b07      	ldr	r3, [pc, #28]	@ (8004adc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4904      	ldr	r1, [pc, #16]	@ (8004adc <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	600b      	str	r3, [r1, #0]
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40021000 	.word	0x40021000

08004ae0 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8004ae4:	4b06      	ldr	r3, [pc, #24]	@ (8004b00 <LL_RCC_LSE_IsReady+0x20>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr
 8004b00:	40021000 	.word	0x40021000

08004b04 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004b04:	b480      	push	{r7}
 8004b06:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004b08:	4b04      	ldr	r3, [pc, #16]	@ (8004b1c <LL_RCC_GetSysClkSource+0x18>)
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f003 030c 	and.w	r3, r3, #12
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40021000 	.word	0x40021000

08004b20 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004b20:	b480      	push	{r7}
 8004b22:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004b24:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <LL_RCC_GetAHBPrescaler+0x18>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40021000 	.word	0x40021000

08004b3c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004b40:	4b04      	ldr	r3, [pc, #16]	@ (8004b54 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40021000 	.word	0x40021000

08004b58 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004b5c:	4b04      	ldr	r3, [pc, #16]	@ (8004b70 <LL_RCC_GetAPB2Prescaler+0x18>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	40021000 	.word	0x40021000

08004b74 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8004b7c:	4b07      	ldr	r3, [pc, #28]	@ (8004b9c <LL_RCC_GetUSARTClockSource+0x28>)
 8004b7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b80:	2103      	movs	r1, #3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	fa01 f303 	lsl.w	r3, r1, r3
 8004b88:	401a      	ands	r2, r3
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	061b      	lsls	r3, r3, #24
 8004b8e:	4313      	orrs	r3, r2
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	40021000 	.word	0x40021000

08004ba0 <LL_RCC_GetUARTClockSource>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_LSE
  *         @arg @ref LL_RCC_UART5_CLKSOURCE_HSI
  */
__STATIC_INLINE uint32_t LL_RCC_GetUARTClockSource(uint32_t UARTx)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b083      	sub	sp, #12
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, UARTx) | (UARTx >> 8U));
 8004ba8:	4b06      	ldr	r3, [pc, #24]	@ (8004bc4 <LL_RCC_GetUARTClockSource+0x24>)
 8004baa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	401a      	ands	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	0a1b      	lsrs	r3, r3, #8
 8004bb4:	4313      	orrs	r3, r2
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000

08004bc8 <LL_RCC_GetI2CClockSource>:
  *         @arg @ref LL_RCC_I2C3_CLKSOURCE_SYSCLK (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetI2CClockSource(uint32_t I2Cx)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, I2Cx) | (I2Cx << 24U));
 8004bd0:	4b06      	ldr	r3, [pc, #24]	@ (8004bec <LL_RCC_GetI2CClockSource+0x24>)
 8004bd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	401a      	ands	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	061b      	lsls	r3, r3, #24
 8004bdc:	4313      	orrs	r3, r2
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000

08004bf0 <LL_RCC_GetI2SClockSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_I2S_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_I2S_CLKSOURCE_PIN
  */
__STATIC_INLINE uint32_t LL_RCC_GetI2SClockSource(uint32_t I2Sx)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, I2Sx));
 8004bf8:	4b04      	ldr	r3, [pc, #16]	@ (8004c0c <LL_RCC_GetI2SClockSource+0x1c>)
 8004bfa:	685a      	ldr	r2, [r3, #4]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4013      	ands	r3, r2
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr
 8004c0c:	40021000 	.word	0x40021000

08004c10 <LL_RCC_GetTIMClockSource>:
  *         @arg @ref LL_RCC_TIM34_CLKSOURCE_PLL (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetTIMClockSource(uint32_t TIMx)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_TIM1SW << TIMx)) | (TIMx << 27U));
 8004c18:	4b08      	ldr	r3, [pc, #32]	@ (8004c3c <LL_RCC_GetTIMClockSource+0x2c>)
 8004c1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004c1c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	fa01 f303 	lsl.w	r3, r1, r3
 8004c26:	401a      	ands	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	06db      	lsls	r3, r3, #27
 8004c2c:	4313      	orrs	r3, r2
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	370c      	adds	r7, #12
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	40021000 	.word	0x40021000

08004c40 <LL_RCC_GetUSBClockSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL
  *         @arg @ref LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSBClockSource(uint32_t USBx)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR, USBx));
 8004c48:	4b04      	ldr	r3, [pc, #16]	@ (8004c5c <LL_RCC_GetUSBClockSource+0x1c>)
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4013      	ands	r3, r2
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	40021000 	.word	0x40021000

08004c60 <LL_RCC_GetADCClockSource>:
  *         @arg @ref LL_RCC_ADC34_CLKSRC_PLL_DIV_256 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetADCClockSource(uint32_t ADCx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
#if defined(RCC_CFGR2_ADCPRE34)
  return (uint32_t)(READ_BIT(RCC->CFGR2, ADCx) | (ADCx << 16U));
 8004c68:	4b06      	ldr	r3, [pc, #24]	@ (8004c84 <LL_RCC_GetADCClockSource+0x24>)
 8004c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	401a      	ands	r2, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	041b      	lsls	r3, r3, #16
 8004c74:	4313      	orrs	r3, r2
#else
  return (uint32_t)(READ_BIT(RCC->CFGR2, ADCx));
#endif /*RCC_CFGR2_ADCPRE34*/
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000

08004c88 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004c8c:	4b07      	ldr	r3, [pc, #28]	@ (8004cac <LL_RCC_PLL_IsReady+0x24>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c94:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40021000 	.word	0x40021000

08004cb0 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8004cb4:	4b04      	ldr	r3, [pc, #16]	@ (8004cc8 <LL_RCC_PLL_GetMainSource+0x18>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	40021000 	.word	0x40021000

08004ccc <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8004cd0:	4b04      	ldr	r3, [pc, #16]	@ (8004ce4 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	40021000 	.word	0x40021000

08004ce8 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8004cec:	4b04      	ldr	r3, [pc, #16]	@ (8004d00 <LL_RCC_PLL_GetPrediv+0x18>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf0:	f003 030f 	and.w	r3, r3, #15
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	40021000 	.word	0x40021000

08004d04 <LL_RCC_ClearResetFlags>:
  * @brief  Set RMVF bit to clear the reset flags.
  * @rmtoll CSR          RMVF          LL_RCC_ClearResetFlags
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ClearResetFlags(void)
{
 8004d04:	b480      	push	{r7}
 8004d06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8004d08:	4b05      	ldr	r3, [pc, #20]	@ (8004d20 <LL_RCC_ClearResetFlags+0x1c>)
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d0c:	4a04      	ldr	r2, [pc, #16]	@ (8004d20 <LL_RCC_ClearResetFlags+0x1c>)
 8004d0e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d12:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8004d14:	bf00      	nop
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40021000 	.word	0x40021000

08004d24 <LL_RCC_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RCC registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_RCC_DeInit(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b082      	sub	sp, #8
 8004d28:	af00      	add	r7, sp, #0
  __IO uint32_t vl_mask;

  /* Set HSION bit */
  LL_RCC_HSI_Enable();
 8004d2a:	f7ff fea1 	bl	8004a70 <LL_RCC_HSI_Enable>

  /* Wait for HSI READY bit */
  while(LL_RCC_HSI_IsReady() != 1U)
 8004d2e:	bf00      	nop
 8004d30:	f7ff feae 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d1fa      	bne.n	8004d30 <LL_RCC_DeInit+0xc>
  {}

  /* Set HSITRIM bits to the reset value*/
  LL_RCC_HSI_SetCalibTrimming(0x10U);
 8004d3a:	2010      	movs	r0, #16
 8004d3c:	f7ff feba 	bl	8004ab4 <LL_RCC_HSI_SetCalibTrimming>

  /* Reset SW, HPRE, PPRE and MCOSEL bits */
  vl_mask = 0xFFFFFFFFU;
 8004d40:	f04f 33ff 	mov.w	r3, #4294967295
 8004d44:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(vl_mask, (RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE1 |\
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4b1c      	ldr	r3, [pc, #112]	@ (8004dbc <LL_RCC_DeInit+0x98>)
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	607b      	str	r3, [r7, #4]
                      RCC_CFGR_PPRE2 | RCC_CFGR_MCOSEL));
 
  /* Write new value in CFGR register */
  LL_RCC_WriteReg(CFGR, vl_mask);
 8004d4e:	4a1c      	ldr	r2, [pc, #112]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6053      	str	r3, [r2, #4]

  /* Wait till system clock source is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8004d54:	bf00      	nop
 8004d56:	f7ff fed5 	bl	8004b04 <LL_RCC_GetSysClkSource>
 8004d5a:	4603      	mov	r3, r0
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d1fa      	bne.n	8004d56 <LL_RCC_DeInit+0x32>
  {}

  /* Read CR register */
  vl_mask = LL_RCC_ReadReg(CR);
 8004d60:	4b17      	ldr	r3, [pc, #92]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	607b      	str	r3, [r7, #4]
  
  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(vl_mask, (RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON));
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	f023 7384 	bic.w	r3, r3, #17301504	@ 0x1080000
 8004d6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d70:	607b      	str	r3, [r7, #4]
 
   /* Write new value in CR register */
  LL_RCC_WriteReg(CR, vl_mask);
 8004d72:	4a13      	ldr	r2, [pc, #76]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6013      	str	r3, [r2, #0]

  /* Wait for PLL READY bit to be reset */
  while(LL_RCC_PLL_IsReady() != 0U)
 8004d78:	bf00      	nop
 8004d7a:	f7ff ff85 	bl	8004c88 <LL_RCC_PLL_IsReady>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1fa      	bne.n	8004d7a <LL_RCC_DeInit+0x56>
  {}

  /* Reset HSEBYP bit */
  LL_RCC_HSE_DisableBypass();
 8004d84:	f7ff fe64 	bl	8004a50 <LL_RCC_HSE_DisableBypass>

  /* Reset CFGR register */
  LL_RCC_WriteReg(CFGR, 0x00000000U);
 8004d88:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  LL_RCC_WriteReg(CFGR2, 0x00000000U);
 8004d8e:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Reset CFGR3 register */
  LL_RCC_WriteReg(CFGR3, 0x00000000U);
 8004d94:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear pending flags */
  vl_mask = (LL_RCC_CIR_LSIRDYC | LL_RCC_CIR_LSERDYC | LL_RCC_CIR_HSIRDYC |\
 8004d9a:	f44f 031f 	mov.w	r3, #10420224	@ 0x9f0000
 8004d9e:	607b      	str	r3, [r7, #4]
             LL_RCC_CIR_HSERDYC | LL_RCC_CIR_PLLRDYC | LL_RCC_CIR_CSSC);

  /* Write new value in CIR register */
  LL_RCC_WriteReg(CIR, vl_mask);
 8004da0:	4a07      	ldr	r2, [pc, #28]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6093      	str	r3, [r2, #8]

  /* Disable all interrupts */
  LL_RCC_WriteReg(CIR, 0x00000000U);
 8004da6:	4b06      	ldr	r3, [pc, #24]	@ (8004dc0 <LL_RCC_DeInit+0x9c>)
 8004da8:	2200      	movs	r2, #0
 8004daa:	609a      	str	r2, [r3, #8]

  /* Clear reset flags */
  LL_RCC_ClearResetFlags();
 8004dac:	f7ff ffaa 	bl	8004d04 <LL_RCC_ClearResetFlags>

  return SUCCESS;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3708      	adds	r7, #8
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bd80      	pop	{r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	f8ffc00c 	.word	0xf8ffc00c
 8004dc0:	40021000 	.word	0x40021000

08004dc4 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b082      	sub	sp, #8
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004dcc:	f000 fb1e 	bl	800540c <RCC_GetSystemClockFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fb3c 	bl	8005458 <RCC_GetHCLKClockFreq>
 8004de0:	4602      	mov	r2, r0
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fb4a 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 8004df0:	4602      	mov	r2, r0
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f000 fb56 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 8004e00:	4602      	mov	r2, r0
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	60da      	str	r2, [r3, #12]
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b084      	sub	sp, #16
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d130      	bne.n	8004e82 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff fea7 	bl	8004b74 <LL_RCC_GetUSARTClockSource>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d00a      	beq.n	8004e42 <LL_RCC_GetUSARTClockFreq+0x34>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d819      	bhi.n	8004e64 <LL_RCC_GetUSARTClockFreq+0x56>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <LL_RCC_GetUSARTClockFreq+0x2c>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d00c      	beq.n	8004e52 <LL_RCC_GetUSARTClockFreq+0x44>
 8004e38:	e014      	b.n	8004e64 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004e3a:	f000 fae7 	bl	800540c <RCC_GetSystemClockFreq>
 8004e3e:	60f8      	str	r0, [r7, #12]
        break;
 8004e40:	e01f      	b.n	8004e82 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004e42:	f7ff fe25 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d017      	beq.n	8004e7c <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8004e4c:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <LL_RCC_GetUSARTClockFreq+0x15e>)
 8004e4e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e50:	e014      	b.n	8004e7c <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004e52:	f7ff fe45 	bl	8004ae0 <LL_RCC_LSE_IsReady>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d011      	beq.n	8004e80 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8004e5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e60:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004e62:	e00d      	b.n	8004e80 <LL_RCC_GetUSARTClockFreq+0x72>
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004e64:	f000 fad2 	bl	800540c <RCC_GetSystemClockFreq>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 faf4 	bl	8005458 <RCC_GetHCLKClockFreq>
 8004e70:	4603      	mov	r3, r0
 8004e72:	4618      	mov	r0, r3
 8004e74:	f000 fb1a 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 8004e78:	60f8      	str	r0, [r7, #12]
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8004e7a:	e002      	b.n	8004e82 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8004e7c:	bf00      	nop
 8004e7e:	e000      	b.n	8004e82 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8004e80:	bf00      	nop
    }
  }
#endif /* RCC_CFGR3_USART1SW  */

#if defined(RCC_CFGR3_USART2SW)
  if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d134      	bne.n	8004ef2 <LL_RCC_GetUSARTClockFreq+0xe4>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f7ff fe73 	bl	8004b74 <LL_RCC_GetUSARTClockSource>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	4a37      	ldr	r2, [pc, #220]	@ (8004f70 <LL_RCC_GetUSARTClockFreq+0x162>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d00d      	beq.n	8004eb2 <LL_RCC_GetUSARTClockFreq+0xa4>
 8004e96:	4a36      	ldr	r2, [pc, #216]	@ (8004f70 <LL_RCC_GetUSARTClockFreq+0x162>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d81b      	bhi.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0xc6>
 8004e9c:	4a35      	ldr	r2, [pc, #212]	@ (8004f74 <LL_RCC_GetUSARTClockFreq+0x166>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d003      	beq.n	8004eaa <LL_RCC_GetUSARTClockFreq+0x9c>
 8004ea2:	4a35      	ldr	r2, [pc, #212]	@ (8004f78 <LL_RCC_GetUSARTClockFreq+0x16a>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00c      	beq.n	8004ec2 <LL_RCC_GetUSARTClockFreq+0xb4>
 8004ea8:	e014      	b.n	8004ed4 <LL_RCC_GetUSARTClockFreq+0xc6>
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004eaa:	f000 faaf 	bl	800540c <RCC_GetSystemClockFreq>
 8004eae:	60f8      	str	r0, [r7, #12]
        break;
 8004eb0:	e01f      	b.n	8004ef2 <LL_RCC_GetUSARTClockFreq+0xe4>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004eb2:	f7ff fded 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d017      	beq.n	8004eec <LL_RCC_GetUSARTClockFreq+0xde>
        {
          usart_frequency = HSI_VALUE;
 8004ebc:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <LL_RCC_GetUSARTClockFreq+0x15e>)
 8004ebe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ec0:	e014      	b.n	8004eec <LL_RCC_GetUSARTClockFreq+0xde>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004ec2:	f7ff fe0d 	bl	8004ae0 <LL_RCC_LSE_IsReady>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d011      	beq.n	8004ef0 <LL_RCC_GetUSARTClockFreq+0xe2>
        {
          usart_frequency = LSE_VALUE;
 8004ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ed0:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004ed2:	e00d      	b.n	8004ef0 <LL_RCC_GetUSARTClockFreq+0xe2>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004ed4:	f000 fa9a 	bl	800540c <RCC_GetSystemClockFreq>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 fabc 	bl	8005458 <RCC_GetHCLKClockFreq>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 face 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 8004ee8:	60f8      	str	r0, [r7, #12]
        break;
 8004eea:	e002      	b.n	8004ef2 <LL_RCC_GetUSARTClockFreq+0xe4>
        break;
 8004eec:	bf00      	nop
 8004eee:	e000      	b.n	8004ef2 <LL_RCC_GetUSARTClockFreq+0xe4>
        break;
 8004ef0:	bf00      	nop
    }
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2b12      	cmp	r3, #18
 8004ef6:	d134      	bne.n	8004f62 <LL_RCC_GetUSARTClockFreq+0x154>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f7ff fe3b 	bl	8004b74 <LL_RCC_GetUSARTClockSource>
 8004efe:	4603      	mov	r3, r0
 8004f00:	4a1e      	ldr	r2, [pc, #120]	@ (8004f7c <LL_RCC_GetUSARTClockFreq+0x16e>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <LL_RCC_GetUSARTClockFreq+0x114>
 8004f06:	4a1d      	ldr	r2, [pc, #116]	@ (8004f7c <LL_RCC_GetUSARTClockFreq+0x16e>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d81b      	bhi.n	8004f44 <LL_RCC_GetUSARTClockFreq+0x136>
 8004f0c:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <LL_RCC_GetUSARTClockFreq+0x172>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d003      	beq.n	8004f1a <LL_RCC_GetUSARTClockFreq+0x10c>
 8004f12:	4a1c      	ldr	r2, [pc, #112]	@ (8004f84 <LL_RCC_GetUSARTClockFreq+0x176>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d00c      	beq.n	8004f32 <LL_RCC_GetUSARTClockFreq+0x124>
 8004f18:	e014      	b.n	8004f44 <LL_RCC_GetUSARTClockFreq+0x136>
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004f1a:	f000 fa77 	bl	800540c <RCC_GetSystemClockFreq>
 8004f1e:	60f8      	str	r0, [r7, #12]
        break;
 8004f20:	e01f      	b.n	8004f62 <LL_RCC_GetUSARTClockFreq+0x154>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004f22:	f7ff fdb5 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d017      	beq.n	8004f5c <LL_RCC_GetUSARTClockFreq+0x14e>
        {
          usart_frequency = HSI_VALUE;
 8004f2c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f6c <LL_RCC_GetUSARTClockFreq+0x15e>)
 8004f2e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f30:	e014      	b.n	8004f5c <LL_RCC_GetUSARTClockFreq+0x14e>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004f32:	f7ff fdd5 	bl	8004ae0 <LL_RCC_LSE_IsReady>
 8004f36:	4603      	mov	r3, r0
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d011      	beq.n	8004f60 <LL_RCC_GetUSARTClockFreq+0x152>
        {
          usart_frequency = LSE_VALUE;
 8004f3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f40:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004f42:	e00d      	b.n	8004f60 <LL_RCC_GetUSARTClockFreq+0x152>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004f44:	f000 fa62 	bl	800540c <RCC_GetSystemClockFreq>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa84 	bl	8005458 <RCC_GetHCLKClockFreq>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fa96 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 8004f58:	60f8      	str	r0, [r7, #12]
        break;
 8004f5a:	e002      	b.n	8004f62 <LL_RCC_GetUSARTClockFreq+0x154>
        break;
 8004f5c:	bf00      	nop
 8004f5e:	e000      	b.n	8004f62 <LL_RCC_GetUSARTClockFreq+0x154>
        break;
 8004f60:	bf00      	nop
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8004f62:	68fb      	ldr	r3, [r7, #12]
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	007a1200 	.word	0x007a1200
 8004f70:	10030000 	.word	0x10030000
 8004f74:	10010000 	.word	0x10010000
 8004f78:	10020000 	.word	0x10020000
 8004f7c:	120c0000 	.word	0x120c0000
 8004f80:	12040000 	.word	0x12040000
 8004f84:	12080000 	.word	0x12080000

08004f88 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(UART4)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004f9a:	d134      	bne.n	8005006 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff fdff 	bl	8004ba0 <LL_RCC_GetUARTClockSource>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	4a37      	ldr	r2, [pc, #220]	@ (8005084 <LL_RCC_GetUARTClockFreq+0xfc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00d      	beq.n	8004fc6 <LL_RCC_GetUARTClockFreq+0x3e>
 8004faa:	4a36      	ldr	r2, [pc, #216]	@ (8005084 <LL_RCC_GetUARTClockFreq+0xfc>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d81b      	bhi.n	8004fe8 <LL_RCC_GetUARTClockFreq+0x60>
 8004fb0:	4a35      	ldr	r2, [pc, #212]	@ (8005088 <LL_RCC_GetUARTClockFreq+0x100>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <LL_RCC_GetUARTClockFreq+0x36>
 8004fb6:	4a35      	ldr	r2, [pc, #212]	@ (800508c <LL_RCC_GetUARTClockFreq+0x104>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d00c      	beq.n	8004fd6 <LL_RCC_GetUARTClockFreq+0x4e>
 8004fbc:	e014      	b.n	8004fe8 <LL_RCC_GetUARTClockFreq+0x60>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8004fbe:	f000 fa25 	bl	800540c <RCC_GetSystemClockFreq>
 8004fc2:	60f8      	str	r0, [r7, #12]
        break;
 8004fc4:	e01f      	b.n	8005006 <LL_RCC_GetUARTClockFreq+0x7e>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8004fc6:	f7ff fd63 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d017      	beq.n	8005000 <LL_RCC_GetUARTClockFreq+0x78>
        {
          uart_frequency = HSI_VALUE;
 8004fd0:	4b2f      	ldr	r3, [pc, #188]	@ (8005090 <LL_RCC_GetUARTClockFreq+0x108>)
 8004fd2:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004fd4:	e014      	b.n	8005000 <LL_RCC_GetUARTClockFreq+0x78>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8004fd6:	f7ff fd83 	bl	8004ae0 <LL_RCC_LSE_IsReady>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d011      	beq.n	8005004 <LL_RCC_GetUARTClockFreq+0x7c>
        {
          uart_frequency = LSE_VALUE;
 8004fe0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fe4:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004fe6:	e00d      	b.n	8005004 <LL_RCC_GetUARTClockFreq+0x7c>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004fe8:	f000 fa10 	bl	800540c <RCC_GetSystemClockFreq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fa32 	bl	8005458 <RCC_GetHCLKClockFreq>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f000 fa44 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 8004ffc:	60f8      	str	r0, [r7, #12]
        break;
 8004ffe:	e002      	b.n	8005006 <LL_RCC_GetUARTClockFreq+0x7e>
        break;
 8005000:	bf00      	nop
 8005002:	e000      	b.n	8005006 <LL_RCC_GetUARTClockFreq+0x7e>
        break;
 8005004:	bf00      	nop
    }
  }
#endif /* UART4 */

#if defined(UART5)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800500c:	d134      	bne.n	8005078 <LL_RCC_GetUARTClockFreq+0xf0>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fdc6 	bl	8004ba0 <LL_RCC_GetUARTClockSource>
 8005014:	4603      	mov	r3, r0
 8005016:	4a1f      	ldr	r2, [pc, #124]	@ (8005094 <LL_RCC_GetUARTClockFreq+0x10c>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00d      	beq.n	8005038 <LL_RCC_GetUARTClockFreq+0xb0>
 800501c:	4a1d      	ldr	r2, [pc, #116]	@ (8005094 <LL_RCC_GetUARTClockFreq+0x10c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d81b      	bhi.n	800505a <LL_RCC_GetUARTClockFreq+0xd2>
 8005022:	4a1d      	ldr	r2, [pc, #116]	@ (8005098 <LL_RCC_GetUARTClockFreq+0x110>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <LL_RCC_GetUARTClockFreq+0xa8>
 8005028:	4a1c      	ldr	r2, [pc, #112]	@ (800509c <LL_RCC_GetUARTClockFreq+0x114>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00c      	beq.n	8005048 <LL_RCC_GetUARTClockFreq+0xc0>
 800502e:	e014      	b.n	800505a <LL_RCC_GetUARTClockFreq+0xd2>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8005030:	f000 f9ec 	bl	800540c <RCC_GetSystemClockFreq>
 8005034:	60f8      	str	r0, [r7, #12]
        break;
 8005036:	e01f      	b.n	8005078 <LL_RCC_GetUARTClockFreq+0xf0>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8005038:	f7ff fd2a 	bl	8004a90 <LL_RCC_HSI_IsReady>
 800503c:	4603      	mov	r3, r0
 800503e:	2b00      	cmp	r3, #0
 8005040:	d017      	beq.n	8005072 <LL_RCC_GetUARTClockFreq+0xea>
        {
          uart_frequency = HSI_VALUE;
 8005042:	4b13      	ldr	r3, [pc, #76]	@ (8005090 <LL_RCC_GetUARTClockFreq+0x108>)
 8005044:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005046:	e014      	b.n	8005072 <LL_RCC_GetUARTClockFreq+0xea>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8005048:	f7ff fd4a 	bl	8004ae0 <LL_RCC_LSE_IsReady>
 800504c:	4603      	mov	r3, r0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d011      	beq.n	8005076 <LL_RCC_GetUARTClockFreq+0xee>
        {
          uart_frequency = LSE_VALUE;
 8005052:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005056:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005058:	e00d      	b.n	8005076 <LL_RCC_GetUARTClockFreq+0xee>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
      default:
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800505a:	f000 f9d7 	bl	800540c <RCC_GetSystemClockFreq>
 800505e:	4603      	mov	r3, r0
 8005060:	4618      	mov	r0, r3
 8005062:	f000 f9f9 	bl	8005458 <RCC_GetHCLKClockFreq>
 8005066:	4603      	mov	r3, r0
 8005068:	4618      	mov	r0, r3
 800506a:	f000 fa0b 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 800506e:	60f8      	str	r0, [r7, #12]
        break;
 8005070:	e002      	b.n	8005078 <LL_RCC_GetUARTClockFreq+0xf0>
        break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <LL_RCC_GetUARTClockFreq+0xf0>
        break;
 8005076:	bf00      	nop
    }
  }
#endif /* UART5 */

  return uart_frequency;
 8005078:	68fb      	ldr	r3, [r7, #12]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	00303000 	.word	0x00303000
 8005088:	00103000 	.word	0x00103000
 800508c:	00203000 	.word	0x00203000
 8005090:	007a1200 	.word	0x007a1200
 8005094:	00c0c000 	.word	0x00c0c000
 8005098:	0040c000 	.word	0x0040c000
 800509c:	0080c000 	.word	0x0080c000

080050a0 <LL_RCC_GetI2CClockFreq>:
  *         (*) value not defined in all devices
  * @retval I2C clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that HSI oscillator is not ready
  */
uint32_t LL_RCC_GetI2CClockFreq(uint32_t I2CxSource)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t i2c_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80050a8:	2300      	movs	r3, #0
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_I2C_CLKSOURCE(I2CxSource));

  /* I2C1 CLK clock frequency */
  if (I2CxSource == LL_RCC_I2C1_CLKSOURCE)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b10      	cmp	r3, #16
 80050b0:	d112      	bne.n	80050d8 <LL_RCC_GetI2CClockFreq+0x38>
  {
    switch (LL_RCC_GetI2CClockSource(I2CxSource))
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f7ff fd88 	bl	8004bc8 <LL_RCC_GetI2CClockSource>
 80050b8:	4603      	mov	r3, r0
 80050ba:	4a20      	ldr	r2, [pc, #128]	@ (800513c <LL_RCC_GetI2CClockFreq+0x9c>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d103      	bne.n	80050c8 <LL_RCC_GetI2CClockFreq+0x28>
    {
      case LL_RCC_I2C1_CLKSOURCE_SYSCLK: /* I2C1 Clock is System Clock */
        i2c_frequency = RCC_GetSystemClockFreq();
 80050c0:	f000 f9a4 	bl	800540c <RCC_GetSystemClockFreq>
 80050c4:	60f8      	str	r0, [r7, #12]
        break;
 80050c6:	e007      	b.n	80050d8 <LL_RCC_GetI2CClockFreq+0x38>

      case LL_RCC_I2C1_CLKSOURCE_HSI:    /* I2C1 Clock is HSI Osc. */
      default:
        if (LL_RCC_HSI_IsReady())
 80050c8:	f7ff fce2 	bl	8004a90 <LL_RCC_HSI_IsReady>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <LL_RCC_GetI2CClockFreq+0x36>
        {
          i2c_frequency = HSI_VALUE;
 80050d2:	4b1b      	ldr	r3, [pc, #108]	@ (8005140 <LL_RCC_GetI2CClockFreq+0xa0>)
 80050d4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80050d6:	bf00      	nop
    }
  }

#if defined(RCC_CFGR3_I2C2SW)
  /* I2C2 CLK clock frequency */
  if (I2CxSource == LL_RCC_I2C2_CLKSOURCE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b20      	cmp	r3, #32
 80050dc:	d112      	bne.n	8005104 <LL_RCC_GetI2CClockFreq+0x64>
  {
    switch (LL_RCC_GetI2CClockSource(I2CxSource))
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f7ff fd72 	bl	8004bc8 <LL_RCC_GetI2CClockSource>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a17      	ldr	r2, [pc, #92]	@ (8005144 <LL_RCC_GetI2CClockFreq+0xa4>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d103      	bne.n	80050f4 <LL_RCC_GetI2CClockFreq+0x54>
    {
      case LL_RCC_I2C2_CLKSOURCE_SYSCLK: /* I2C2 Clock is System Clock */
        i2c_frequency = RCC_GetSystemClockFreq();
 80050ec:	f000 f98e 	bl	800540c <RCC_GetSystemClockFreq>
 80050f0:	60f8      	str	r0, [r7, #12]
        break;
 80050f2:	e007      	b.n	8005104 <LL_RCC_GetI2CClockFreq+0x64>
	
      case LL_RCC_I2C2_CLKSOURCE_HSI:    /* I2C2 Clock is HSI Osc. */
      default:
        if (LL_RCC_HSI_IsReady())
 80050f4:	f7ff fccc 	bl	8004a90 <LL_RCC_HSI_IsReady>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <LL_RCC_GetI2CClockFreq+0x62>
        {
          i2c_frequency = HSI_VALUE;
 80050fe:	4b10      	ldr	r3, [pc, #64]	@ (8005140 <LL_RCC_GetI2CClockFreq+0xa0>)
 8005100:	60fb      	str	r3, [r7, #12]
        }
        break;
 8005102:	bf00      	nop
  }
#endif /*RCC_CFGR3_I2C2SW*/

#if defined(RCC_CFGR3_I2C3SW)
  /* I2C3 CLK clock frequency */
  if (I2CxSource == LL_RCC_I2C3_CLKSOURCE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d112      	bne.n	8005130 <LL_RCC_GetI2CClockFreq+0x90>
  {
    switch (LL_RCC_GetI2CClockSource(I2CxSource))
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f7ff fd5c 	bl	8004bc8 <LL_RCC_GetI2CClockSource>
 8005110:	4603      	mov	r3, r0
 8005112:	4a0d      	ldr	r2, [pc, #52]	@ (8005148 <LL_RCC_GetI2CClockFreq+0xa8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d103      	bne.n	8005120 <LL_RCC_GetI2CClockFreq+0x80>
    {
      case LL_RCC_I2C3_CLKSOURCE_SYSCLK: /* I2C3 Clock is System Clock */
        i2c_frequency = RCC_GetSystemClockFreq();
 8005118:	f000 f978 	bl	800540c <RCC_GetSystemClockFreq>
 800511c:	60f8      	str	r0, [r7, #12]
        break;
 800511e:	e007      	b.n	8005130 <LL_RCC_GetI2CClockFreq+0x90>

      case LL_RCC_I2C3_CLKSOURCE_HSI:    /* I2C3 Clock is HSI Osc. */
      default:
        if (LL_RCC_HSI_IsReady())
 8005120:	f7ff fcb6 	bl	8004a90 <LL_RCC_HSI_IsReady>
 8005124:	4603      	mov	r3, r0
 8005126:	2b00      	cmp	r3, #0
 8005128:	d001      	beq.n	800512e <LL_RCC_GetI2CClockFreq+0x8e>
        {
          i2c_frequency = HSI_VALUE;
 800512a:	4b05      	ldr	r3, [pc, #20]	@ (8005140 <LL_RCC_GetI2CClockFreq+0xa0>)
 800512c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800512e:	bf00      	nop
    }
  }
#endif /*RCC_CFGR3_I2C3SW*/

  return i2c_frequency;
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	10000010 	.word	0x10000010
 8005140:	007a1200 	.word	0x007a1200
 8005144:	20000020 	.word	0x20000020
 8005148:	40000040 	.word	0x40000040

0800514c <LL_RCC_GetI2SClockFreq>:
  * @param  I2SxSource This parameter can be one of the following values:
  *         @arg @ref LL_RCC_I2S_CLKSOURCE
  * @retval I2S clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NA indicates that external clock is used */
uint32_t LL_RCC_GetI2SClockFreq(uint32_t I2SxSource)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t i2s_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_I2S_CLKSOURCE(I2SxSource));

  /* I2S1CLK clock frequency */
  switch (LL_RCC_GetI2SClockSource(I2SxSource))
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f7ff fd49 	bl	8004bf0 <LL_RCC_GetI2SClockSource>
 800515e:	4603      	mov	r3, r0
 8005160:	2b00      	cmp	r3, #0
 8005162:	d003      	beq.n	800516c <LL_RCC_GetI2SClockFreq+0x20>
 8005164:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005168:	d004      	beq.n	8005174 <LL_RCC_GetI2SClockFreq+0x28>
 800516a:	e006      	b.n	800517a <LL_RCC_GetI2SClockFreq+0x2e>
  {
    case LL_RCC_I2S_CLKSOURCE_SYSCLK: /*!< System clock selected as I2S clock source */
      i2s_frequency = RCC_GetSystemClockFreq();
 800516c:	f000 f94e 	bl	800540c <RCC_GetSystemClockFreq>
 8005170:	60f8      	str	r0, [r7, #12]
      break;
 8005172:	e006      	b.n	8005182 <LL_RCC_GetI2SClockFreq+0x36>

    /* If an external I2S clock has to be used, LL_RCC_SetI2SClockSource(LL_RCC_I2S_CLKSOURCE_PIN)
       have to be called in the main after calling SystemClock_Config() */
    case LL_RCC_I2S_CLKSOURCE_PIN:    /*!< External clock selected as I2S clock source */
      i2s_frequency = EXTERNAL_CLOCK_VALUE;
 8005174:	4b05      	ldr	r3, [pc, #20]	@ (800518c <LL_RCC_GetI2SClockFreq+0x40>)
 8005176:	60fb      	str	r3, [r7, #12]
      break;
 8005178:	e003      	b.n	8005182 <LL_RCC_GetI2SClockFreq+0x36>
    default:
      i2s_frequency = LL_RCC_PERIPH_FREQUENCY_NA;
 800517a:	f04f 33ff 	mov.w	r3, #4294967295
 800517e:	60fb      	str	r3, [r7, #12]
      break;
 8005180:	bf00      	nop
  }

  return i2s_frequency;
 8005182:	68fb      	ldr	r3, [r7, #12]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	007a1200 	.word	0x007a1200

08005190 <LL_RCC_GetUSBClockFreq>:
  * @retval USB clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI48) or PLL is not ready
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NA indicates that no clock source selected
  */
uint32_t LL_RCC_GetUSBClockFreq(uint32_t USBxSource)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b084      	sub	sp, #16
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
  uint32_t usb_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005198:	2300      	movs	r3, #0
 800519a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USB_CLKSOURCE(USBxSource));

  /* USBCLK clock frequency */
  switch (LL_RCC_GetUSBClockSource(USBxSource))
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7ff fd4f 	bl	8004c40 <LL_RCC_GetUSBClockSource>
 80051a2:	4603      	mov	r3, r0
 80051a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80051a8:	d108      	bne.n	80051bc <LL_RCC_GetUSBClockFreq+0x2c>
  {
    case LL_RCC_USB_CLKSOURCE_PLL:        /* PLL clock used as USB clock source */
      if (LL_RCC_PLL_IsReady())
 80051aa:	f7ff fd6d 	bl	8004c88 <LL_RCC_PLL_IsReady>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d011      	beq.n	80051d8 <LL_RCC_GetUSBClockFreq+0x48>
      {
        usb_frequency = RCC_PLL_GetFreqDomain_SYS();
 80051b4:	f000 f98e 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 80051b8:	60f8      	str	r0, [r7, #12]
      }
      break;
 80051ba:	e00d      	b.n	80051d8 <LL_RCC_GetUSBClockFreq+0x48>

    case LL_RCC_USB_CLKSOURCE_PLL_DIV_1_5:        /* PLL clock used as USB clock source */
    default:
      if (LL_RCC_PLL_IsReady())
 80051bc:	f7ff fd64 	bl	8004c88 <LL_RCC_PLL_IsReady>
 80051c0:	4603      	mov	r3, r0
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <LL_RCC_GetUSBClockFreq+0x4c>
      {
        usb_frequency = (RCC_PLL_GetFreqDomain_SYS() * 3U) / 2U;
 80051c6:	f000 f985 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
      }
      break;
 80051d6:	e001      	b.n	80051dc <LL_RCC_GetUSBClockFreq+0x4c>
      break;
 80051d8:	bf00      	nop
 80051da:	e000      	b.n	80051de <LL_RCC_GetUSBClockFreq+0x4e>
      break;
 80051dc:	bf00      	nop
  }

  return usb_frequency;
 80051de:	68fb      	ldr	r3, [r7, #12]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3710      	adds	r7, #16
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <LL_RCC_GetADCClockFreq>:
  *
  *         (*) value not defined in all devices
  * @retval ADC clock frequency (in Hz)
  */
uint32_t LL_RCC_GetADCClockFreq(uint32_t ADCxSource)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b086      	sub	sp, #24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint32_t adc_prescaler = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	613b      	str	r3, [r7, #16]
  uint32_t adc_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80051f4:	2300      	movs	r3, #0
 80051f6:	617b      	str	r3, [r7, #20]

  /* Check parameter */
  assert_param(IS_LL_RCC_ADC_CLKSOURCE(ADCxSource));

  /* Get ADC prescaler */
  adc_prescaler = LL_RCC_GetADCClockSource(ADCxSource);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff fd31 	bl	8004c60 <LL_RCC_GetADCClockSource>
 80051fe:	6138      	str	r0, [r7, #16]
#if defined(RCC_CFGR_ADCPRE)
  /* ADC frequency = PCLK2 frequency / ADC prescaler (2, 4, 6 or 8) */
  adc_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()))
                  / (((adc_prescaler >> POSITION_VAL(ADCxSource)) + 1U) * 2U);
#else
  if ((adc_prescaler & 0x0000FFFFU) == ((uint32_t)0x00000000U))
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d107      	bne.n	8005218 <LL_RCC_GetADCClockFreq+0x30>
  {
    /* ADC frequency = HCLK frequency */
    adc_frequency = RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq());
 8005208:	f000 f900 	bl	800540c <RCC_GetSystemClockFreq>
 800520c:	4603      	mov	r3, r0
 800520e:	4618      	mov	r0, r3
 8005210:	f000 f922 	bl	8005458 <RCC_GetHCLKClockFreq>
 8005214:	6178      	str	r0, [r7, #20]
 8005216:	e01f      	b.n	8005258 <LL_RCC_GetADCClockFreq+0x70>
  }
  else
  {
    /* ADC frequency = PCLK2 frequency / ADC prescaler (from 1 to 256) */
    adc_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()))
 8005218:	f000 f8f8 	bl	800540c <RCC_GetSystemClockFreq>
 800521c:	4603      	mov	r3, r0
 800521e:	4618      	mov	r0, r3
 8005220:	f000 f91a 	bl	8005458 <RCC_GetHCLKClockFreq>
 8005224:	4603      	mov	r3, r0
 8005226:	4618      	mov	r0, r3
 8005228:	f000 f940 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 800522c:	4601      	mov	r1, r0
                    / (aADCPrescTable[((adc_prescaler & 0x0000FFFFU) >> POSITION_VAL(ADCxSource)) & 0xFU]);
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	b29b      	uxth	r3, r3
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	60fa      	str	r2, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	fa92 f2a2 	rbit	r2, r2
 800523c:	60ba      	str	r2, [r7, #8]
  return result;
 800523e:	68ba      	ldr	r2, [r7, #8]
 8005240:	fab2 f282 	clz	r2, r2
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	40d3      	lsrs	r3, r2
 8005248:	f003 030f 	and.w	r3, r3, #15
 800524c:	4a05      	ldr	r2, [pc, #20]	@ (8005264 <LL_RCC_GetADCClockFreq+0x7c>)
 800524e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    adc_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()))
 8005252:	fbb1 f3f3 	udiv	r3, r1, r3
 8005256:	617b      	str	r3, [r7, #20]
  }
#endif /* RCC_CFGR_ADCPRE */

  return adc_frequency;
 8005258:	697b      	ldr	r3, [r7, #20]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	08005a7c 	.word	0x08005a7c

08005268 <LL_RCC_GetTIMClockFreq>:
  *
  *         (*) value not defined in all devices
  * @retval TIM clock frequency (in Hz)
  */
uint32_t LL_RCC_GetTIMClockFreq(uint32_t TIMxSource)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b084      	sub	sp, #16
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  uint32_t tim_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_TIM_CLKSOURCE(TIMxSource));

  if (TIMxSource == LL_RCC_TIM1_CLKSOURCE)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d114      	bne.n	80052a4 <LL_RCC_GetTIMClockFreq+0x3c>
  {
    /* TIM1CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM1_CLKSOURCE) == LL_RCC_TIM1_CLKSOURCE_PCLK2)
 800527a:	2000      	movs	r0, #0
 800527c:	f7ff fcc8 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d10b      	bne.n	800529e <LL_RCC_GetTIMClockFreq+0x36>
    {
      /* PCLK2 used as TIM1 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005286:	f000 f8c1 	bl	800540c <RCC_GetSystemClockFreq>
 800528a:	4603      	mov	r3, r0
 800528c:	4618      	mov	r0, r3
 800528e:	f000 f8e3 	bl	8005458 <RCC_GetHCLKClockFreq>
 8005292:	4603      	mov	r3, r0
 8005294:	4618      	mov	r0, r3
 8005296:	f000 f909 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	e002      	b.n	80052a4 <LL_RCC_GetTIMClockFreq+0x3c>
    }
    else /* LL_RCC_TIM1_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM1 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 800529e:	f000 f919 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 80052a2:	60f8      	str	r0, [r7, #12]
    }
  }

#if defined(RCC_CFGR3_TIM8SW)
  if (TIMxSource == LL_RCC_TIM8_CLKSOURCE)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d115      	bne.n	80052d6 <LL_RCC_GetTIMClockFreq+0x6e>
  {
    /* TIM8CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM8_CLKSOURCE) == LL_RCC_TIM8_CLKSOURCE_PCLK2)
 80052aa:	2001      	movs	r0, #1
 80052ac:	f7ff fcb0 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052b6:	d10b      	bne.n	80052d0 <LL_RCC_GetTIMClockFreq+0x68>
    {
      /* PCLK2 used as TIM8 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80052b8:	f000 f8a8 	bl	800540c <RCC_GetSystemClockFreq>
 80052bc:	4603      	mov	r3, r0
 80052be:	4618      	mov	r0, r3
 80052c0:	f000 f8ca 	bl	8005458 <RCC_GetHCLKClockFreq>
 80052c4:	4603      	mov	r3, r0
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f8f0 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 80052cc:	60f8      	str	r0, [r7, #12]
 80052ce:	e002      	b.n	80052d6 <LL_RCC_GetTIMClockFreq+0x6e>
    }
    else /* LL_RCC_TIM8_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM8 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 80052d0:	f000 f900 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 80052d4:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM8SW*/

#if defined(RCC_CFGR3_TIM15SW)
  if (TIMxSource == LL_RCC_TIM15_CLKSOURCE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d115      	bne.n	8005308 <LL_RCC_GetTIMClockFreq+0xa0>
  {
    /* TIM15CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM15_CLKSOURCE) == LL_RCC_TIM15_CLKSOURCE_PCLK2)
 80052dc:	2002      	movs	r0, #2
 80052de:	f7ff fc97 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 80052e2:	4603      	mov	r3, r0
 80052e4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80052e8:	d10b      	bne.n	8005302 <LL_RCC_GetTIMClockFreq+0x9a>
    {
      /* PCLK2 used as TIM15 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80052ea:	f000 f88f 	bl	800540c <RCC_GetSystemClockFreq>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 f8b1 	bl	8005458 <RCC_GetHCLKClockFreq>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 f8d7 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	e002      	b.n	8005308 <LL_RCC_GetTIMClockFreq+0xa0>
    }
    else /* LL_RCC_TIM15_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM15 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 8005302:	f000 f8e7 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 8005306:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM15SW*/

#if defined(RCC_CFGR3_TIM16SW)
  if (TIMxSource == LL_RCC_TIM16_CLKSOURCE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2b03      	cmp	r3, #3
 800530c:	d115      	bne.n	800533a <LL_RCC_GetTIMClockFreq+0xd2>
  {
    /* TIM16CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM16_CLKSOURCE) == LL_RCC_TIM16_CLKSOURCE_PCLK2)
 800530e:	2003      	movs	r0, #3
 8005310:	f7ff fc7e 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 8005314:	4603      	mov	r3, r0
 8005316:	f1b3 5fc0 	cmp.w	r3, #402653184	@ 0x18000000
 800531a:	d10b      	bne.n	8005334 <LL_RCC_GetTIMClockFreq+0xcc>
    {
      /* PCLK2 used as TIM16 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800531c:	f000 f876 	bl	800540c <RCC_GetSystemClockFreq>
 8005320:	4603      	mov	r3, r0
 8005322:	4618      	mov	r0, r3
 8005324:	f000 f898 	bl	8005458 <RCC_GetHCLKClockFreq>
 8005328:	4603      	mov	r3, r0
 800532a:	4618      	mov	r0, r3
 800532c:	f000 f8be 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	e002      	b.n	800533a <LL_RCC_GetTIMClockFreq+0xd2>
    }
    else /* LL_RCC_TIM16_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM16 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 8005334:	f000 f8ce 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 8005338:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM16SW*/

#if defined(RCC_CFGR3_TIM17SW)
  if (TIMxSource == LL_RCC_TIM17_CLKSOURCE)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2b05      	cmp	r3, #5
 800533e:	d115      	bne.n	800536c <LL_RCC_GetTIMClockFreq+0x104>
  {
    /* TIM17CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM17_CLKSOURCE) == LL_RCC_TIM17_CLKSOURCE_PCLK2)
 8005340:	2005      	movs	r0, #5
 8005342:	f7ff fc65 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 8005346:	4603      	mov	r3, r0
 8005348:	f1b3 5f20 	cmp.w	r3, #671088640	@ 0x28000000
 800534c:	d10b      	bne.n	8005366 <LL_RCC_GetTIMClockFreq+0xfe>
    {
      /* PCLK2 used as TIM17 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800534e:	f000 f85d 	bl	800540c <RCC_GetSystemClockFreq>
 8005352:	4603      	mov	r3, r0
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f87f 	bl	8005458 <RCC_GetHCLKClockFreq>
 800535a:	4603      	mov	r3, r0
 800535c:	4618      	mov	r0, r3
 800535e:	f000 f8a5 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 8005362:	60f8      	str	r0, [r7, #12]
 8005364:	e002      	b.n	800536c <LL_RCC_GetTIMClockFreq+0x104>
    }
    else /* LL_RCC_TIM17_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM17 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 8005366:	f000 f8b5 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 800536a:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM17SW*/

#if defined(RCC_CFGR3_TIM20SW)
  if (TIMxSource == LL_RCC_TIM20_CLKSOURCE)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b07      	cmp	r3, #7
 8005370:	d115      	bne.n	800539e <LL_RCC_GetTIMClockFreq+0x136>
  {
    /* TIM20CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM20_CLKSOURCE) == LL_RCC_TIM20_CLKSOURCE_PCLK2)
 8005372:	2007      	movs	r0, #7
 8005374:	f7ff fc4c 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 8005378:	4603      	mov	r3, r0
 800537a:	f1b3 5f60 	cmp.w	r3, #939524096	@ 0x38000000
 800537e:	d10b      	bne.n	8005398 <LL_RCC_GetTIMClockFreq+0x130>
    {
      /* PCLK2 used as TIM20 clock source */
      tim_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8005380:	f000 f844 	bl	800540c <RCC_GetSystemClockFreq>
 8005384:	4603      	mov	r3, r0
 8005386:	4618      	mov	r0, r3
 8005388:	f000 f866 	bl	8005458 <RCC_GetHCLKClockFreq>
 800538c:	4603      	mov	r3, r0
 800538e:	4618      	mov	r0, r3
 8005390:	f000 f88c 	bl	80054ac <RCC_GetPCLK2ClockFreq>
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	e002      	b.n	800539e <LL_RCC_GetTIMClockFreq+0x136>
    }
    else /* LL_RCC_TIM20_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM20 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 8005398:	f000 f89c 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 800539c:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM20SW*/

#if defined(RCC_CFGR3_TIM2SW)
  if (TIMxSource == LL_RCC_TIM2_CLKSOURCE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b10      	cmp	r3, #16
 80053a2:	d115      	bne.n	80053d0 <LL_RCC_GetTIMClockFreq+0x168>
  {
    /* TIM2CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM2_CLKSOURCE) == LL_RCC_TIM2_CLKSOURCE_PCLK1)
 80053a4:	2010      	movs	r0, #16
 80053a6:	f7ff fc33 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 80053aa:	4603      	mov	r3, r0
 80053ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80053b0:	d10b      	bne.n	80053ca <LL_RCC_GetTIMClockFreq+0x162>
    {
      /* PCLK1 used as TIM2 clock source */
      tim_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80053b2:	f000 f82b 	bl	800540c <RCC_GetSystemClockFreq>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f84d 	bl	8005458 <RCC_GetHCLKClockFreq>
 80053be:	4603      	mov	r3, r0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f85f 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	e002      	b.n	80053d0 <LL_RCC_GetTIMClockFreq+0x168>
    }
    else /* LL_RCC_TIM2_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM2 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 80053ca:	f000 f883 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 80053ce:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM2SW*/

#if defined(RCC_CFGR3_TIM34SW)
  if (TIMxSource == LL_RCC_TIM34_CLKSOURCE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b11      	cmp	r3, #17
 80053d4:	d115      	bne.n	8005402 <LL_RCC_GetTIMClockFreq+0x19a>
  {
    /* TIM3/4 CLK clock frequency */
    if (LL_RCC_GetTIMClockSource(LL_RCC_TIM34_CLKSOURCE) == LL_RCC_TIM34_CLKSOURCE_PCLK1)
 80053d6:	2011      	movs	r0, #17
 80053d8:	f7ff fc1a 	bl	8004c10 <LL_RCC_GetTIMClockSource>
 80053dc:	4603      	mov	r3, r0
 80053de:	f1b3 4f08 	cmp.w	r3, #2281701376	@ 0x88000000
 80053e2:	d10b      	bne.n	80053fc <LL_RCC_GetTIMClockFreq+0x194>
    {
      /* PCLK1 used as TIM3/4 clock source */
      tim_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80053e4:	f000 f812 	bl	800540c <RCC_GetSystemClockFreq>
 80053e8:	4603      	mov	r3, r0
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 f834 	bl	8005458 <RCC_GetHCLKClockFreq>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	f000 f846 	bl	8005484 <RCC_GetPCLK1ClockFreq>
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	e002      	b.n	8005402 <LL_RCC_GetTIMClockFreq+0x19a>
    }
    else /* LL_RCC_TIM34_CLKSOURCE_PLL */
    {
      /* PLL clock used as TIM3/4 clock source */
      tim_frequency = RCC_PLL_GetFreqDomain_SYS();
 80053fc:	f000 f86a 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 8005400:	60f8      	str	r0, [r7, #12]
    }
  }
#endif /*RCC_CFGR3_TIM34SW*/

  return tim_frequency;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8005416:	f7ff fb75 	bl	8004b04 <LL_RCC_GetSysClkSource>
 800541a:	4603      	mov	r3, r0
 800541c:	2b08      	cmp	r3, #8
 800541e:	d00c      	beq.n	800543a <RCC_GetSystemClockFreq+0x2e>
 8005420:	2b08      	cmp	r3, #8
 8005422:	d80e      	bhi.n	8005442 <RCC_GetSystemClockFreq+0x36>
 8005424:	2b00      	cmp	r3, #0
 8005426:	d002      	beq.n	800542e <RCC_GetSystemClockFreq+0x22>
 8005428:	2b04      	cmp	r3, #4
 800542a:	d003      	beq.n	8005434 <RCC_GetSystemClockFreq+0x28>
 800542c:	e009      	b.n	8005442 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800542e:	4b09      	ldr	r3, [pc, #36]	@ (8005454 <RCC_GetSystemClockFreq+0x48>)
 8005430:	607b      	str	r3, [r7, #4]
      break;
 8005432:	e009      	b.n	8005448 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8005434:	4b07      	ldr	r3, [pc, #28]	@ (8005454 <RCC_GetSystemClockFreq+0x48>)
 8005436:	607b      	str	r3, [r7, #4]
      break;
 8005438:	e006      	b.n	8005448 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800543a:	f000 f84b 	bl	80054d4 <RCC_PLL_GetFreqDomain_SYS>
 800543e:	6078      	str	r0, [r7, #4]
      break;
 8005440:	e002      	b.n	8005448 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8005442:	4b04      	ldr	r3, [pc, #16]	@ (8005454 <RCC_GetSystemClockFreq+0x48>)
 8005444:	607b      	str	r3, [r7, #4]
      break;
 8005446:	bf00      	nop
  }

  return frequency;
 8005448:	687b      	ldr	r3, [r7, #4]
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	007a1200 	.word	0x007a1200

08005458 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b082      	sub	sp, #8
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8005460:	f7ff fb5e 	bl	8004b20 <LL_RCC_GetAHBPrescaler>
 8005464:	4603      	mov	r3, r0
 8005466:	091b      	lsrs	r3, r3, #4
 8005468:	f003 030f 	and.w	r3, r3, #15
 800546c:	4a04      	ldr	r2, [pc, #16]	@ (8005480 <RCC_GetHCLKClockFreq+0x28>)
 800546e:	5cd3      	ldrb	r3, [r2, r3]
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	40d3      	lsrs	r3, r2
}
 8005476:	4618      	mov	r0, r3
 8005478:	3708      	adds	r7, #8
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	08005a24 	.word	0x08005a24

08005484 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b082      	sub	sp, #8
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800548c:	f7ff fb56 	bl	8004b3c <LL_RCC_GetAPB1Prescaler>
 8005490:	4603      	mov	r3, r0
 8005492:	0a1b      	lsrs	r3, r3, #8
 8005494:	4a04      	ldr	r2, [pc, #16]	@ (80054a8 <RCC_GetPCLK1ClockFreq+0x24>)
 8005496:	5cd3      	ldrb	r3, [r2, r3]
 8005498:	461a      	mov	r2, r3
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	40d3      	lsrs	r3, r2
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	08005a34 	.word	0x08005a34

080054ac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80054b4:	f7ff fb50 	bl	8004b58 <LL_RCC_GetAPB2Prescaler>
 80054b8:	4603      	mov	r3, r0
 80054ba:	0adb      	lsrs	r3, r3, #11
 80054bc:	4a04      	ldr	r2, [pc, #16]	@ (80054d0 <RCC_GetPCLK2ClockFreq+0x24>)
 80054be:	5cd3      	ldrb	r3, [r2, r3]
 80054c0:	461a      	mov	r2, r3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	40d3      	lsrs	r3, r2
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	08005a34 	.word	0x08005a34

080054d4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80054d4:	b590      	push	{r4, r7, lr}
 80054d6:	b085      	sub	sp, #20
 80054d8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 80054e2:	f7ff fbe5 	bl	8004cb0 <LL_RCC_PLL_GetMainSource>
 80054e6:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	d004      	beq.n	80054fa <RCC_PLL_GetFreqDomain_SYS+0x26>
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054f6:	d003      	beq.n	8005500 <RCC_PLL_GetFreqDomain_SYS+0x2c>
 80054f8:	e005      	b.n	8005506 <RCC_PLL_GetFreqDomain_SYS+0x32>
  {
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80054fa:	4b15      	ldr	r3, [pc, #84]	@ (8005550 <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 80054fc:	60fb      	str	r3, [r7, #12]
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 80054fe:	e005      	b.n	800550c <RCC_PLL_GetFreqDomain_SYS+0x38>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8005500:	4b13      	ldr	r3, [pc, #76]	@ (8005550 <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8005502:	60fb      	str	r3, [r7, #12]
      break;
 8005504:	e002      	b.n	800550c <RCC_PLL_GetFreqDomain_SYS+0x38>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <RCC_PLL_GetFreqDomain_SYS+0x7c>)
 8005508:	60fb      	str	r3, [r7, #12]
#else
      pllinputfreq = HSI_VALUE / 2U;
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800550a:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
 800550c:	f7ff fbec 	bl	8004ce8 <LL_RCC_PLL_GetPrediv>
 8005510:	4603      	mov	r3, r0
 8005512:	f003 030f 	and.w	r3, r3, #15
 8005516:	3301      	adds	r3, #1
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	fbb2 f4f3 	udiv	r4, r2, r3
 800551e:	f7ff fbd5 	bl	8004ccc <LL_RCC_PLL_GetMultiplicator>
 8005522:	4603      	mov	r3, r0
 8005524:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8005528:	f44f 1270 	mov.w	r2, #3932160	@ 0x3c0000
 800552c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	fa92 f2a2 	rbit	r2, r2
 8005534:	603a      	str	r2, [r7, #0]
  return result;
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	fab2 f282 	clz	r2, r2
 800553c:	b2d2      	uxtb	r2, r2
 800553e:	40d3      	lsrs	r3, r2
 8005540:	3302      	adds	r3, #2
 8005542:	fb04 f303 	mul.w	r3, r4, r3
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8005546:	4618      	mov	r0, r3
 8005548:	3714      	adds	r7, #20
 800554a:	46bd      	mov	sp, r7
 800554c:	bd90      	pop	{r4, r7, pc}
 800554e:	bf00      	nop
 8005550:	007a1200 	.word	0x007a1200

08005554 <LL_USART_IsEnabled>:
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b01      	cmp	r3, #1
 8005566:	d101      	bne.n	800556c <LL_USART_IsEnabled+0x18>
 8005568:	2301      	movs	r3, #1
 800556a:	e000      	b.n	800556e <LL_USART_IsEnabled+0x1a>
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	370c      	adds	r7, #12
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr

0800557a <LL_USART_DisableSCLKOutput>:
{
 800557a:	b480      	push	{r7}
 800557c:	b083      	sub	sp, #12
 800557e:	af00      	add	r7, sp, #0
 8005580:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	605a      	str	r2, [r3, #4]
}
 800558e:	bf00      	nop
 8005590:	370c      	adds	r7, #12
 8005592:	46bd      	mov	sp, r7
 8005594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005598:	4770      	bx	lr

0800559a <LL_USART_SetStopBitsLength>:
{
 800559a:	b480      	push	{r7}
 800559c:	b083      	sub	sp, #12
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
 80055a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	431a      	orrs	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	605a      	str	r2, [r3, #4]
}
 80055b4:	bf00      	nop
 80055b6:	370c      	adds	r7, #12
 80055b8:	46bd      	mov	sp, r7
 80055ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055be:	4770      	bx	lr

080055c0 <LL_USART_SetHWFlowCtrl>:
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	431a      	orrs	r2, r3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	609a      	str	r2, [r3, #8]
}
 80055da:	bf00      	nop
 80055dc:	370c      	adds	r7, #12
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr

080055e6 <LL_USART_SetBaudRate>:
{
 80055e6:	b480      	push	{r7}
 80055e8:	b087      	sub	sp, #28
 80055ea:	af00      	add	r7, sp, #0
 80055ec:	60f8      	str	r0, [r7, #12]
 80055ee:	60b9      	str	r1, [r7, #8]
 80055f0:	607a      	str	r2, [r7, #4]
 80055f2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055fa:	d11a      	bne.n	8005632 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	005a      	lsls	r2, r3, #1
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	085b      	lsrs	r3, r3, #1
 8005604:	441a      	add	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	fbb2 f3f3 	udiv	r3, r2, r3
 800560c:	b29b      	uxth	r3, r3
 800560e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8005610:	697a      	ldr	r2, [r7, #20]
 8005612:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8005616:	4013      	ands	r3, r2
 8005618:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	085b      	lsrs	r3, r3, #1
 800561e:	b29b      	uxth	r3, r3
 8005620:	f003 0307 	and.w	r3, r3, #7
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	60da      	str	r2, [r3, #12]
}
 8005630:	e00a      	b.n	8005648 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	085a      	lsrs	r2, r3, #1
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	441a      	add	r2, r3
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005640:	b29b      	uxth	r3, r3
 8005642:	461a      	mov	r2, r3
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	60da      	str	r2, [r3, #12]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <LL_APB1_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
{
 8005654:	b480      	push	{r7}
 8005656:	b083      	sub	sp, #12
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR, Periphs);
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <LL_APB1_GRP1_ForceReset+0x20>)
 800565e:	691a      	ldr	r2, [r3, #16]
 8005660:	4904      	ldr	r1, [pc, #16]	@ (8005674 <LL_APB1_GRP1_ForceReset+0x20>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4313      	orrs	r3, r2
 8005666:	610b      	str	r3, [r1, #16]
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	40021000 	.word	0x40021000

08005678 <LL_APB1_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR, Periphs);
 8005680:	4b06      	ldr	r3, [pc, #24]	@ (800569c <LL_APB1_GRP1_ReleaseReset+0x24>)
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	43db      	mvns	r3, r3
 8005688:	4904      	ldr	r1, [pc, #16]	@ (800569c <LL_APB1_GRP1_ReleaseReset+0x24>)
 800568a:	4013      	ands	r3, r2
 800568c:	610b      	str	r3, [r1, #16]
}
 800568e:	bf00      	nop
 8005690:	370c      	adds	r7, #12
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40021000 	.word	0x40021000

080056a0 <LL_APB2_GRP1_ForceReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ForceReset(uint32_t Periphs)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 80056a8:	4b05      	ldr	r3, [pc, #20]	@ (80056c0 <LL_APB2_GRP1_ForceReset+0x20>)
 80056aa:	68da      	ldr	r2, [r3, #12]
 80056ac:	4904      	ldr	r1, [pc, #16]	@ (80056c0 <LL_APB2_GRP1_ForceReset+0x20>)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60cb      	str	r3, [r1, #12]
}
 80056b4:	bf00      	nop
 80056b6:	370c      	adds	r7, #12
 80056b8:	46bd      	mov	sp, r7
 80056ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056be:	4770      	bx	lr
 80056c0:	40021000 	.word	0x40021000

080056c4 <LL_APB2_GRP1_ReleaseReset>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_ReleaseReset(uint32_t Periphs)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <LL_APB2_GRP1_ReleaseReset+0x24>)
 80056ce:	68da      	ldr	r2, [r3, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	43db      	mvns	r3, r3
 80056d4:	4904      	ldr	r1, [pc, #16]	@ (80056e8 <LL_APB2_GRP1_ReleaseReset+0x24>)
 80056d6:	4013      	ands	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	40021000 	.word	0x40021000

080056ec <LL_USART_DeInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are de-initialized
  *          - ERROR: USART registers are not de-initialized
  */
ErrorStatus LL_USART_DeInit(const USART_TypeDef *USARTx)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(USARTx));

  if (USARTx == USART1)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4a23      	ldr	r2, [pc, #140]	@ (8005788 <LL_USART_DeInit+0x9c>)
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d108      	bne.n	8005712 <LL_USART_DeInit+0x26>
  {
    /* Force reset of USART clock */
    LL_APB2_GRP1_ForceReset(LL_APB2_GRP1_PERIPH_USART1);
 8005700:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8005704:	f7ff ffcc 	bl	80056a0 <LL_APB2_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB2_GRP1_ReleaseReset(LL_APB2_GRP1_PERIPH_USART1);
 8005708:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 800570c:	f7ff ffda 	bl	80056c4 <LL_APB2_GRP1_ReleaseReset>
 8005710:	e035      	b.n	800577e <LL_USART_DeInit+0x92>
  }
  else if (USARTx == USART2)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1d      	ldr	r2, [pc, #116]	@ (800578c <LL_USART_DeInit+0xa0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <LL_USART_DeInit+0x40>
  {
    /* Force reset of USART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART2);
 800571a:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 800571e:	f7ff ff99 	bl	8005654 <LL_APB1_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART2);
 8005722:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
 8005726:	f7ff ffa7 	bl	8005678 <LL_APB1_GRP1_ReleaseReset>
 800572a:	e028      	b.n	800577e <LL_USART_DeInit+0x92>
  }
  else if (USARTx == USART3)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a18      	ldr	r2, [pc, #96]	@ (8005790 <LL_USART_DeInit+0xa4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <LL_USART_DeInit+0x5a>
  {
    /* Force reset of USART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_USART3);
 8005734:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005738:	f7ff ff8c 	bl	8005654 <LL_APB1_GRP1_ForceReset>

    /* Release reset of USART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_USART3);
 800573c:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 8005740:	f7ff ff9a 	bl	8005678 <LL_APB1_GRP1_ReleaseReset>
 8005744:	e01b      	b.n	800577e <LL_USART_DeInit+0x92>
  }
#if defined(UART4)
  else if (USARTx == UART4)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a12      	ldr	r2, [pc, #72]	@ (8005794 <LL_USART_DeInit+0xa8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d108      	bne.n	8005760 <LL_USART_DeInit+0x74>
  {
    /* Force reset of UART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART4);
 800574e:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8005752:	f7ff ff7f 	bl	8005654 <LL_APB1_GRP1_ForceReset>

    /* Release reset of UART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART4);
 8005756:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800575a:	f7ff ff8d 	bl	8005678 <LL_APB1_GRP1_ReleaseReset>
 800575e:	e00e      	b.n	800577e <LL_USART_DeInit+0x92>
  }
#endif /* UART4 */
#if defined(UART5)
  else if (USARTx == UART5)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a0d      	ldr	r2, [pc, #52]	@ (8005798 <LL_USART_DeInit+0xac>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d108      	bne.n	800577a <LL_USART_DeInit+0x8e>
  {
    /* Force reset of UART clock */
    LL_APB1_GRP1_ForceReset(LL_APB1_GRP1_PERIPH_UART5);
 8005768:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800576c:	f7ff ff72 	bl	8005654 <LL_APB1_GRP1_ForceReset>

    /* Release reset of UART clock */
    LL_APB1_GRP1_ReleaseReset(LL_APB1_GRP1_PERIPH_UART5);
 8005770:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8005774:	f7ff ff80 	bl	8005678 <LL_APB1_GRP1_ReleaseReset>
 8005778:	e001      	b.n	800577e <LL_USART_DeInit+0x92>
  }
#endif /* UART5 */
  else
  {
    status = ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800577e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3710      	adds	r7, #16
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	40013800 	.word	0x40013800
 800578c:	40004400 	.word	0x40004400
 8005790:	40004800 	.word	0x40004800
 8005794:	40004c00 	.word	0x40004c00
 8005798:	40005000 	.word	0x40005000

0800579c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
 80057a4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80057aa:	2300      	movs	r3, #0
 80057ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f7ff fed0 	bl	8005554 <LL_USART_IsEnabled>
 80057b4:	4603      	mov	r3, r0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d15c      	bne.n	8005874 <LL_USART_Init+0xd8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	4b30      	ldr	r3, [pc, #192]	@ (8005880 <LL_USART_Init+0xe4>)
 80057c0:	4013      	ands	r3, r2
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	6851      	ldr	r1, [r2, #4]
 80057c6:	683a      	ldr	r2, [r7, #0]
 80057c8:	68d2      	ldr	r2, [r2, #12]
 80057ca:	4311      	orrs	r1, r2
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	6912      	ldr	r2, [r2, #16]
 80057d0:	4311      	orrs	r1, r2
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	6992      	ldr	r2, [r2, #24]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	4619      	mov	r1, r3
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f7ff fed8 	bl	800559a <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	695b      	ldr	r3, [r3, #20]
 80057ee:	4619      	mov	r1, r3
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff fee5 	bl	80055c0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a22      	ldr	r2, [pc, #136]	@ (8005884 <LL_USART_Init+0xe8>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d104      	bne.n	8005808 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80057fe:	2000      	movs	r0, #0
 8005800:	f7ff fb05 	bl	8004e0e <LL_RCC_GetUSARTClockFreq>
 8005804:	60b8      	str	r0, [r7, #8]
 8005806:	e024      	b.n	8005852 <LL_USART_Init+0xb6>
    }
    else if (USARTx == USART2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a1f      	ldr	r2, [pc, #124]	@ (8005888 <LL_USART_Init+0xec>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d104      	bne.n	800581a <LL_USART_Init+0x7e>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005810:	2010      	movs	r0, #16
 8005812:	f7ff fafc 	bl	8004e0e <LL_RCC_GetUSARTClockFreq>
 8005816:	60b8      	str	r0, [r7, #8]
 8005818:	e01b      	b.n	8005852 <LL_USART_Init+0xb6>
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a1b      	ldr	r2, [pc, #108]	@ (800588c <LL_USART_Init+0xf0>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d104      	bne.n	800582c <LL_USART_Init+0x90>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005822:	2012      	movs	r0, #18
 8005824:	f7ff faf3 	bl	8004e0e <LL_RCC_GetUSARTClockFreq>
 8005828:	60b8      	str	r0, [r7, #8]
 800582a:	e012      	b.n	8005852 <LL_USART_Init+0xb6>
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
      periphclk = RCC_Clocks.PCLK1_Frequency;
#endif /* USART3 Clock selector flag */
    }
#if defined(UART4)
    else if (USARTx == UART4)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a18      	ldr	r2, [pc, #96]	@ (8005890 <LL_USART_Init+0xf4>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d105      	bne.n	8005840 <LL_USART_Init+0xa4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005834:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8005838:	f7ff fba6 	bl	8004f88 <LL_RCC_GetUARTClockFreq>
 800583c:	60b8      	str	r0, [r7, #8]
 800583e:	e008      	b.n	8005852 <LL_USART_Init+0xb6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a14      	ldr	r2, [pc, #80]	@ (8005894 <LL_USART_Init+0xf8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d104      	bne.n	8005852 <LL_USART_Init+0xb6>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8005848:	f44f 0040 	mov.w	r0, #12582912	@ 0xc00000
 800584c:	f7ff fb9c 	bl	8004f88 <LL_RCC_GetUARTClockFreq>
 8005850:	60b8      	str	r0, [r7, #8]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00d      	beq.n	8005874 <LL_USART_Init+0xd8>
        && (USART_InitStruct->BaudRate != 0U))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d009      	beq.n	8005874 <LL_USART_Init+0xd8>
    {
      status = SUCCESS;
 8005860:	2300      	movs	r3, #0
 8005862:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800586c:	68b9      	ldr	r1, [r7, #8]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff feb9 	bl	80055e6 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	efff69f3 	.word	0xefff69f3
 8005884:	40013800 	.word	0x40013800
 8005888:	40004400 	.word	0x40004400
 800588c:	40004800 	.word	0x40004800
 8005890:	40004c00 	.word	0x40004c00
 8005894:	40005000 	.word	0x40005000

08005898 <LL_USART_StructInit>:
  *                         whose fields will be set to default values.
  * @retval None
  */

void LL_USART_StructInit(LL_USART_InitTypeDef *USART_InitStruct)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Set USART_InitStruct fields to default values */
  USART_InitStruct->BaudRate            = USART_DEFAULT_BAUDRATE;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80058a6:	601a      	str	r2, [r3, #0]
  USART_InitStruct->DataWidth           = LL_USART_DATAWIDTH_8B;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	605a      	str	r2, [r3, #4]
  USART_InitStruct->StopBits            = LL_USART_STOPBITS_1;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	609a      	str	r2, [r3, #8]
  USART_InitStruct->Parity              = LL_USART_PARITY_NONE ;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2200      	movs	r2, #0
 80058b8:	60da      	str	r2, [r3, #12]
  USART_InitStruct->TransferDirection   = LL_USART_DIRECTION_TX_RX;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	220c      	movs	r2, #12
 80058be:	611a      	str	r2, [r3, #16]
  USART_InitStruct->HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	615a      	str	r2, [r3, #20]
  USART_InitStruct->OverSampling        = LL_USART_OVERSAMPLING_16;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2200      	movs	r2, #0
 80058ca:	619a      	str	r2, [r3, #24]
}
 80058cc:	bf00      	nop
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <LL_USART_ClockInit>:
  *          - SUCCESS: USART registers related to Clock settings are initialized according
  *                     to USART_ClockInitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_ClockInit(USART_TypeDef *USARTx, const LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
 80058e0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 80058e2:	2300      	movs	r3, #0
 80058e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_UART_INSTANCE(USARTx));
  assert_param(IS_LL_USART_CLOCKOUTPUT(USART_ClockInitStruct->ClockOutput));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7ff fe34 	bl	8005554 <LL_USART_IsEnabled>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d119      	bne.n	8005926 <LL_USART_ClockInit+0x4e>
  {
    /* If USART Clock signal is disabled */
    if (USART_ClockInitStruct->ClockOutput == LL_USART_CLOCK_DISABLE)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <LL_USART_ClockInit+0x2a>
    {
      /* Deactivate Clock signal delivery :
       * - Disable Clock Output:        USART_CR2_CLKEN cleared
       */
      LL_USART_DisableSCLKOutput(USARTx);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f7ff fe3d 	bl	800557a <LL_USART_DisableSCLKOutput>
 8005900:	e013      	b.n	800592a <LL_USART_ClockInit+0x52>
       * - Enable Clock Output:         USART_CR2_CLKEN set
       * - Clock Polarity:              USART_CR2_CPOL bit according to USART_ClockInitStruct->ClockPolarity value
       * - Clock Phase:                 USART_CR2_CPHA bit according to USART_ClockInitStruct->ClockPhase value
       * - Last Bit Clock Pulse Output: USART_CR2_LBCL bit according to USART_ClockInitStruct->LastBitClockPulse value.
       */
      MODIFY_REG(USARTx->CR2,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	4319      	orrs	r1, r3
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	430b      	orrs	r3, r1
 800591a:	4313      	orrs	r3, r2
 800591c:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	605a      	str	r2, [r3, #4]
 8005924:	e001      	b.n	800592a <LL_USART_ClockInit+0x52>
    }
  }
  /* Else (USART not in Disabled state => return ERROR */
  else
  {
    status = ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800592a:	7bfb      	ldrb	r3, [r7, #15]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3710      	adds	r7, #16
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <LL_USART_ClockStructInit>:
  * @param USART_ClockInitStruct pointer to a @ref LL_USART_ClockInitTypeDef structure
  *                              whose fields will be set to default values.
  * @retval None
  */
void LL_USART_ClockStructInit(LL_USART_ClockInitTypeDef *USART_ClockInitStruct)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Set LL_USART_ClockInitStruct fields with default values */
  USART_ClockInitStruct->ClockOutput       = LL_USART_CLOCK_DISABLE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	601a      	str	r2, [r3, #0]
  USART_ClockInitStruct->ClockPolarity     = LL_USART_POLARITY_LOW;            /* Not relevant when ClockOutput =
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	605a      	str	r2, [r3, #4]
                                                                                  LL_USART_CLOCK_DISABLE */
  USART_ClockInitStruct->ClockPhase        = LL_USART_PHASE_1EDGE;             /* Not relevant when ClockOutput =
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	609a      	str	r2, [r3, #8]
                                                                                  LL_USART_CLOCK_DISABLE */
  USART_ClockInitStruct->LastBitClockPulse = LL_USART_LASTCLKPULSE_NO_OUTPUT;  /* Not relevant when ClockOutput =
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	60da      	str	r2, [r3, #12]
                                                                                  LL_USART_CLOCK_DISABLE */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005960:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005998 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8005964:	f7fb f9fe 	bl	8000d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005968:	480c      	ldr	r0, [pc, #48]	@ (800599c <LoopForever+0x6>)
  ldr r1, =_edata
 800596a:	490d      	ldr	r1, [pc, #52]	@ (80059a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800596c:	4a0d      	ldr	r2, [pc, #52]	@ (80059a4 <LoopForever+0xe>)
  movs r3, #0
 800596e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005970:	e002      	b.n	8005978 <LoopCopyDataInit>

08005972 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005972:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005974:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005976:	3304      	adds	r3, #4

08005978 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005978:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800597a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800597c:	d3f9      	bcc.n	8005972 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800597e:	4a0a      	ldr	r2, [pc, #40]	@ (80059a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005980:	4c0a      	ldr	r4, [pc, #40]	@ (80059ac <LoopForever+0x16>)
  movs r3, #0
 8005982:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005984:	e001      	b.n	800598a <LoopFillZerobss>

08005986 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005986:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005988:	3204      	adds	r2, #4

0800598a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800598a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800598c:	d3fb      	bcc.n	8005986 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800598e:	f000 f819 	bl	80059c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005992:	f7fa fe03 	bl	800059c <main>

08005996 <LoopForever>:

LoopForever:
    b LoopForever
 8005996:	e7fe      	b.n	8005996 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005998:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800599c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80059a0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80059a4:	08005aa4 	.word	0x08005aa4
  ldr r2, =_sbss
 80059a8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80059ac:	20000174 	.word	0x20000174

080059b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80059b0:	e7fe      	b.n	80059b0 <ADC1_2_IRQHandler>

080059b2 <memset>:
 80059b2:	4402      	add	r2, r0
 80059b4:	4603      	mov	r3, r0
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d100      	bne.n	80059bc <memset+0xa>
 80059ba:	4770      	bx	lr
 80059bc:	f803 1b01 	strb.w	r1, [r3], #1
 80059c0:	e7f9      	b.n	80059b6 <memset+0x4>
	...

080059c4 <__libc_init_array>:
 80059c4:	b570      	push	{r4, r5, r6, lr}
 80059c6:	4d0d      	ldr	r5, [pc, #52]	@ (80059fc <__libc_init_array+0x38>)
 80059c8:	4c0d      	ldr	r4, [pc, #52]	@ (8005a00 <__libc_init_array+0x3c>)
 80059ca:	1b64      	subs	r4, r4, r5
 80059cc:	10a4      	asrs	r4, r4, #2
 80059ce:	2600      	movs	r6, #0
 80059d0:	42a6      	cmp	r6, r4
 80059d2:	d109      	bne.n	80059e8 <__libc_init_array+0x24>
 80059d4:	4d0b      	ldr	r5, [pc, #44]	@ (8005a04 <__libc_init_array+0x40>)
 80059d6:	4c0c      	ldr	r4, [pc, #48]	@ (8005a08 <__libc_init_array+0x44>)
 80059d8:	f000 f818 	bl	8005a0c <_init>
 80059dc:	1b64      	subs	r4, r4, r5
 80059de:	10a4      	asrs	r4, r4, #2
 80059e0:	2600      	movs	r6, #0
 80059e2:	42a6      	cmp	r6, r4
 80059e4:	d105      	bne.n	80059f2 <__libc_init_array+0x2e>
 80059e6:	bd70      	pop	{r4, r5, r6, pc}
 80059e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059ec:	4798      	blx	r3
 80059ee:	3601      	adds	r6, #1
 80059f0:	e7ee      	b.n	80059d0 <__libc_init_array+0xc>
 80059f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059f6:	4798      	blx	r3
 80059f8:	3601      	adds	r6, #1
 80059fa:	e7f2      	b.n	80059e2 <__libc_init_array+0x1e>
 80059fc:	08005a9c 	.word	0x08005a9c
 8005a00:	08005a9c 	.word	0x08005a9c
 8005a04:	08005a9c 	.word	0x08005a9c
 8005a08:	08005aa0 	.word	0x08005aa0

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	bf00      	nop
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	bf00      	nop
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
