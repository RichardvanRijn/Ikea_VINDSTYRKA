
VINDSTYRKA_FORNUFTIG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000272c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002838  08002838  00003838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002864  08002864  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002864  08002864  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002864  08002864  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002864  08002864  00003864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002868  08002868  00003868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800286c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000010  0800287c  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  0800287c  0000417c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004f4b  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bfd  00000000  00000000  00008f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000780  00000000  00000000  0000ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000056a  00000000  00000000  0000b308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178c1  00000000  00000000  0000b872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000086df  00000000  00000000  00023133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000828d8  00000000  00000000  0002b812  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ae0ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b58  00000000  00000000  000ae130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000afc88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002820 	.word	0x08002820

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002820 	.word	0x08002820

0800014c <InitCom>:

char Buffer_packet_Location[ReceiveCommandSize][ReceiveSize];	//physical location of buffered packets
void*	commandStack[ReceiveCommandSize];						//pointer to buffered packets

void InitCom()
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
	for (uint8_t I = 0; I < ReceiveCommandSize;I++)
 8000152:	2300      	movs	r3, #0
 8000154:	71fb      	strb	r3, [r7, #7]
 8000156:	e00d      	b.n	8000174 <InitCom+0x28>
	{
	  commandStack[I] = &Buffer_packet_Location[I];				//bind pointers to physical location
 8000158:	79fa      	ldrb	r2, [r7, #7]
 800015a:	79f9      	ldrb	r1, [r7, #7]
 800015c:	4613      	mov	r3, r2
 800015e:	011b      	lsls	r3, r3, #4
 8000160:	1a9b      	subs	r3, r3, r2
 8000162:	005b      	lsls	r3, r3, #1
 8000164:	4a08      	ldr	r2, [pc, #32]	@ (8000188 <InitCom+0x3c>)
 8000166:	4413      	add	r3, r2
 8000168:	4a08      	ldr	r2, [pc, #32]	@ (800018c <InitCom+0x40>)
 800016a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	for (uint8_t I = 0; I < ReceiveCommandSize;I++)
 800016e:	79fb      	ldrb	r3, [r7, #7]
 8000170:	3301      	adds	r3, #1
 8000172:	71fb      	strb	r3, [r7, #7]
 8000174:	79fb      	ldrb	r3, [r7, #7]
 8000176:	2b05      	cmp	r3, #5
 8000178:	d9ee      	bls.n	8000158 <InitCom+0xc>
	}
}
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	370c      	adds	r7, #12
 8000180:	46bd      	mov	sp, r7
 8000182:	bc80      	pop	{r7}
 8000184:	4770      	bx	lr
 8000186:	bf00      	nop
 8000188:	20000030 	.word	0x20000030
 800018c:	200000e4 	.word	0x200000e4

08000190 <R_bufferFull>:

bool R_bufferFull()
{
 8000190:	b480      	push	{r7}
 8000192:	af00      	add	r7, sp, #0
	return (Pushindex == Popindex);	//buffer is full when push and pop index are identical
 8000194:	4b06      	ldr	r3, [pc, #24]	@ (80001b0 <R_bufferFull+0x20>)
 8000196:	781a      	ldrb	r2, [r3, #0]
 8000198:	4b06      	ldr	r3, [pc, #24]	@ (80001b4 <R_bufferFull+0x24>)
 800019a:	781b      	ldrb	r3, [r3, #0]
 800019c:	429a      	cmp	r2, r3
 800019e:	bf0c      	ite	eq
 80001a0:	2301      	moveq	r3, #1
 80001a2:	2300      	movne	r3, #0
 80001a4:	b2db      	uxtb	r3, r3
}
 80001a6:	4618      	mov	r0, r3
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	20000000 	.word	0x20000000

080001b8 <R_bufferEmpty>:

bool R_bufferEmpty()
{
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	return (((Popindex + 1) % ReceiveCommandSize) == Pushindex); //buffer is empty when popindex is 1 behind push index
 80001bc:	4b0b      	ldr	r3, [pc, #44]	@ (80001ec <R_bufferEmpty+0x34>)
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	1c59      	adds	r1, r3, #1
 80001c2:	4b0b      	ldr	r3, [pc, #44]	@ (80001f0 <R_bufferEmpty+0x38>)
 80001c4:	fb83 3201 	smull	r3, r2, r3, r1
 80001c8:	17cb      	asrs	r3, r1, #31
 80001ca:	1ad2      	subs	r2, r2, r3
 80001cc:	4613      	mov	r3, r2
 80001ce:	005b      	lsls	r3, r3, #1
 80001d0:	4413      	add	r3, r2
 80001d2:	005b      	lsls	r3, r3, #1
 80001d4:	1aca      	subs	r2, r1, r3
 80001d6:	4b07      	ldr	r3, [pc, #28]	@ (80001f4 <R_bufferEmpty+0x3c>)
 80001d8:	781b      	ldrb	r3, [r3, #0]
 80001da:	429a      	cmp	r2, r3
 80001dc:	bf0c      	ite	eq
 80001de:	2301      	moveq	r3, #1
 80001e0:	2300      	movne	r3, #0
 80001e2:	b2db      	uxtb	r3, r3
}
 80001e4:	4618      	mov	r0, r3
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bc80      	pop	{r7}
 80001ea:	4770      	bx	lr
 80001ec:	20000000 	.word	0x20000000
 80001f0:	2aaaaaab 	.word	0x2aaaaaab
 80001f4:	2000002c 	.word	0x2000002c

080001f8 <R_Push>:

bool R_Push(void** Buffer_p)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
	//uint8_t temp;
	if (R_bufferFull())										// If the buffer is full the received packet in not placed in the buffer and wil be overwriten on the next receive
 8000200:	f7ff ffc6 	bl	8000190 <R_bufferFull>
 8000204:	4603      	mov	r3, r0
 8000206:	2b00      	cmp	r3, #0
 8000208:	d001      	beq.n	800020e <R_Push+0x16>
		return false;
 800020a:	2300      	movs	r3, #0
 800020c:	e022      	b.n	8000254 <R_Push+0x5c>

	void *temp = *Buffer_p;									//swapping pointers to array's
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	60fb      	str	r3, [r7, #12]
	*Buffer_p = commandStack[Pushindex];
 8000214:	4b11      	ldr	r3, [pc, #68]	@ (800025c <R_Push+0x64>)
 8000216:	781b      	ldrb	r3, [r3, #0]
 8000218:	461a      	mov	r2, r3
 800021a:	4b11      	ldr	r3, [pc, #68]	@ (8000260 <R_Push+0x68>)
 800021c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	601a      	str	r2, [r3, #0]
	commandStack[Pushindex] = temp;
 8000224:	4b0d      	ldr	r3, [pc, #52]	@ (800025c <R_Push+0x64>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	4619      	mov	r1, r3
 800022a:	4a0d      	ldr	r2, [pc, #52]	@ (8000260 <R_Push+0x68>)
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	Pushindex = ((Pushindex + 1) % ReceiveCommandSize);
 8000232:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <R_Push+0x64>)
 8000234:	781b      	ldrb	r3, [r3, #0]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	4b0a      	ldr	r3, [pc, #40]	@ (8000264 <R_Push+0x6c>)
 800023a:	fb83 3102 	smull	r3, r1, r3, r2
 800023e:	17d3      	asrs	r3, r2, #31
 8000240:	1ac9      	subs	r1, r1, r3
 8000242:	460b      	mov	r3, r1
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	440b      	add	r3, r1
 8000248:	005b      	lsls	r3, r3, #1
 800024a:	1ad1      	subs	r1, r2, r3
 800024c:	b2ca      	uxtb	r2, r1
 800024e:	4b03      	ldr	r3, [pc, #12]	@ (800025c <R_Push+0x64>)
 8000250:	701a      	strb	r2, [r3, #0]

	return true;
 8000252:	2301      	movs	r3, #1
}
 8000254:	4618      	mov	r0, r3
 8000256:	3710      	adds	r7, #16
 8000258:	46bd      	mov	sp, r7
 800025a:	bd80      	pop	{r7, pc}
 800025c:	2000002c 	.word	0x2000002c
 8000260:	200000e4 	.word	0x200000e4
 8000264:	2aaaaaab 	.word	0x2aaaaaab

08000268 <R_Pop>:

//#include "stm32f3xx_ll_cortex.h"

bool R_Pop(void** Command_p)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b084      	sub	sp, #16
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

	//uint8_t temp;
	if(R_bufferEmpty())
 8000270:	f7ff ffa2 	bl	80001b8 <R_bufferEmpty>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <R_Pop+0x16>
		return false;
 800027a:	2300      	movs	r3, #0
 800027c:	e022      	b.n	80002c4 <R_Pop+0x5c>

	Popindex = ((Popindex + 1) % ReceiveCommandSize);
 800027e:	4b13      	ldr	r3, [pc, #76]	@ (80002cc <R_Pop+0x64>)
 8000280:	781b      	ldrb	r3, [r3, #0]
 8000282:	1c5a      	adds	r2, r3, #1
 8000284:	4b12      	ldr	r3, [pc, #72]	@ (80002d0 <R_Pop+0x68>)
 8000286:	fb83 3102 	smull	r3, r1, r3, r2
 800028a:	17d3      	asrs	r3, r2, #31
 800028c:	1ac9      	subs	r1, r1, r3
 800028e:	460b      	mov	r3, r1
 8000290:	005b      	lsls	r3, r3, #1
 8000292:	440b      	add	r3, r1
 8000294:	005b      	lsls	r3, r3, #1
 8000296:	1ad1      	subs	r1, r2, r3
 8000298:	b2ca      	uxtb	r2, r1
 800029a:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <R_Pop+0x64>)
 800029c:	701a      	strb	r2, [r3, #0]

	void* temp = *Command_p;
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	60fb      	str	r3, [r7, #12]
	*Command_p = commandStack[Popindex];
 80002a4:	4b09      	ldr	r3, [pc, #36]	@ (80002cc <R_Pop+0x64>)
 80002a6:	781b      	ldrb	r3, [r3, #0]
 80002a8:	461a      	mov	r2, r3
 80002aa:	4b0a      	ldr	r3, [pc, #40]	@ (80002d4 <R_Pop+0x6c>)
 80002ac:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80002b0:	687b      	ldr	r3, [r7, #4]
 80002b2:	601a      	str	r2, [r3, #0]
	commandStack[Popindex] = temp;
 80002b4:	4b05      	ldr	r3, [pc, #20]	@ (80002cc <R_Pop+0x64>)
 80002b6:	781b      	ldrb	r3, [r3, #0]
 80002b8:	4619      	mov	r1, r3
 80002ba:	4a06      	ldr	r2, [pc, #24]	@ (80002d4 <R_Pop+0x6c>)
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	return true;
 80002c2:	2301      	movs	r3, #1
}
 80002c4:	4618      	mov	r0, r3
 80002c6:	3710      	adds	r7, #16
 80002c8:	46bd      	mov	sp, r7
 80002ca:	bd80      	pop	{r7, pc}
 80002cc:	20000000 	.word	0x20000000
 80002d0:	2aaaaaab 	.word	0x2aaaaaab
 80002d4:	200000e4 	.word	0x200000e4

080002d8 <_Init_Events>:
uint16_t PM1_Value;
uint16_t PM25_Value;
uint16_t Tvoc_Value;

void _Init_Events()
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	events.Event = &Event;
 80002dc:	4b04      	ldr	r3, [pc, #16]	@ (80002f0 <_Init_Events+0x18>)
 80002de:	4a05      	ldr	r2, [pc, #20]	@ (80002f4 <_Init_Events+0x1c>)
 80002e0:	605a      	str	r2, [r3, #4]
	events.Events_Set = &Events_Set;
 80002e2:	4b03      	ldr	r3, [pc, #12]	@ (80002f0 <_Init_Events+0x18>)
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <_Init_Events+0x20>)
 80002e6:	601a      	str	r2, [r3, #0]
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bc80      	pop	{r7}
 80002ee:	4770      	bx	lr
 80002f0:	20000104 	.word	0x20000104
 80002f4:	20000100 	.word	0x20000100
 80002f8:	200000fc 	.word	0x200000fc

080002fc <_EventClear_I2C_Rx>:

void _EventSet_PcTx(void)      { events.Events_Set->PcTx_set = 1; }
void _EventClear_PcTx(void)    { events.Event->PcTx = 0; }

void _EventSet_I2C_Rx(void)      { events.Events_Set->I2C_Rx_set = 1; }
void _EventClear_I2C_Rx(void)    { events.Event->I2C_Rx = 0; }
 80002fc:	b480      	push	{r7}
 80002fe:	af00      	add	r7, sp, #0
 8000300:	4b04      	ldr	r3, [pc, #16]	@ (8000314 <_EventClear_I2C_Rx+0x18>)
 8000302:	685a      	ldr	r2, [r3, #4]
 8000304:	7813      	ldrb	r3, [r2, #0]
 8000306:	f36f 0382 	bfc	r3, #2, #1
 800030a:	7013      	strb	r3, [r2, #0]
 800030c:	bf00      	nop
 800030e:	46bd      	mov	sp, r7
 8000310:	bc80      	pop	{r7}
 8000312:	4770      	bx	lr
 8000314:	20000104 	.word	0x20000104

08000318 <_EventSet_I2C_Reset>:

void _EventSet_I2C_Reset(void)      { events.Events_Set->I2C_Reset_set = 1; }
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
 800031c:	4b04      	ldr	r3, [pc, #16]	@ (8000330 <_EventSet_I2C_Reset+0x18>)
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	7813      	ldrb	r3, [r2, #0]
 8000322:	f043 0308 	orr.w	r3, r3, #8
 8000326:	7013      	strb	r3, [r2, #0]
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	20000104 	.word	0x20000104

08000334 <_EventClear_I2C_Reset>:
void _EventClear_I2C_Reset(void)    { events.Event->I2C_Reset = 0; }
 8000334:	b480      	push	{r7}
 8000336:	af00      	add	r7, sp, #0
 8000338:	4b04      	ldr	r3, [pc, #16]	@ (800034c <_EventClear_I2C_Reset+0x18>)
 800033a:	685a      	ldr	r2, [r3, #4]
 800033c:	7813      	ldrb	r3, [r2, #0]
 800033e:	f36f 03c3 	bfc	r3, #3, #1
 8000342:	7013      	strb	r3, [r2, #0]
 8000344:	bf00      	nop
 8000346:	46bd      	mov	sp, r7
 8000348:	bc80      	pop	{r7}
 800034a:	4770      	bx	lr
 800034c:	20000104 	.word	0x20000104

08000350 <_EventSet_Mode_Switch_Update>:

void _EventSet_Mode_Switch_Update(void)      { events.Events_Set->Mode_Switch_Update_set = 1; }
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
 8000354:	4b04      	ldr	r3, [pc, #16]	@ (8000368 <_EventSet_Mode_Switch_Update+0x18>)
 8000356:	681a      	ldr	r2, [r3, #0]
 8000358:	7813      	ldrb	r3, [r2, #0]
 800035a:	f043 0310 	orr.w	r3, r3, #16
 800035e:	7013      	strb	r3, [r2, #0]
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr
 8000368:	20000104 	.word	0x20000104

0800036c <_EventClear_Mode_Switch_Update>:
void _EventClear_Mode_Switch_Update(void)    { events.Event->Mode_Switch_Update = 0; }
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
 8000370:	4b04      	ldr	r3, [pc, #16]	@ (8000384 <_EventClear_Mode_Switch_Update+0x18>)
 8000372:	685a      	ldr	r2, [r3, #4]
 8000374:	7813      	ldrb	r3, [r2, #0]
 8000376:	f36f 1304 	bfc	r3, #4, #1
 800037a:	7013      	strb	r3, [r2, #0]
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	20000104 	.word	0x20000104

08000388 <_EventSet_Speed_Switch_Update>:

void _EventSet_Speed_Switch_Update(void)      { events.Events_Set->Speed_Switch_Update_set = 1; }
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
 800038c:	4b04      	ldr	r3, [pc, #16]	@ (80003a0 <_EventSet_Speed_Switch_Update+0x18>)
 800038e:	681a      	ldr	r2, [r3, #0]
 8000390:	7813      	ldrb	r3, [r2, #0]
 8000392:	f043 0320 	orr.w	r3, r3, #32
 8000396:	7013      	strb	r3, [r2, #0]
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr
 80003a0:	20000104 	.word	0x20000104

080003a4 <_EventClear_Speed_Switch_Update>:
void _EventClear_Speed_Switch_Update(void)    { events.Event->Speed_Switch_Update = 0; }
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
 80003a8:	4b04      	ldr	r3, [pc, #16]	@ (80003bc <_EventClear_Speed_Switch_Update+0x18>)
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	7813      	ldrb	r3, [r2, #0]
 80003ae:	f36f 1345 	bfc	r3, #5, #1
 80003b2:	7013      	strb	r3, [r2, #0]
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr
 80003bc:	20000104 	.word	0x20000104

080003c0 <_EventSet_Output_Update>:

void _EventSet_Output_Update(void)      { events.Events_Set->Output_Update_set = 1; }
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	4b04      	ldr	r3, [pc, #16]	@ (80003d8 <_EventSet_Output_Update+0x18>)
 80003c6:	681a      	ldr	r2, [r3, #0]
 80003c8:	7813      	ldrb	r3, [r2, #0]
 80003ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003ce:	7013      	strb	r3, [r2, #0]
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr
 80003d8:	20000104 	.word	0x20000104

080003dc <_EventClear_Output_Update>:
void _EventClear_Output_Update(void)    { events.Event->Output_Update = 0; }
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
 80003e0:	4b04      	ldr	r3, [pc, #16]	@ (80003f4 <_EventClear_Output_Update+0x18>)
 80003e2:	685a      	ldr	r2, [r3, #4]
 80003e4:	7813      	ldrb	r3, [r2, #0]
 80003e6:	f36f 1386 	bfc	r3, #6, #1
 80003ea:	7013      	strb	r3, [r2, #0]
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr
 80003f4:	20000104 	.word	0x20000104

080003f8 <Get_Device_Mode_State>:

enum Device_Mode Get_Device_Mode_State(void)
{
 80003f8:	b480      	push	{r7}
 80003fa:	af00      	add	r7, sp, #0
	return Device_Mode_State;
 80003fc:	4b02      	ldr	r3, [pc, #8]	@ (8000408 <Get_Device_Mode_State+0x10>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
}
 8000400:	4618      	mov	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	2000011c 	.word	0x2000011c

0800040c <set_tvoc>:

void set_tvoc(uint16_t Value)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
//Tvoc_Value = Value * 2;

	Tvoc_Value = (((Value << 8) | (Value >> 8)) & 0xFFFF) / 10;
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	021b      	lsls	r3, r3, #8
 800041a:	88fa      	ldrh	r2, [r7, #6]
 800041c:	0a12      	lsrs	r2, r2, #8
 800041e:	b292      	uxth	r2, r2
 8000420:	4313      	orrs	r3, r2
 8000422:	b29b      	uxth	r3, r3
 8000424:	4a06      	ldr	r2, [pc, #24]	@ (8000440 <set_tvoc+0x34>)
 8000426:	fb82 1203 	smull	r1, r2, r2, r3
 800042a:	1092      	asrs	r2, r2, #2
 800042c:	17db      	asrs	r3, r3, #31
 800042e:	1ad3      	subs	r3, r2, r3
 8000430:	b29a      	uxth	r2, r3
 8000432:	4b04      	ldr	r3, [pc, #16]	@ (8000444 <set_tvoc+0x38>)
 8000434:	801a      	strh	r2, [r3, #0]
}
 8000436:	bf00      	nop
 8000438:	370c      	adds	r7, #12
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr
 8000440:	66666667 	.word	0x66666667
 8000444:	20000122 	.word	0x20000122

08000448 <set_PM25>:

void set_PM25(uint16_t Value)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	80fb      	strh	r3, [r7, #6]
	PM25_Value = (((Value << 8) | (Value >> 8)) & 0xFFFF) / 10;
 8000452:	88fb      	ldrh	r3, [r7, #6]
 8000454:	021b      	lsls	r3, r3, #8
 8000456:	88fa      	ldrh	r2, [r7, #6]
 8000458:	0a12      	lsrs	r2, r2, #8
 800045a:	b292      	uxth	r2, r2
 800045c:	4313      	orrs	r3, r2
 800045e:	b29b      	uxth	r3, r3
 8000460:	4a06      	ldr	r2, [pc, #24]	@ (800047c <set_PM25+0x34>)
 8000462:	fb82 1203 	smull	r1, r2, r2, r3
 8000466:	1092      	asrs	r2, r2, #2
 8000468:	17db      	asrs	r3, r3, #31
 800046a:	1ad3      	subs	r3, r2, r3
 800046c:	b29a      	uxth	r2, r3
 800046e:	4b04      	ldr	r3, [pc, #16]	@ (8000480 <set_PM25+0x38>)
 8000470:	801a      	strh	r2, [r3, #0]
}
 8000472:	bf00      	nop
 8000474:	370c      	adds	r7, #12
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr
 800047c:	66666667 	.word	0x66666667
 8000480:	20000120 	.word	0x20000120

08000484 <set_PM1>:

void set_PM1(uint16_t Value)
{
 8000484:	b480      	push	{r7}
 8000486:	b083      	sub	sp, #12
 8000488:	af00      	add	r7, sp, #0
 800048a:	4603      	mov	r3, r0
 800048c:	80fb      	strh	r3, [r7, #6]
	PM1_Value = (((Value << 8) | (Value >> 8)) & 0xFFFF) / 10;
 800048e:	88fb      	ldrh	r3, [r7, #6]
 8000490:	021b      	lsls	r3, r3, #8
 8000492:	88fa      	ldrh	r2, [r7, #6]
 8000494:	0a12      	lsrs	r2, r2, #8
 8000496:	b292      	uxth	r2, r2
 8000498:	4313      	orrs	r3, r2
 800049a:	b29b      	uxth	r3, r3
 800049c:	4a06      	ldr	r2, [pc, #24]	@ (80004b8 <set_PM1+0x34>)
 800049e:	fb82 1203 	smull	r1, r2, r2, r3
 80004a2:	1092      	asrs	r2, r2, #2
 80004a4:	17db      	asrs	r3, r3, #31
 80004a6:	1ad3      	subs	r3, r2, r3
 80004a8:	b29a      	uxth	r2, r3
 80004aa:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <set_PM1+0x38>)
 80004ac:	801a      	strh	r2, [r3, #0]
}
 80004ae:	bf00      	nop
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bc80      	pop	{r7}
 80004b6:	4770      	bx	lr
 80004b8:	66666667 	.word	0x66666667
 80004bc:	2000011e 	.word	0x2000011e

080004c0 <Init_Values>:

void Init_Values(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
	Tvox.Tvoc_Off = 0;
 80004c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <Init_Values+0x40>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	801a      	strh	r2, [r3, #0]
	Tvox.Tvoc_1 = 150;
 80004ca:	4b0d      	ldr	r3, [pc, #52]	@ (8000500 <Init_Values+0x40>)
 80004cc:	2296      	movs	r2, #150	@ 0x96
 80004ce:	805a      	strh	r2, [r3, #2]
	Tvox.Tvoc_2 = 250;
 80004d0:	4b0b      	ldr	r3, [pc, #44]	@ (8000500 <Init_Values+0x40>)
 80004d2:	22fa      	movs	r2, #250	@ 0xfa
 80004d4:	809a      	strh	r2, [r3, #4]
	Tvox.Tvoc_3 = 400;
 80004d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000500 <Init_Values+0x40>)
 80004d8:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80004dc:	80da      	strh	r2, [r3, #6]

	NOx.NOx_Off = 0;
 80004de:	4b09      	ldr	r3, [pc, #36]	@ (8000504 <Init_Values+0x44>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	801a      	strh	r2, [r3, #0]
	NOx.NOx_1 = 20;
 80004e4:	4b07      	ldr	r3, [pc, #28]	@ (8000504 <Init_Values+0x44>)
 80004e6:	2214      	movs	r2, #20
 80004e8:	805a      	strh	r2, [r3, #2]
	NOx.NOx_2 = 150;
 80004ea:	4b06      	ldr	r3, [pc, #24]	@ (8000504 <Init_Values+0x44>)
 80004ec:	2296      	movs	r2, #150	@ 0x96
 80004ee:	809a      	strh	r2, [r3, #4]
	NOx.NOx_3 = 300;
 80004f0:	4b04      	ldr	r3, [pc, #16]	@ (8000504 <Init_Values+0x44>)
 80004f2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80004f6:	80da      	strh	r2, [r3, #6]
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	2000010c 	.word	0x2000010c
 8000504:	20000114 	.word	0x20000114

08000508 <get_input>:

uint8_t get_input(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b082      	sub	sp, #8
 800050c:	af00      	add	r7, sp, #0
	uint8_t return_value = 0;
 800050e:	2300      	movs	r3, #0
 8000510:	71fb      	strb	r3, [r7, #7]
	return_value += !HAL_GPIO_ReadPin(SW_POS_IN_1_GPIO_Port, SW_POS_IN_1_Pin);
 8000512:	2108      	movs	r1, #8
 8000514:	481d      	ldr	r0, [pc, #116]	@ (800058c <get_input+0x84>)
 8000516:	f001 fa0b 	bl	8001930 <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	bf0c      	ite	eq
 8000520:	2301      	moveq	r3, #1
 8000522:	2300      	movne	r3, #0
 8000524:	b2db      	uxtb	r3, r3
 8000526:	b2da      	uxtb	r2, r3
 8000528:	79fb      	ldrb	r3, [r7, #7]
 800052a:	4413      	add	r3, r2
 800052c:	71fb      	strb	r3, [r7, #7]
	return_value += !HAL_GPIO_ReadPin(SW_POS_IN_2_GPIO_Port, SW_POS_IN_2_Pin) << 1;
 800052e:	2110      	movs	r1, #16
 8000530:	4816      	ldr	r0, [pc, #88]	@ (800058c <get_input+0x84>)
 8000532:	f001 f9fd 	bl	8001930 <HAL_GPIO_ReadPin>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d101      	bne.n	8000540 <get_input+0x38>
 800053c:	2302      	movs	r3, #2
 800053e:	e000      	b.n	8000542 <get_input+0x3a>
 8000540:	2300      	movs	r3, #0
 8000542:	b2da      	uxtb	r2, r3
 8000544:	79fb      	ldrb	r3, [r7, #7]
 8000546:	4413      	add	r3, r2
 8000548:	71fb      	strb	r3, [r7, #7]
	return_value += !HAL_GPIO_ReadPin(SW_POS_IN_3_GPIO_Port, SW_POS_IN_3_Pin) << 2;
 800054a:	2120      	movs	r1, #32
 800054c:	480f      	ldr	r0, [pc, #60]	@ (800058c <get_input+0x84>)
 800054e:	f001 f9ef 	bl	8001930 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d101      	bne.n	800055c <get_input+0x54>
 8000558:	2304      	movs	r3, #4
 800055a:	e000      	b.n	800055e <get_input+0x56>
 800055c:	2300      	movs	r3, #0
 800055e:	b2da      	uxtb	r2, r3
 8000560:	79fb      	ldrb	r3, [r7, #7]
 8000562:	4413      	add	r3, r2
 8000564:	71fb      	strb	r3, [r7, #7]
	return_value += !HAL_GPIO_ReadPin(SW_POS_IN_4_GPIO_Port, SW_POS_IN_4_Pin) << 3;
 8000566:	2140      	movs	r1, #64	@ 0x40
 8000568:	4808      	ldr	r0, [pc, #32]	@ (800058c <get_input+0x84>)
 800056a:	f001 f9e1 	bl	8001930 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b00      	cmp	r3, #0
 8000572:	d101      	bne.n	8000578 <get_input+0x70>
 8000574:	2308      	movs	r3, #8
 8000576:	e000      	b.n	800057a <get_input+0x72>
 8000578:	2300      	movs	r3, #0
 800057a:	b2da      	uxtb	r2, r3
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	4413      	add	r3, r2
 8000580:	71fb      	strb	r3, [r7, #7]
	return return_value;
 8000582:	79fb      	ldrb	r3, [r7, #7]
}
 8000584:	4618      	mov	r0, r3
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}
 800058c:	40010800 	.word	0x40010800

08000590 <set_output>:

void set_output(uint8_t value)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SW_POS_OUT_1_GPIO_Port, SW_POS_OUT_1_Pin, !(value == 8));
 800059a:	79fb      	ldrb	r3, [r7, #7]
 800059c:	2b08      	cmp	r3, #8
 800059e:	bf14      	ite	ne
 80005a0:	2301      	movne	r3, #1
 80005a2:	2300      	moveq	r3, #0
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	461a      	mov	r2, r3
 80005a8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005ac:	4815      	ldr	r0, [pc, #84]	@ (8000604 <set_output+0x74>)
 80005ae:	f001 f9d6 	bl	800195e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_POS_OUT_2_GPIO_Port, SW_POS_OUT_2_Pin, !(value == 4));
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b04      	cmp	r3, #4
 80005b6:	bf14      	ite	ne
 80005b8:	2301      	movne	r3, #1
 80005ba:	2300      	moveq	r3, #0
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	461a      	mov	r2, r3
 80005c0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005c4:	480f      	ldr	r0, [pc, #60]	@ (8000604 <set_output+0x74>)
 80005c6:	f001 f9ca 	bl	800195e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_POS_OUT_3_GPIO_Port, SW_POS_OUT_3_Pin, !(value == 2));
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	bf14      	ite	ne
 80005d0:	2301      	movne	r3, #1
 80005d2:	2300      	moveq	r3, #0
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	461a      	mov	r2, r3
 80005d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80005dc:	4809      	ldr	r0, [pc, #36]	@ (8000604 <set_output+0x74>)
 80005de:	f001 f9be 	bl	800195e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SW_POS_OUT_4_GPIO_Port, SW_POS_OUT_4_Pin, !(value == 1));
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	bf14      	ite	ne
 80005e8:	2301      	movne	r3, #1
 80005ea:	2300      	moveq	r3, #0
 80005ec:	b2db      	uxtb	r3, r3
 80005ee:	461a      	mov	r2, r3
 80005f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <set_output+0x74>)
 80005f6:	f001 f9b2 	bl	800195e <HAL_GPIO_WritePin>
}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40010c00 	.word	0x40010c00

08000608 <Mode_Switch_Event>:

void Mode_Switch_Event(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	uint8_t switch_Posistion = HAL_GPIO_ReadPin(Mode_Switch_1_GPIO_Port, Mode_Switch_1_Pin);
 800060e:	2180      	movs	r1, #128	@ 0x80
 8000610:	4813      	ldr	r0, [pc, #76]	@ (8000660 <Mode_Switch_Event+0x58>)
 8000612:	f001 f98d 	bl	8001930 <HAL_GPIO_ReadPin>
 8000616:	4603      	mov	r3, r0
 8000618:	71fb      	strb	r3, [r7, #7]
	switch_Posistion += (HAL_GPIO_ReadPin(Mode_Switch_2_GPIO_Port, Mode_Switch_2_Pin) << 1);
 800061a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800061e:	4810      	ldr	r0, [pc, #64]	@ (8000660 <Mode_Switch_Event+0x58>)
 8000620:	f001 f986 	bl	8001930 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	b2da      	uxtb	r2, r3
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	4413      	add	r3, r2
 800062e:	71fb      	strb	r3, [r7, #7]
	if (switch_Posistion == 0b00) //auto mode
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b00      	cmp	r3, #0
 8000634:	d103      	bne.n	800063e <Mode_Switch_Event+0x36>
	{
		Device_Mode_State = Auto;
 8000636:	4b0b      	ldr	r3, [pc, #44]	@ (8000664 <Mode_Switch_Event+0x5c>)
 8000638:	2201      	movs	r2, #1
 800063a:	701a      	strb	r2, [r3, #0]
	else /* if (switch_Posistion == 0b01) // manual */
	{
		Device_Mode_State = Manual;
		_EventSet_Speed_Switch_Update();
	}
}
 800063c:	e00b      	b.n	8000656 <Mode_Switch_Event+0x4e>
	else if (switch_Posistion == 0b10) // auto + manual minimum
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	2b02      	cmp	r3, #2
 8000642:	d103      	bne.n	800064c <Mode_Switch_Event+0x44>
		Device_Mode_State = Manual_Auto;
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <Mode_Switch_Event+0x5c>)
 8000646:	2202      	movs	r2, #2
 8000648:	701a      	strb	r2, [r3, #0]
}
 800064a:	e004      	b.n	8000656 <Mode_Switch_Event+0x4e>
		Device_Mode_State = Manual;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <Mode_Switch_Event+0x5c>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
		_EventSet_Speed_Switch_Update();
 8000652:	f7ff fe99 	bl	8000388 <_EventSet_Speed_Switch_Update>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40010c00 	.word	0x40010c00
 8000664:	2000011c 	.word	0x2000011c

08000668 <Speed_Switch_Event>:

void Speed_Switch_Event(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
	speed_switch = get_input();
 800066c:	f7ff ff4c 	bl	8000508 <get_input>
 8000670:	4603      	mov	r3, r0
 8000672:	461a      	mov	r2, r3
 8000674:	4b02      	ldr	r3, [pc, #8]	@ (8000680 <Speed_Switch_Event+0x18>)
 8000676:	701a      	strb	r2, [r3, #0]
	_EventSet_Output_Update();
 8000678:	f7ff fea2 	bl	80003c0 <_EventSet_Output_Update>
}
 800067c:	bf00      	nop
 800067e:	bd80      	pop	{r7, pc}
 8000680:	2000011d 	.word	0x2000011d

08000684 <Cal_Auto_Value>:

uint8_t Cal_Auto_Value(void)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
	uint8_t Tvoc_Out = 1;
 800068a:	2301      	movs	r3, #1
 800068c:	71fb      	strb	r3, [r7, #7]
	uint8_t NOx_Out = 1;
 800068e:	2301      	movs	r3, #1
 8000690:	71bb      	strb	r3, [r7, #6]
	uint8_t NOx_Value = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	717b      	strb	r3, [r7, #5]

	if (Tvoc_Value > Tvox.Tvoc_1)
 8000696:	4b24      	ldr	r3, [pc, #144]	@ (8000728 <Cal_Auto_Value+0xa4>)
 8000698:	885a      	ldrh	r2, [r3, #2]
 800069a:	4b24      	ldr	r3, [pc, #144]	@ (800072c <Cal_Auto_Value+0xa8>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	429a      	cmp	r2, r3
 80006a0:	d202      	bcs.n	80006a8 <Cal_Auto_Value+0x24>
		Tvoc_Out = Tvoc_Out << 1;
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	71fb      	strb	r3, [r7, #7]
	if (Tvoc_Value > Tvox.Tvoc_2)
 80006a8:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <Cal_Auto_Value+0xa4>)
 80006aa:	889a      	ldrh	r2, [r3, #4]
 80006ac:	4b1f      	ldr	r3, [pc, #124]	@ (800072c <Cal_Auto_Value+0xa8>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d202      	bcs.n	80006ba <Cal_Auto_Value+0x36>
		Tvoc_Out = Tvoc_Out << 1;
 80006b4:	79fb      	ldrb	r3, [r7, #7]
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	71fb      	strb	r3, [r7, #7]
	if (Tvoc_Value > Tvox.Tvoc_3)
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <Cal_Auto_Value+0xa4>)
 80006bc:	88da      	ldrh	r2, [r3, #6]
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <Cal_Auto_Value+0xa8>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	429a      	cmp	r2, r3
 80006c4:	d202      	bcs.n	80006cc <Cal_Auto_Value+0x48>
		Tvoc_Out = Tvoc_Out << 1;
 80006c6:	79fb      	ldrb	r3, [r7, #7]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	71fb      	strb	r3, [r7, #7]

	NOx_Value = PM1_Value + PM25_Value;
 80006cc:	4b18      	ldr	r3, [pc, #96]	@ (8000730 <Cal_Auto_Value+0xac>)
 80006ce:	881b      	ldrh	r3, [r3, #0]
 80006d0:	b2da      	uxtb	r2, r3
 80006d2:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <Cal_Auto_Value+0xb0>)
 80006d4:	881b      	ldrh	r3, [r3, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4413      	add	r3, r2
 80006da:	717b      	strb	r3, [r7, #5]

	if (NOx_Value > NOx.NOx_1)
 80006dc:	797b      	ldrb	r3, [r7, #5]
 80006de:	b29a      	uxth	r2, r3
 80006e0:	4b15      	ldr	r3, [pc, #84]	@ (8000738 <Cal_Auto_Value+0xb4>)
 80006e2:	885b      	ldrh	r3, [r3, #2]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d902      	bls.n	80006ee <Cal_Auto_Value+0x6a>
		NOx_Out = NOx_Out << 1;
 80006e8:	79bb      	ldrb	r3, [r7, #6]
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	71bb      	strb	r3, [r7, #6]
	if (NOx_Value > NOx.NOx_2)
 80006ee:	797b      	ldrb	r3, [r7, #5]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	4b11      	ldr	r3, [pc, #68]	@ (8000738 <Cal_Auto_Value+0xb4>)
 80006f4:	889b      	ldrh	r3, [r3, #4]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d902      	bls.n	8000700 <Cal_Auto_Value+0x7c>
		NOx_Out = NOx_Out << 1;
 80006fa:	79bb      	ldrb	r3, [r7, #6]
 80006fc:	005b      	lsls	r3, r3, #1
 80006fe:	71bb      	strb	r3, [r7, #6]
	if (NOx_Value > NOx.NOx_3)
 8000700:	797b      	ldrb	r3, [r7, #5]
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b0c      	ldr	r3, [pc, #48]	@ (8000738 <Cal_Auto_Value+0xb4>)
 8000706:	88db      	ldrh	r3, [r3, #6]
 8000708:	429a      	cmp	r2, r3
 800070a:	d902      	bls.n	8000712 <Cal_Auto_Value+0x8e>
		NOx_Out = NOx_Out << 1;
 800070c:	79bb      	ldrb	r3, [r7, #6]
 800070e:	005b      	lsls	r3, r3, #1
 8000710:	71bb      	strb	r3, [r7, #6]

	return (NOx_Out > Tvoc_Out) ? NOx_Out : Tvoc_Out;
 8000712:	79fa      	ldrb	r2, [r7, #7]
 8000714:	79bb      	ldrb	r3, [r7, #6]
 8000716:	4293      	cmp	r3, r2
 8000718:	bf38      	it	cc
 800071a:	4613      	movcc	r3, r2
 800071c:	b2db      	uxtb	r3, r3
}
 800071e:	4618      	mov	r0, r3
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr
 8000728:	2000010c 	.word	0x2000010c
 800072c:	20000122 	.word	0x20000122
 8000730:	2000011e 	.word	0x2000011e
 8000734:	20000120 	.word	0x20000120
 8000738:	20000114 	.word	0x20000114

0800073c <Update_Output>:

void Update_Output(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t value_out = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
	switch (Device_Mode_State) {
 8000746:	4b23      	ldr	r3, [pc, #140]	@ (80007d4 <Update_Output+0x98>)
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d01f      	beq.n	800078e <Update_Output+0x52>
 800074e:	2b02      	cmp	r3, #2
 8000750:	dc37      	bgt.n	80007c2 <Update_Output+0x86>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <Update_Output+0x20>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d009      	beq.n	800076e <Update_Output+0x32>
			value_out = (manual_out > auto_out) ? manual_out : auto_out;
			HAL_GPIO_WritePin(Mode_Led_GPIO_Port, Mode_Led_Pin, (auto_out > manual_out));

			break;
		default:
			break;
 800075a:	e032      	b.n	80007c2 <Update_Output+0x86>
			value_out = speed_switch;
 800075c:	4b1e      	ldr	r3, [pc, #120]	@ (80007d8 <Update_Output+0x9c>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	71fb      	strb	r3, [r7, #7]
			HAL_GPIO_WritePin(Mode_Led_GPIO_Port, Mode_Led_Pin, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	481d      	ldr	r0, [pc, #116]	@ (80007dc <Update_Output+0xa0>)
 8000768:	f001 f8f9 	bl	800195e <HAL_GPIO_WritePin>
			break;
 800076c:	e02a      	b.n	80007c4 <Update_Output+0x88>
				value_out = Cal_Auto_Value();
 800076e:	f7ff ff89 	bl	8000684 <Cal_Auto_Value>
 8000772:	4603      	mov	r3, r0
 8000774:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(Mode_Led_GPIO_Port, Mode_Led_Pin, (value_out > 1));
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	2b01      	cmp	r3, #1
 800077a:	bf8c      	ite	hi
 800077c:	2301      	movhi	r3, #1
 800077e:	2300      	movls	r3, #0
 8000780:	b2db      	uxtb	r3, r3
 8000782:	461a      	mov	r2, r3
 8000784:	2120      	movs	r1, #32
 8000786:	4815      	ldr	r0, [pc, #84]	@ (80007dc <Update_Output+0xa0>)
 8000788:	f001 f8e9 	bl	800195e <HAL_GPIO_WritePin>
			break;
 800078c:	e01a      	b.n	80007c4 <Update_Output+0x88>
			uint8_t manual_out = speed_switch;
 800078e:	4b12      	ldr	r3, [pc, #72]	@ (80007d8 <Update_Output+0x9c>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	71bb      	strb	r3, [r7, #6]
			uint8_t auto_out = Cal_Auto_Value();
 8000794:	f7ff ff76 	bl	8000684 <Cal_Auto_Value>
 8000798:	4603      	mov	r3, r0
 800079a:	717b      	strb	r3, [r7, #5]
			value_out = (manual_out > auto_out) ? manual_out : auto_out;
 800079c:	797a      	ldrb	r2, [r7, #5]
 800079e:	79bb      	ldrb	r3, [r7, #6]
 80007a0:	4293      	cmp	r3, r2
 80007a2:	bf38      	it	cc
 80007a4:	4613      	movcc	r3, r2
 80007a6:	71fb      	strb	r3, [r7, #7]
			HAL_GPIO_WritePin(Mode_Led_GPIO_Port, Mode_Led_Pin, (auto_out > manual_out));
 80007a8:	797a      	ldrb	r2, [r7, #5]
 80007aa:	79bb      	ldrb	r3, [r7, #6]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	bf8c      	ite	hi
 80007b0:	2301      	movhi	r3, #1
 80007b2:	2300      	movls	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	461a      	mov	r2, r3
 80007b8:	2120      	movs	r1, #32
 80007ba:	4808      	ldr	r0, [pc, #32]	@ (80007dc <Update_Output+0xa0>)
 80007bc:	f001 f8cf 	bl	800195e <HAL_GPIO_WritePin>
			break;
 80007c0:	e000      	b.n	80007c4 <Update_Output+0x88>
			break;
 80007c2:	bf00      	nop
	}
	set_output(value_out);
 80007c4:	79fb      	ldrb	r3, [r7, #7]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fee2 	bl	8000590 <set_output>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	2000011c 	.word	0x2000011c
 80007d8:	2000011d 	.word	0x2000011d
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <Handle_Events>:

void Handle_Events(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	if ( events.Event->I2C_Rx != 0 ) //TCC RX from PC
 80007e6:	4b26      	ldr	r3, [pc, #152]	@ (8000880 <Handle_Events+0xa0>)
 80007e8:	685b      	ldr	r3, [r3, #4]
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <Handle_Events+0x1a>
	{

	  _EventClear_I2C_Rx();
 80007f6:	f7ff fd81 	bl	80002fc <_EventClear_I2C_Rx>
	}

	if ( events.Event->I2C_Reset != 0 ) //TCC RX from PC
 80007fa:	4b21      	ldr	r3, [pc, #132]	@ (8000880 <Handle_Events+0xa0>)
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0308 	and.w	r3, r3, #8
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <Handle_Events+0x32>
	{
	  I2C_Reset();
 800080a:	f000 fa4f 	bl	8000cac <I2C_Reset>
	  _EventClear_I2C_Reset();
 800080e:	f7ff fd91 	bl	8000334 <_EventClear_I2C_Reset>
	}

	if ( events.Event->Mode_Switch_Update != 0 ) //TCC RX from PC
 8000812:	4b1b      	ldr	r3, [pc, #108]	@ (8000880 <Handle_Events+0xa0>)
 8000814:	685b      	ldr	r3, [r3, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d003      	beq.n	800082a <Handle_Events+0x4a>
	{
		Mode_Switch_Event();
 8000822:	f7ff fef1 	bl	8000608 <Mode_Switch_Event>
		_EventClear_Mode_Switch_Update();
 8000826:	f7ff fda1 	bl	800036c <_EventClear_Mode_Switch_Update>
	}

	if ( events.Event->Speed_Switch_Update != 0 ) //TCC RX from PC
 800082a:	4b15      	ldr	r3, [pc, #84]	@ (8000880 <Handle_Events+0xa0>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	f003 0320 	and.w	r3, r3, #32
 8000834:	b2db      	uxtb	r3, r3
 8000836:	2b00      	cmp	r3, #0
 8000838:	d003      	beq.n	8000842 <Handle_Events+0x62>
	{
		Speed_Switch_Event();
 800083a:	f7ff ff15 	bl	8000668 <Speed_Switch_Event>
		_EventClear_Speed_Switch_Update();
 800083e:	f7ff fdb1 	bl	80003a4 <_EventClear_Speed_Switch_Update>
	}

	if ( events.Event->Output_Update != 0 ) //TCC RX from PC
 8000842:	4b0f      	ldr	r3, [pc, #60]	@ (8000880 <Handle_Events+0xa0>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800084c:	b2db      	uxtb	r3, r3
 800084e:	2b00      	cmp	r3, #0
 8000850:	d003      	beq.n	800085a <Handle_Events+0x7a>
	{
		Update_Output();
 8000852:	f7ff ff73 	bl	800073c <Update_Output>
		_EventClear_Output_Update();
 8000856:	f7ff fdc1 	bl	80003dc <_EventClear_Output_Update>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800085a:	b672      	cpsid	i
}
 800085c:	bf00      	nop

	}

	__disable_irq();
	void* tmp = events.Event;
 800085e:	4b08      	ldr	r3, [pc, #32]	@ (8000880 <Handle_Events+0xa0>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	607b      	str	r3, [r7, #4]
	events.Event = events.Events_Set;
 8000864:	4b06      	ldr	r3, [pc, #24]	@ (8000880 <Handle_Events+0xa0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	4a05      	ldr	r2, [pc, #20]	@ (8000880 <Handle_Events+0xa0>)
 800086a:	6053      	str	r3, [r2, #4]
	events.Events_Set = tmp;
 800086c:	4a04      	ldr	r2, [pc, #16]	@ (8000880 <Handle_Events+0xa0>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000872:	b662      	cpsie	i
}
 8000874:	bf00      	nop
	__enable_irq();
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	20000104 	.word	0x20000104

08000884 <Set_SCL_RisingNFalling>:


enum Bus_State main_State;

void Set_SCL_RisingNFalling(bool RisingNFalling) //set SCL interrupt to Rising edge when bool = true, set interrupt to falling edge when bool = false
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 0308 	add.w	r3, r7, #8
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : SCL_Pin_Pin */
  if (RisingNFalling)
 800089c:	79fb      	ldrb	r3, [r7, #7]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d002      	beq.n	80008a8 <Set_SCL_RisingNFalling+0x24>
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	4b09      	ldr	r3, [pc, #36]	@ (80008c8 <Set_SCL_RisingNFalling+0x44>)
 80008a4:	60fb      	str	r3, [r7, #12]
 80008a6:	e001      	b.n	80008ac <Set_SCL_RisingNFalling+0x28>
  else
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008a8:	4b08      	ldr	r3, [pc, #32]	@ (80008cc <Set_SCL_RisingNFalling+0x48>)
 80008aa:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = SCL_Pin_Pin;
 80008ac:	2301      	movs	r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b0:	2300      	movs	r3, #0
 80008b2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SCL_Pin_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 0308 	add.w	r3, r7, #8
 80008b8:	4619      	mov	r1, r3
 80008ba:	4805      	ldr	r0, [pc, #20]	@ (80008d0 <Set_SCL_RisingNFalling+0x4c>)
 80008bc:	f000 feb4 	bl	8001628 <HAL_GPIO_Init>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	10110000 	.word	0x10110000
 80008cc:	10210000 	.word	0x10210000
 80008d0:	40010c00 	.word	0x40010c00

080008d4 <Set_SDA_RisingNFalling>:

void Set_SDA_RisingNFalling(bool RisingNFalling) //set SDA interrupt to Rising edge when bool = true, set interrupt to falling edge when bool = false
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
  /*Configure GPIO pin : SDA_Pin_Pin */
  if (RisingNFalling)
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <Set_SDA_RisingNFalling+0x24>
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f2:	4b09      	ldr	r3, [pc, #36]	@ (8000918 <Set_SDA_RisingNFalling+0x44>)
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	e001      	b.n	80008fc <Set_SDA_RisingNFalling+0x28>
  else
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008f8:	4b08      	ldr	r3, [pc, #32]	@ (800091c <Set_SDA_RisingNFalling+0x48>)
 80008fa:	60fb      	str	r3, [r7, #12]

  GPIO_InitStruct.Pin = SDA_Pin_Pin;
 80008fc:	2302      	movs	r3, #2
 80008fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(SDA_Pin_GPIO_Port, &GPIO_InitStruct);
 8000904:	f107 0308 	add.w	r3, r7, #8
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	@ (8000920 <Set_SDA_RisingNFalling+0x4c>)
 800090c:	f000 fe8c 	bl	8001628 <HAL_GPIO_Init>
}
 8000910:	bf00      	nop
 8000912:	3718      	adds	r7, #24
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	10110000 	.word	0x10110000
 800091c:	10210000 	.word	0x10210000
 8000920:	40010c00 	.word	0x40010c00

08000924 <Set_SCL_INT>:

void Set_SCL_INT(bool Enable) //Enable or disable SCL external interrupt, required they share an interrupt flag
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	71fb      	strb	r3, [r7, #7]
  /*Configure GPIO pin : SCL_Pin_Pin */
  SCL_Enable = Enable;
 800092e:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <Set_SCL_INT+0x1c>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	7013      	strb	r3, [r2, #0]
}
 8000934:	bf00      	nop
 8000936:	370c      	adds	r7, #12
 8000938:	46bd      	mov	sp, r7
 800093a:	bc80      	pop	{r7}
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	2000014c 	.word	0x2000014c

08000944 <Set_SDA_INT>:

void Set_SDA_INT(bool Enable) //Enable or disable SCL external interrupt, required they share an interrupt flag
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	4603      	mov	r3, r0
 800094c:	71fb      	strb	r3, [r7, #7]
  /*Configure GPIO pin : SCL_Pin_Pin */
  SDA_Enable = Enable;
 800094e:	4a04      	ldr	r2, [pc, #16]	@ (8000960 <Set_SDA_INT+0x1c>)
 8000950:	79fb      	ldrb	r3, [r7, #7]
 8000952:	7013      	strb	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	2000014d 	.word	0x2000014d

08000964 <I2C_Init>:

void I2C_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	  main_State = Wait_Start;
 8000968:	4b08      	ldr	r3, [pc, #32]	@ (800098c <I2C_Init+0x28>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
	  BufferR = &BufferR_;	//bind pointer to physical location
 800096e:	4b08      	ldr	r3, [pc, #32]	@ (8000990 <I2C_Init+0x2c>)
 8000970:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <I2C_Init+0x30>)
 8000972:	601a      	str	r2, [r3, #0]
	  Set_SDA_RisingNFalling(false); // set SDA external interrupt to Falling edge
 8000974:	2000      	movs	r0, #0
 8000976:	f7ff ffad 	bl	80008d4 <Set_SDA_RisingNFalling>
	  Set_SDA_INT(true);	// initiate SDA interrupt for bus state = wait_start
 800097a:	2001      	movs	r0, #1
 800097c:	f7ff ffe2 	bl	8000944 <Set_SDA_INT>
	  Set_SCL_INT(false); 	// initiate SCL interrupt for bus state = wait_start
 8000980:	2000      	movs	r0, #0
 8000982:	f7ff ffcf 	bl	8000924 <Set_SCL_INT>
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	2000014e 	.word	0x2000014e
 8000990:	20000148 	.word	0x20000148
 8000994:	20000128 	.word	0x20000128

08000998 <Bus_State_Handler>:

void Bus_State_Handler(uint8_t source) // I2C bus state interupt handler. the state of the bus is changed acording to the state and the interupt source (SDA or SCL)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	71fb      	strb	r3, [r7, #7]

  switch (main_State) {
 80009a2:	4bab      	ldr	r3, [pc, #684]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	f200 813d 	bhi.w	8000c26 <Bus_State_Handler+0x28e>
 80009ac:	a201      	add	r2, pc, #4	@ (adr r2, 80009b4 <Bus_State_Handler+0x1c>)
 80009ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009b2:	bf00      	nop
 80009b4:	080009c5 	.word	0x080009c5
 80009b8:	08000bb9 	.word	0x08000bb9
 80009bc:	08000b01 	.word	0x08000b01
 80009c0:	08000a39 	.word	0x08000a39
	  case Wait_Start: // wait for I2C start
		  if (source == SDA) // if the SDA gets a falling edge this is the start of the I2C start
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d117      	bne.n	80009fa <Bus_State_Handler+0x62>
		  {
			  if(HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin)/* && !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) */)
 80009ca:	2101      	movs	r1, #1
 80009cc:	48a1      	ldr	r0, [pc, #644]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 80009ce:	f000 ffaf 	bl	8001930 <HAL_GPIO_ReadPin>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d00c      	beq.n	80009f2 <Bus_State_Handler+0x5a>
			  {
				  Set_SCL_RisingNFalling(true);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ff53 	bl	8000884 <Set_SCL_RisingNFalling>
				  Set_SDA_INT(false);
 80009de:	2000      	movs	r0, #0
 80009e0:	f7ff ffb0 	bl	8000944 <Set_SDA_INT>
				  Set_SCL_INT(true);
 80009e4:	2001      	movs	r0, #1
 80009e6:	f7ff ff9d 	bl	8000924 <Set_SCL_INT>
				  main_State = Read_Address;
 80009ea:	4b99      	ldr	r3, [pc, #612]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 80009ec:	2203      	movs	r2, #3
 80009ee:	701a      	strb	r2, [r3, #0]
			  else
				main_State = Reset;
		  }
		  else
			  main_State = Reset;
		  break;
 80009f0:	e124      	b.n	8000c3c <Bus_State_Handler+0x2a4>
				main_State = Reset;
 80009f2:	4b97      	ldr	r3, [pc, #604]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 80009f4:	2204      	movs	r2, #4
 80009f6:	701a      	strb	r2, [r3, #0]
		  break;
 80009f8:	e120      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  else if (source == SCL) // After the SDA went low, SCK should go low
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d117      	bne.n	8000a30 <Bus_State_Handler+0x98>
			  if(!HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin))  //&& !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) // (do not check if SDA pin is low or high, the start and the first bit are to close together for the microcontroller to check the correct state)
 8000a00:	2101      	movs	r1, #1
 8000a02:	4894      	ldr	r0, [pc, #592]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000a04:	f000 ff94 	bl	8001930 <HAL_GPIO_ReadPin>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d10c      	bne.n	8000a28 <Bus_State_Handler+0x90>
				  Set_SCL_RisingNFalling(true);
 8000a0e:	2001      	movs	r0, #1
 8000a10:	f7ff ff38 	bl	8000884 <Set_SCL_RisingNFalling>
				  Set_SDA_INT(false);
 8000a14:	2000      	movs	r0, #0
 8000a16:	f7ff ff95 	bl	8000944 <Set_SDA_INT>
				  Set_SCL_INT(true);
 8000a1a:	2001      	movs	r0, #1
 8000a1c:	f7ff ff82 	bl	8000924 <Set_SCL_INT>
				  main_State = Read_Address; // start is received next is I2C address
 8000a20:	4b8b      	ldr	r3, [pc, #556]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000a22:	2203      	movs	r2, #3
 8000a24:	701a      	strb	r2, [r3, #0]
		  break;
 8000a26:	e109      	b.n	8000c3c <Bus_State_Handler+0x2a4>
				main_State = Reset;
 8000a28:	4b89      	ldr	r3, [pc, #548]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
		  break;
 8000a2e:	e105      	b.n	8000c3c <Bus_State_Handler+0x2a4>
			  main_State = Reset;
 8000a30:	4b87      	ldr	r3, [pc, #540]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000a32:	2204      	movs	r2, #4
 8000a34:	701a      	strb	r2, [r3, #0]
		  break;
 8000a36:	e101      	b.n	8000c3c <Bus_State_Handler+0x2a4>
	  case Read_Address: // address byte = 9 bit long 7 address, 1 read/wrtie, 1 ack/nack
		  if (source == SCL)
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d15c      	bne.n	8000af8 <Bus_State_Handler+0x160>
		  {
			  if (Bit_Count >= 3) // bit count is counting down from 9, when less than 3 are left the bits are no longer part of the address so not important to store
 8000a3e:	4b86      	ldr	r3, [pc, #536]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	2b02      	cmp	r3, #2
 8000a46:	d915      	bls.n	8000a74 <Bus_State_Handler+0xdc>
				  Data_Byte |= (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) << (Bit_Count - 3));
 8000a48:	2102      	movs	r1, #2
 8000a4a:	4882      	ldr	r0, [pc, #520]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000a4c:	f000 ff70 	bl	8001930 <HAL_GPIO_ReadPin>
 8000a50:	4603      	mov	r3, r0
 8000a52:	461a      	mov	r2, r3
 8000a54:	4b80      	ldr	r3, [pc, #512]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000a56:	781b      	ldrb	r3, [r3, #0]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	3b03      	subs	r3, #3
 8000a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a60:	b25a      	sxtb	r2, r3
 8000a62:	4b7e      	ldr	r3, [pc, #504]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	4313      	orrs	r3, r2
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	b2da      	uxtb	r2, r3
 8000a70:	4b7a      	ldr	r3, [pc, #488]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000a72:	701a      	strb	r2, [r3, #0]
		  	  Bit_Count--;
 8000a74:	4b78      	ldr	r3, [pc, #480]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	3b01      	subs	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b76      	ldr	r3, [pc, #472]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000a80:	701a      	strb	r2, [r3, #0]
		  	  if (Bit_Count == 2) // check if the received address corresponds with the known sensor address of 0x69 or 105 in base 10
 8000a82:	4b75      	ldr	r3, [pc, #468]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d109      	bne.n	8000aa0 <Bus_State_Handler+0x108>
		  	  {
		  		  if (Data_Byte != 105)
 8000a8c:	4b73      	ldr	r3, [pc, #460]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000a8e:	781b      	ldrb	r3, [r3, #0]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	2b69      	cmp	r3, #105	@ 0x69
 8000a94:	f000 80cb 	beq.w	8000c2e <Bus_State_Handler+0x296>
		  			main_State = Reset;
 8000a98:	4b6d      	ldr	r3, [pc, #436]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000a9a:	2204      	movs	r2, #4
 8000a9c:	701a      	strb	r2, [r3, #0]
		  		  break;
 8000a9e:	e0c6      	b.n	8000c2e <Bus_State_Handler+0x296>
		  	  }
		  	  if (Bit_Count == 1) // check read / write, if bit is write ignore everything, reset and wait for the next message
 8000aa0:	4b6d      	ldr	r3, [pc, #436]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d10b      	bne.n	8000ac2 <Bus_State_Handler+0x12a>
		  	  {
				  if (!HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin))
 8000aaa:	2102      	movs	r1, #2
 8000aac:	4869      	ldr	r0, [pc, #420]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000aae:	f000 ff3f 	bl	8001930 <HAL_GPIO_ReadPin>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	f040 80bc 	bne.w	8000c32 <Bus_State_Handler+0x29a>
					  main_State = Reset;
 8000aba:	4b65      	ldr	r3, [pc, #404]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000abc:	2204      	movs	r2, #4
 8000abe:	701a      	strb	r2, [r3, #0]
				  break;
 8000ac0:	e0b7      	b.n	8000c32 <Bus_State_Handler+0x29a>
		  	  }
		  	  if (Bit_Count == 0) // ack / nack bit, check if the sensor responds a ack meaning the address was correctly received by the sensor
 8000ac2:	4b65      	ldr	r3, [pc, #404]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f040 80b4 	bne.w	8000c36 <Bus_State_Handler+0x29e>
		  	  {
				  if (!HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin)) // ack received go to read data
 8000ace:	2102      	movs	r1, #2
 8000ad0:	4860      	ldr	r0, [pc, #384]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000ad2:	f000 ff2d 	bl	8001930 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d109      	bne.n	8000af0 <Bus_State_Handler+0x158>
				  {
					  Data_Byte = 0;
 8000adc:	4b5f      	ldr	r3, [pc, #380]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
				  	  Bit_Count = 9;
 8000ae2:	4b5d      	ldr	r3, [pc, #372]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000ae4:	2209      	movs	r2, #9
 8000ae6:	701a      	strb	r2, [r3, #0]
					  main_State = Read_Data;
 8000ae8:	4b59      	ldr	r3, [pc, #356]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000aea:	2202      	movs	r2, #2
 8000aec:	701a      	strb	r2, [r3, #0]
				  }
				  else
					  main_State = Reset;
				  break;
 8000aee:	e0a5      	b.n	8000c3c <Bus_State_Handler+0x2a4>
					  main_State = Reset;
 8000af0:	4b57      	ldr	r3, [pc, #348]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	701a      	strb	r2, [r3, #0]
				  break;
 8000af6:	e0a1      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  	  }
		  }
		  else
			  main_State = Reset;
 8000af8:	4b55      	ldr	r3, [pc, #340]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000afa:	2204      	movs	r2, #4
 8000afc:	701a      	strb	r2, [r3, #0]
		  break;
 8000afe:	e09a      	b.n	8000c36 <Bus_State_Handler+0x29e>
	  case Read_Data: // Data byte = 9 bit long 8 data, 1 ack/nack
		  if (source == SCL)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d154      	bne.n	8000bb0 <Bus_State_Handler+0x218>
		  {
			  if (Bit_Count >= 2) // bit count is counting down from 9, when less than 2 are left the bits are no longer part of the data so not important to store
 8000b06:	4b54      	ldr	r3, [pc, #336]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d915      	bls.n	8000b3c <Bus_State_Handler+0x1a4>
				  Data_Byte |= (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) << (Bit_Count - 2));
 8000b10:	2102      	movs	r1, #2
 8000b12:	4850      	ldr	r0, [pc, #320]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000b14:	f000 ff0c 	bl	8001930 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b4e      	ldr	r3, [pc, #312]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3b02      	subs	r3, #2
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	b25a      	sxtb	r2, r3
 8000b2a:	4b4c      	ldr	r3, [pc, #304]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	b25b      	sxtb	r3, r3
 8000b32:	4313      	orrs	r3, r2
 8000b34:	b25b      	sxtb	r3, r3
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b48      	ldr	r3, [pc, #288]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000b3a:	701a      	strb	r2, [r3, #0]
			  Bit_Count--;
 8000b3c:	4b46      	ldr	r3, [pc, #280]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3b01      	subs	r3, #1
 8000b44:	b2da      	uxtb	r2, r3
 8000b46:	4b44      	ldr	r3, [pc, #272]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b48:	701a      	strb	r2, [r3, #0]
			  if (Bit_Count == 1) // last data bit received store the received byte in the packet buffer
 8000b4a:	4b43      	ldr	r3, [pc, #268]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	d113      	bne.n	8000b7c <Bus_State_Handler+0x1e4>
			  {
				  (*(uint8_t *)(BufferR))++; // add one to the packer buffer size
 8000b54:	4b42      	ldr	r3, [pc, #264]	@ (8000c60 <Bus_State_Handler+0x2c8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	781a      	ldrb	r2, [r3, #0]
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	b2d2      	uxtb	r2, r2
 8000b5e:	701a      	strb	r2, [r3, #0]
				  (*(uint8_t *)(BufferR + rbuf_index++)) = Data_Byte; //add data to the packet buffer and set the point one higher for the next byte
 8000b60:	4b3f      	ldr	r3, [pc, #252]	@ (8000c60 <Bus_State_Handler+0x2c8>)
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	4b3f      	ldr	r3, [pc, #252]	@ (8000c64 <Bus_State_Handler+0x2cc>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	1c59      	adds	r1, r3, #1
 8000b6c:	b2c8      	uxtb	r0, r1
 8000b6e:	493d      	ldr	r1, [pc, #244]	@ (8000c64 <Bus_State_Handler+0x2cc>)
 8000b70:	7008      	strb	r0, [r1, #0]
 8000b72:	4413      	add	r3, r2
 8000b74:	4a39      	ldr	r2, [pc, #228]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	b2d2      	uxtb	r2, r2
 8000b7a:	701a      	strb	r2, [r3, #0]
			  }
			  if (Bit_Count == 0) // ack/nack received check. ack = more data is to come, nack = end of packet stop receiving data and wait for stop
 8000b7c:	4b36      	ldr	r3, [pc, #216]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d159      	bne.n	8000c3a <Bus_State_Handler+0x2a2>
			  {
				  if (HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin))
 8000b86:	2102      	movs	r1, #2
 8000b88:	4832      	ldr	r0, [pc, #200]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000b8a:	f000 fed1 	bl	8001930 <HAL_GPIO_ReadPin>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d003      	beq.n	8000b9c <Bus_State_Handler+0x204>
				  {
					  main_State = Wait_Stop; // data packet received wait for stop
 8000b94:	4b2e      	ldr	r3, [pc, #184]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	701a      	strb	r2, [r3, #0]
				  {
					  Data_Byte = 0;
				  	  Bit_Count = 9;
					  main_State = Read_Data; // reset counters and get next byte
				  }
				  break;
 8000b9a:	e04f      	b.n	8000c3c <Bus_State_Handler+0x2a4>
					  Data_Byte = 0;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	@ (8000c5c <Bus_State_Handler+0x2c4>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	701a      	strb	r2, [r3, #0]
				  	  Bit_Count = 9;
 8000ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8000c58 <Bus_State_Handler+0x2c0>)
 8000ba4:	2209      	movs	r2, #9
 8000ba6:	701a      	strb	r2, [r3, #0]
					  main_State = Read_Data; // reset counters and get next byte
 8000ba8:	4b29      	ldr	r3, [pc, #164]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000baa:	2202      	movs	r2, #2
 8000bac:	701a      	strb	r2, [r3, #0]
				  break;
 8000bae:	e045      	b.n	8000c3c <Bus_State_Handler+0x2a4>
			  }
		  }
		  else
			  main_State = Reset;
 8000bb0:	4b27      	ldr	r3, [pc, #156]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000bb2:	2204      	movs	r2, #4
 8000bb4:	701a      	strb	r2, [r3, #0]
		  break;
 8000bb6:	e040      	b.n	8000c3a <Bus_State_Handler+0x2a2>
	  case Wait_Stop: // wait for stop first scl goes high than SDA goes high
		  if (source == SCL)
 8000bb8:	79fb      	ldrb	r3, [r7, #7]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d11a      	bne.n	8000bf4 <Bus_State_Handler+0x25c>
		  {
			  if(/*HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin) &&*/ !HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin)) // SCL went high
 8000bbe:	2102      	movs	r1, #2
 8000bc0:	4824      	ldr	r0, [pc, #144]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000bc2:	f000 feb5 	bl	8001930 <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d10f      	bne.n	8000bec <Bus_State_Handler+0x254>
			  {
				  Set_SDA_RisingNFalling(true);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f7ff fe81 	bl	80008d4 <Set_SDA_RisingNFalling>
				  Set_SDA_INT(true);
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	f7ff feb6 	bl	8000944 <Set_SDA_INT>
				  Set_SCL_INT(false);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff fea3 	bl	8000924 <Set_SCL_INT>
				  R_Push(&BufferR);
 8000bde:	4820      	ldr	r0, [pc, #128]	@ (8000c60 <Bus_State_Handler+0x2c8>)
 8000be0:	f7ff fb0a 	bl	80001f8 <R_Push>

				  main_State = Reset;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	701a      	strb	r2, [r3, #0]
			  else
				  main_State = Reset;
		  }
		  else
			  main_State = Reset;
		  break;
 8000bea:	e027      	b.n	8000c3c <Bus_State_Handler+0x2a4>
				main_State = Reset;
 8000bec:	4b18      	ldr	r3, [pc, #96]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	701a      	strb	r2, [r3, #0]
		  break;
 8000bf2:	e023      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  else if (source == SDA)
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b01      	cmp	r3, #1
 8000bf8:	d111      	bne.n	8000c1e <Bus_State_Handler+0x286>
			  if(HAL_GPIO_ReadPin(SCL_Pin_GPIO_Port, SCL_Pin_Pin) /*&& HAL_GPIO_ReadPin(SDA_Pin_GPIO_Port, SDA_Pin_Pin) */) // SDA went high
 8000bfa:	2101      	movs	r1, #1
 8000bfc:	4815      	ldr	r0, [pc, #84]	@ (8000c54 <Bus_State_Handler+0x2bc>)
 8000bfe:	f000 fe97 	bl	8001930 <HAL_GPIO_ReadPin>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d006      	beq.n	8000c16 <Bus_State_Handler+0x27e>
				  R_Push(&BufferR);
 8000c08:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <Bus_State_Handler+0x2c8>)
 8000c0a:	f7ff faf5 	bl	80001f8 <R_Push>
				  main_State = Reset;
 8000c0e:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000c10:	2204      	movs	r2, #4
 8000c12:	701a      	strb	r2, [r3, #0]
		  break;
 8000c14:	e012      	b.n	8000c3c <Bus_State_Handler+0x2a4>
				  main_State = Reset;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	701a      	strb	r2, [r3, #0]
		  break;
 8000c1c:	e00e      	b.n	8000c3c <Bus_State_Handler+0x2a4>
			  main_State = Reset;
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000c20:	2204      	movs	r2, #4
 8000c22:	701a      	strb	r2, [r3, #0]
		  break;
 8000c24:	e00a      	b.n	8000c3c <Bus_State_Handler+0x2a4>
	  default:
		  main_State = Reset;
 8000c26:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000c28:	2204      	movs	r2, #4
 8000c2a:	701a      	strb	r2, [r3, #0]
		  break;
 8000c2c:	e006      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  		  break;
 8000c2e:	bf00      	nop
 8000c30:	e004      	b.n	8000c3c <Bus_State_Handler+0x2a4>
				  break;
 8000c32:	bf00      	nop
 8000c34:	e002      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  break;
 8000c36:	bf00      	nop
 8000c38:	e000      	b.n	8000c3c <Bus_State_Handler+0x2a4>
		  break;
 8000c3a:	bf00      	nop
  }
  if ( main_State == Reset)
 8000c3c:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <Bus_State_Handler+0x2b8>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b04      	cmp	r3, #4
 8000c42:	d101      	bne.n	8000c48 <Bus_State_Handler+0x2b0>
  	  _EventSet_I2C_Reset();
 8000c44:	f7ff fb68 	bl	8000318 <_EventSet_I2C_Reset>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	2000014e 	.word	0x2000014e
 8000c54:	40010c00 	.word	0x40010c00
 8000c58:	20000001 	.word	0x20000001
 8000c5c:	20000124 	.word	0x20000124
 8000c60:	20000148 	.word	0x20000148
 8000c64:	20000002 	.word	0x20000002

08000c68 <Check_Interupt>:

void Check_Interupt(uint16_t GPIO_Pin)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == SDA_Pin_Pin && SDA_Enable == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c72:	88fb      	ldrh	r3, [r7, #6]
 8000c74:	2b02      	cmp	r3, #2
 8000c76:	d107      	bne.n	8000c88 <Check_Interupt+0x20>
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <Check_Interupt+0x3c>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d003      	beq.n	8000c88 <Check_Interupt+0x20>
		Bus_State_Handler(SDA);
 8000c80:	2001      	movs	r0, #1
 8000c82:	f7ff fe89 	bl	8000998 <Bus_State_Handler>
	else if(GPIO_Pin == SCL_Pin_Pin && SCL_Enable == true) // If The INT Source Is EXTI Line9 (A9 Pin)
		Bus_State_Handler(SCL);
}
 8000c86:	e009      	b.n	8000c9c <Check_Interupt+0x34>
	else if(GPIO_Pin == SCL_Pin_Pin && SCL_Enable == true) // If The INT Source Is EXTI Line9 (A9 Pin)
 8000c88:	88fb      	ldrh	r3, [r7, #6]
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d106      	bne.n	8000c9c <Check_Interupt+0x34>
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <Check_Interupt+0x40>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d002      	beq.n	8000c9c <Check_Interupt+0x34>
		Bus_State_Handler(SCL);
 8000c96:	2000      	movs	r0, #0
 8000c98:	f7ff fe7e 	bl	8000998 <Bus_State_Handler>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000014d 	.word	0x2000014d
 8000ca8:	2000014c 	.word	0x2000014c

08000cac <I2C_Reset>:

void I2C_Reset(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	  Bit_Count = 9;
 8000cb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <I2C_Reset+0x3c>)
 8000cb2:	2209      	movs	r2, #9
 8000cb4:	701a      	strb	r2, [r3, #0]
	  Data_Byte = 0;
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cec <I2C_Reset+0x40>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
	  rbuf_index = 1;
 8000cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf0 <I2C_Reset+0x44>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	701a      	strb	r2, [r3, #0]
	  Set_SDA_RisingNFalling(false);
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff fe06 	bl	80008d4 <Set_SDA_RisingNFalling>
	  Set_SDA_INT(true);
 8000cc8:	2001      	movs	r0, #1
 8000cca:	f7ff fe3b 	bl	8000944 <Set_SDA_INT>
	  Set_SCL_INT(false);
 8000cce:	2000      	movs	r0, #0
 8000cd0:	f7ff fe28 	bl	8000924 <Set_SCL_INT>
	  (*(uint8_t *)(BufferR)) = 0; //clear buffer packet size
 8000cd4:	4b07      	ldr	r3, [pc, #28]	@ (8000cf4 <I2C_Reset+0x48>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
	  main_State = Wait_Start;
 8000cdc:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <I2C_Reset+0x4c>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000001 	.word	0x20000001
 8000cec:	20000124 	.word	0x20000124
 8000cf0:	20000002 	.word	0x20000002
 8000cf4:	20000148 	.word	0x20000148
 8000cf8:	2000014e 	.word	0x2000014e

08000cfc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	60da      	str	r2, [r3, #12]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bc80      	pop	{r7}
 8000d18:	4770      	bx	lr

08000d1a <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d1a:	b480      	push	{r7}
 8000d1c:	b083      	sub	sp, #12
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	695b      	ldr	r3, [r3, #20]
 8000d32:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	615a      	str	r2, [r3, #20]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d4e:	699a      	ldr	r2, [r3, #24]
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4313      	orrs	r3, r2
 8000d56:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000d5a:	699a      	ldr	r2, [r3, #24]
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d62:	68fb      	ldr	r3, [r7, #12]
}
 8000d64:	bf00      	nop
 8000d66:	3714      	adds	r7, #20
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bc80      	pop	{r7}
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40021000 	.word	0x40021000

08000d74 <Transmit>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Transmit(void* bufferT, uint8_t Length_p, USART_TypeDef* USART_P) // transmit info over uart debug port
  {
 8000d74:	b480      	push	{r7}
 8000d76:	b085      	sub	sp, #20
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	460b      	mov	r3, r1
 8000d7e:	607a      	str	r2, [r7, #4]
 8000d80:	72fb      	strb	r3, [r7, #11]
		volatile static uint8_t i;

		for (i = 0; i < Length_p; i++)
 8000d82:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <Transmit+0x60>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e017      	b.n	8000dba <Transmit+0x46>
		{
			while ( !(READ_BIT(USART_P->SR, USART_SR_TXE)));
 8000d8a:	bf00      	nop
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d0f9      	beq.n	8000d8c <Transmit+0x18>
			USART_P->DR = *((uint8_t*)(bufferT+i));
 8000d98:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd4 <Transmit+0x60>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	461a      	mov	r2, r3
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	4413      	add	r3, r2
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	605a      	str	r2, [r3, #4]
		for (i = 0; i < Length_p; i++)
 8000dac:	4b09      	ldr	r3, [pc, #36]	@ (8000dd4 <Transmit+0x60>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	3301      	adds	r3, #1
 8000db4:	b2da      	uxtb	r2, r3
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <Transmit+0x60>)
 8000db8:	701a      	strb	r2, [r3, #0]
 8000dba:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <Transmit+0x60>)
 8000dbc:	781b      	ldrb	r3, [r3, #0]
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	7afa      	ldrb	r2, [r7, #11]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	d8e1      	bhi.n	8000d8a <Transmit+0x16>
		}

  }
 8000dc6:	bf00      	nop
 8000dc8:	bf00      	nop
 8000dca:	3714      	adds	r7, #20
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bc80      	pop	{r7}
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000174 	.word	0x20000174

08000dd8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]

	if( GPIO_Pin == SCL_Pin_Pin || GPIO_Pin == SDA_Pin_Pin )
 8000de2:	88fb      	ldrh	r3, [r7, #6]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d002      	beq.n	8000dee <HAL_GPIO_EXTI_Callback+0x16>
 8000de8:	88fb      	ldrh	r3, [r7, #6]
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d106      	bne.n	8000dfc <HAL_GPIO_EXTI_Callback+0x24>
	{
		Check_Interupt(GPIO_Pin);
 8000dee:	88fb      	ldrh	r3, [r7, #6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f7ff ff39 	bl	8000c68 <Check_Interupt>
		I2C_Reset_Counter = 0;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	701a      	strb	r2, [r3, #0]
	}

	if ( GPIO_Pin == Mode_Switch_1_Pin || GPIO_Pin == Mode_Switch_2_Pin )
 8000dfc:	88fb      	ldrh	r3, [r7, #6]
 8000dfe:	2b80      	cmp	r3, #128	@ 0x80
 8000e00:	d003      	beq.n	8000e0a <HAL_GPIO_EXTI_Callback+0x32>
 8000e02:	88fb      	ldrh	r3, [r7, #6]
 8000e04:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000e08:	d101      	bne.n	8000e0e <HAL_GPIO_EXTI_Callback+0x36>
	{
		_EventSet_Mode_Switch_Update();
 8000e0a:	f7ff faa1 	bl	8000350 <_EventSet_Mode_Switch_Update>
	}
	if ( GPIO_Pin == SW_POS_IN_1_Pin || GPIO_Pin == SW_POS_IN_2_Pin	|| GPIO_Pin == SW_POS_IN_3_Pin || GPIO_Pin == SW_POS_IN_4_Pin )
 8000e0e:	88fb      	ldrh	r3, [r7, #6]
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d008      	beq.n	8000e26 <HAL_GPIO_EXTI_Callback+0x4e>
 8000e14:	88fb      	ldrh	r3, [r7, #6]
 8000e16:	2b10      	cmp	r3, #16
 8000e18:	d005      	beq.n	8000e26 <HAL_GPIO_EXTI_Callback+0x4e>
 8000e1a:	88fb      	ldrh	r3, [r7, #6]
 8000e1c:	2b20      	cmp	r3, #32
 8000e1e:	d002      	beq.n	8000e26 <HAL_GPIO_EXTI_Callback+0x4e>
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	2b40      	cmp	r3, #64	@ 0x40
 8000e24:	d101      	bne.n	8000e2a <HAL_GPIO_EXTI_Callback+0x52>
	{
		_EventSet_Speed_Switch_Update();
 8000e26:	f7ff faaf 	bl	8000388 <_EventSet_Speed_Switch_Update>
	}
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	2000014f 	.word	0x2000014f

08000e38 <HAL_IncTick>:

void HAL_IncTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000e70 <HAL_IncTick+0x38>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	461a      	mov	r2, r3
 8000e42:	4b0c      	ldr	r3, [pc, #48]	@ (8000e74 <HAL_IncTick+0x3c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4413      	add	r3, r2
 8000e48:	4a0a      	ldr	r2, [pc, #40]	@ (8000e74 <HAL_IncTick+0x3c>)
 8000e4a:	6013      	str	r3, [r2, #0]
	I2C_Reset_Counter++;
 8000e4c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e78 <HAL_IncTick+0x40>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	3301      	adds	r3, #1
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <HAL_IncTick+0x40>)
 8000e56:	701a      	strb	r2, [r3, #0]
	if ( I2C_Reset_Counter > I2C_Reset_Count )
 8000e58:	4b07      	ldr	r3, [pc, #28]	@ (8000e78 <HAL_IncTick+0x40>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b05      	cmp	r3, #5
 8000e5e:	d904      	bls.n	8000e6a <HAL_IncTick+0x32>
	{
		I2C_Reset_Counter = 0;
 8000e60:	4b05      	ldr	r3, [pc, #20]	@ (8000e78 <HAL_IncTick+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
		_EventSet_I2C_Reset();
 8000e66:	f7ff fa57 	bl	8000318 <_EventSet_I2C_Reset>
		//I2C_Timer_Reset();
	}
}
 8000e6a:	bf00      	nop
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	2000000c 	.word	0x2000000c
 8000e74:	20000178 	.word	0x20000178
 8000e78:	2000014f 	.word	0x2000014f

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  _Init_Events();
 8000e82:	f7ff fa29 	bl	80002d8 <_Init_Events>
  Init_Values();
 8000e86:	f7ff fb1b 	bl	80004c0 <Init_Values>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8a:	f000 fa6f 	bl	800136c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8e:	f000 f84b 	bl	8000f28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e92:	f000 f8e7 	bl	8001064 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e96:	f000 f88d 	bl	8000fb4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  I2C_Init();
 8000e9a:	f7ff fd63 	bl	8000964 <I2C_Init>
  InitCom();
 8000e9e:	f7ff f955 	bl	800014c <InitCom>
  BufferH = &bufferH_;	//bind pointer to physical location
 8000ea2:	4b1e      	ldr	r3, [pc, #120]	@ (8000f1c <main+0xa0>)
 8000ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8000f20 <main+0xa4>)
 8000ea6:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  _EventSet_Mode_Switch_Update();
 8000ea8:	f7ff fa52 	bl	8000350 <_EventSet_Mode_Switch_Update>
  _EventSet_Speed_Switch_Update();
 8000eac:	f7ff fa6c 	bl	8000388 <_EventSet_Speed_Switch_Update>
  //Enable_Interupts();
  while (1)
  {
	  while ( R_Pop(&BufferH) ) // check if an message is available in the circular buffer
 8000eb0:	e02a      	b.n	8000f08 <main+0x8c>
	  {
		  volatile uint8_t size = *(uint8_t *)BufferH; // get the first byte from the buffer this holds the size of the packet
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <main+0xa0>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	70fb      	strb	r3, [r7, #3]
		  //size = size;
		  //Transmit((uint8_t *)BufferH, size, USART2); // transmit the buffer over the debug uart port
		  if (size == 21)
 8000eba:	78fb      	ldrb	r3, [r7, #3]
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	2b15      	cmp	r3, #21
 8000ec0:	d122      	bne.n	8000f08 <main+0x8c>
		  {
			  struct Measurement_Data *Measurement_Data = (void *) BufferH;
 8000ec2:	4b16      	ldr	r3, [pc, #88]	@ (8000f1c <main+0xa0>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	607b      	str	r3, [r7, #4]
			  set_tvoc(Measurement_Data->VOC);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fa9b 	bl	800040c <set_tvoc>
			  set_PM25(Measurement_Data->PM25);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	889b      	ldrh	r3, [r3, #4]
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff fab3 	bl	8000448 <set_PM25>
			  set_PM1(Measurement_Data->PM10);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff faca 	bl	8000484 <set_PM1>
			  if ( Get_Device_Mode_State() != Manual)
 8000ef0:	f7ff fa82 	bl	80003f8 <Get_Device_Mode_State>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <main+0x82>
				  _EventSet_Output_Update();
 8000efa:	f7ff fa61 	bl	80003c0 <_EventSet_Output_Update>
			  Transmit(Measurement_Data, sizeof(struct Measurement_Data), USART1); // transmit the buffer over the debug uart port
 8000efe:	4a09      	ldr	r2, [pc, #36]	@ (8000f24 <main+0xa8>)
 8000f00:	2116      	movs	r1, #22
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff36 	bl	8000d74 <Transmit>
	  while ( R_Pop(&BufferH) ) // check if an message is available in the circular buffer
 8000f08:	4804      	ldr	r0, [pc, #16]	@ (8000f1c <main+0xa0>)
 8000f0a:	f7ff f9ad 	bl	8000268 <R_Pop>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d1ce      	bne.n	8000eb2 <main+0x36>
		 /* if (size == 9 || size == 12 || size == 21 || size == 3)
		  {
			  Transmit((uint8_t *)BufferH, size + 1, USART1);
		  }*/
	  }
	  Handle_Events();
 8000f14:	f7ff fc64 	bl	80007e0 <Handle_Events>
	  while ( R_Pop(&BufferH) ) // check if an message is available in the circular buffer
 8000f18:	e7f6      	b.n	8000f08 <main+0x8c>
 8000f1a:	bf00      	nop
 8000f1c:	20000170 	.word	0x20000170
 8000f20:	20000150 	.word	0x20000150
 8000f24:	40013800 	.word	0x40013800

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	@ 0x40
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2228      	movs	r2, #40	@ 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fc46 	bl	80027c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f60:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f64:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f66:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 fd25 	bl	80019c0 <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f7c:	f000 f938 	bl	80011f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 ff92 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f923 	bl	80011f0 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3740      	adds	r7, #64	@ 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	@ 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]
 8000fca:	615a      	str	r2, [r3, #20]
 8000fcc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8000fdc:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8000fe0:	f7ff feb0 	bl	8000d44 <LL_APB2_GRP1_EnableClock>

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA);
 8000fe4:	2004      	movs	r0, #4
 8000fe6:	f7ff fead 	bl	8000d44 <LL_APB2_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_USART1_UART_Init+0xa0>)
 8000fec:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000fee:	2309      	movs	r3, #9
 8000ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4816      	ldr	r0, [pc, #88]	@ (8001058 <MX_USART1_UART_Init+0xa4>)
 8001000:	f001 f974 	bl	80022ec <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001004:	4b15      	ldr	r3, [pc, #84]	@ (800105c <MX_USART1_UART_Init+0xa8>)
 8001006:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
 8001008:	2304      	movs	r3, #4
 800100a:	607b      	str	r3, [r7, #4]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	4811      	ldr	r0, [pc, #68]	@ (8001058 <MX_USART1_UART_Init+0xa4>)
 8001012:	f001 f96b 	bl	80022ec <LL_GPIO_Init>

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8001016:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800101a:	617b      	str	r3, [r7, #20]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001024:	2300      	movs	r3, #0
 8001026:	623b      	str	r3, [r7, #32]
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001028:	230c      	movs	r3, #12
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	@ 0x28
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001030:	2300      	movs	r3, #0
 8001032:	62fb      	str	r3, [r7, #44]	@ 0x2c
  LL_USART_Init(USART1, &USART_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4809      	ldr	r0, [pc, #36]	@ (8001060 <MX_USART1_UART_Init+0xac>)
 800103c:	f001 fb64 	bl	8002708 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <MX_USART1_UART_Init+0xac>)
 8001042:	f7ff fe6a 	bl	8000d1a <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART1);
 8001046:	4806      	ldr	r0, [pc, #24]	@ (8001060 <MX_USART1_UART_Init+0xac>)
 8001048:	f7ff fe58 	bl	8000cfc <LL_USART_Enable>
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3730      	adds	r7, #48	@ 0x30
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	04020002 	.word	0x04020002
 8001058:	40010800 	.word	0x40010800
 800105c:	04040004 	.word	0x04040004
 8001060:	40013800 	.word	0x40013800

08001064 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b088      	sub	sp, #32
 8001068:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106a:	f107 0310 	add.w	r3, r7, #16
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001078:	4b57      	ldr	r3, [pc, #348]	@ (80011d8 <MX_GPIO_Init+0x174>)
 800107a:	699b      	ldr	r3, [r3, #24]
 800107c:	4a56      	ldr	r2, [pc, #344]	@ (80011d8 <MX_GPIO_Init+0x174>)
 800107e:	f043 0310 	orr.w	r3, r3, #16
 8001082:	6193      	str	r3, [r2, #24]
 8001084:	4b54      	ldr	r3, [pc, #336]	@ (80011d8 <MX_GPIO_Init+0x174>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001090:	4b51      	ldr	r3, [pc, #324]	@ (80011d8 <MX_GPIO_Init+0x174>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	4a50      	ldr	r2, [pc, #320]	@ (80011d8 <MX_GPIO_Init+0x174>)
 8001096:	f043 0320 	orr.w	r3, r3, #32
 800109a:	6193      	str	r3, [r2, #24]
 800109c:	4b4e      	ldr	r3, [pc, #312]	@ (80011d8 <MX_GPIO_Init+0x174>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	f003 0320 	and.w	r3, r3, #32
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a8:	4b4b      	ldr	r3, [pc, #300]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	4a4a      	ldr	r2, [pc, #296]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010ae:	f043 0304 	orr.w	r3, r3, #4
 80010b2:	6193      	str	r3, [r2, #24]
 80010b4:	4b48      	ldr	r3, [pc, #288]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	f003 0304 	and.w	r3, r3, #4
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010c0:	4b45      	ldr	r3, [pc, #276]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4a44      	ldr	r2, [pc, #272]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010c6:	f043 0308 	orr.w	r3, r3, #8
 80010ca:	6193      	str	r3, [r2, #24]
 80010cc:	4b42      	ldr	r3, [pc, #264]	@ (80011d8 <MX_GPIO_Init+0x174>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	f003 0308 	and.w	r3, r3, #8
 80010d4:	603b      	str	r3, [r7, #0]
 80010d6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SW_POS_OUT_1_Pin|SW_POS_OUT_2_Pin|SW_POS_OUT_3_Pin|SW_POS_OUT_4_Pin
 80010d8:	2200      	movs	r2, #0
 80010da:	f24f 0120 	movw	r1, #61472	@ 0xf020
 80010de:	483f      	ldr	r0, [pc, #252]	@ (80011dc <MX_GPIO_Init+0x178>)
 80010e0:	f000 fc3d 	bl	800195e <HAL_GPIO_WritePin>
                          |Mode_Led_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SW_POS_IN_1_Pin SW_POS_IN_2_Pin SW_POS_IN_3_Pin SW_POS_IN_4_Pin */
  GPIO_InitStruct.Pin = SW_POS_IN_1_Pin|SW_POS_IN_2_Pin|SW_POS_IN_3_Pin|SW_POS_IN_4_Pin;
 80010e4:	2378      	movs	r3, #120	@ 0x78
 80010e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e8:	4b3d      	ldr	r3, [pc, #244]	@ (80011e0 <MX_GPIO_Init+0x17c>)
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ec:	2301      	movs	r3, #1
 80010ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 0310 	add.w	r3, r7, #16
 80010f4:	4619      	mov	r1, r3
 80010f6:	483b      	ldr	r0, [pc, #236]	@ (80011e4 <MX_GPIO_Init+0x180>)
 80010f8:	f000 fa96 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCL_Pin_Pin */
  GPIO_InitStruct.Pin = SCL_Pin_Pin;
 80010fc:	2301      	movs	r3, #1
 80010fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001100:	4b39      	ldr	r3, [pc, #228]	@ (80011e8 <MX_GPIO_Init+0x184>)
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SCL_Pin_GPIO_Port, &GPIO_InitStruct);
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	4619      	mov	r1, r3
 800110e:	4833      	ldr	r0, [pc, #204]	@ (80011dc <MX_GPIO_Init+0x178>)
 8001110:	f000 fa8a 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDA_Pin_Pin */
  GPIO_InitStruct.Pin = SDA_Pin_Pin;
 8001114:	2302      	movs	r3, #2
 8001116:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001118:	4b31      	ldr	r3, [pc, #196]	@ (80011e0 <MX_GPIO_Init+0x17c>)
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SDA_Pin_GPIO_Port, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	482d      	ldr	r0, [pc, #180]	@ (80011dc <MX_GPIO_Init+0x178>)
 8001128:	f000 fa7e 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_POS_OUT_1_Pin SW_POS_OUT_2_Pin SW_POS_OUT_3_Pin SW_POS_OUT_4_Pin */
  GPIO_InitStruct.Pin = SW_POS_OUT_1_Pin|SW_POS_OUT_2_Pin|SW_POS_OUT_3_Pin|SW_POS_OUT_4_Pin;
 800112c:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001132:	2311      	movs	r3, #17
 8001134:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113a:	2302      	movs	r3, #2
 800113c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800113e:	f107 0310 	add.w	r3, r7, #16
 8001142:	4619      	mov	r1, r3
 8001144:	4825      	ldr	r0, [pc, #148]	@ (80011dc <MX_GPIO_Init+0x178>)
 8001146:	f000 fa6f 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pin : Mode_Led_Pin */
  GPIO_InitStruct.Pin = Mode_Led_Pin;
 800114a:	2320      	movs	r3, #32
 800114c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114e:	2301      	movs	r3, #1
 8001150:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001156:	2302      	movs	r3, #2
 8001158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Mode_Led_GPIO_Port, &GPIO_InitStruct);
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	481e      	ldr	r0, [pc, #120]	@ (80011dc <MX_GPIO_Init+0x178>)
 8001162:	f000 fa61 	bl	8001628 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mode_Switch_1_Pin Mode_Switch_2_Pin */
  GPIO_InitStruct.Pin = Mode_Switch_1_Pin|Mode_Switch_2_Pin;
 8001166:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800116c:	4b1f      	ldr	r3, [pc, #124]	@ (80011ec <MX_GPIO_Init+0x188>)
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001170:	2301      	movs	r3, #1
 8001172:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	@ (80011dc <MX_GPIO_Init+0x178>)
 800117c:	f000 fa54 	bl	8001628 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001180:	2200      	movs	r2, #0
 8001182:	2100      	movs	r1, #0
 8001184:	2006      	movs	r0, #6
 8001186:	f000 fa18 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800118a:	2006      	movs	r0, #6
 800118c:	f000 fa31 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001190:	2200      	movs	r2, #0
 8001192:	2100      	movs	r1, #0
 8001194:	2007      	movs	r0, #7
 8001196:	f000 fa10 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800119a:	2007      	movs	r0, #7
 800119c:	f000 fa29 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80011a0:	2200      	movs	r2, #0
 80011a2:	2100      	movs	r1, #0
 80011a4:	2009      	movs	r0, #9
 80011a6:	f000 fa08 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80011aa:	2009      	movs	r0, #9
 80011ac:	f000 fa21 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	200a      	movs	r0, #10
 80011b6:	f000 fa00 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80011ba:	200a      	movs	r0, #10
 80011bc:	f000 fa19 	bl	80015f2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2100      	movs	r1, #0
 80011c4:	2017      	movs	r0, #23
 80011c6:	f000 f9f8 	bl	80015ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80011ca:	2017      	movs	r0, #23
 80011cc:	f000 fa11 	bl	80015f2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011d0:	bf00      	nop
 80011d2:	3720      	adds	r7, #32
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	40021000 	.word	0x40021000
 80011dc:	40010c00 	.word	0x40010c00
 80011e0:	10210000 	.word	0x10210000
 80011e4:	40010800 	.word	0x40010800
 80011e8:	10110000 	.word	0x10110000
 80011ec:	10310000 	.word	0x10310000

080011f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011f4:	b672      	cpsid	i
}
 80011f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f8:	bf00      	nop
 80011fa:	e7fd      	b.n	80011f8 <Error_Handler+0x8>

080011fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_MspInit+0x5c>)
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	4a14      	ldr	r2, [pc, #80]	@ (8001258 <HAL_MspInit+0x5c>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6193      	str	r3, [r2, #24]
 800120e:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <HAL_MspInit+0x5c>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	60bb      	str	r3, [r7, #8]
 8001218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <HAL_MspInit+0x5c>)
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <HAL_MspInit+0x5c>)
 8001220:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001224:	61d3      	str	r3, [r2, #28]
 8001226:	4b0c      	ldr	r3, [pc, #48]	@ (8001258 <HAL_MspInit+0x5c>)
 8001228:	69db      	ldr	r3, [r3, #28]
 800122a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001232:	4b0a      	ldr	r3, [pc, #40]	@ (800125c <HAL_MspInit+0x60>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	4a04      	ldr	r2, [pc, #16]	@ (800125c <HAL_MspInit+0x60>)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800124e:	bf00      	nop
 8001250:	3714      	adds	r7, #20
 8001252:	46bd      	mov	sp, r7
 8001254:	bc80      	pop	{r7}
 8001256:	4770      	bx	lr
 8001258:	40021000 	.word	0x40021000
 800125c:	40010000 	.word	0x40010000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001264:	bf00      	nop
 8001266:	e7fd      	b.n	8001264 <NMI_Handler+0x4>

08001268 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126c:	bf00      	nop
 800126e:	e7fd      	b.n	800126c <HardFault_Handler+0x4>

08001270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001270:	b480      	push	{r7}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001274:	bf00      	nop
 8001276:	e7fd      	b.n	8001274 <MemManage_Handler+0x4>

08001278 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800127c:	bf00      	nop
 800127e:	e7fd      	b.n	800127c <BusFault_Handler+0x4>

08001280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <UsageFault_Handler+0x4>

08001288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128c:	bf00      	nop
 800128e:	46bd      	mov	sp, r7
 8001290:	bc80      	pop	{r7}
 8001292:	4770      	bx	lr

08001294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bc80      	pop	{r7}
 80012aa:	4770      	bx	lr

080012ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b0:	f7ff fdc2 	bl	8000e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SCL_Pin_Pin);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fb67 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SDA_Pin_Pin);
 80012ca:	2002      	movs	r0, #2
 80012cc:	f000 fb60 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_POS_IN_1_Pin);
 80012d8:	2008      	movs	r0, #8
 80012da:	f000 fb59 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_POS_IN_2_Pin);
 80012e6:	2010      	movs	r0, #16
 80012e8:	f000 fb52 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SW_POS_IN_3_Pin);
 80012f4:	2020      	movs	r0, #32
 80012f6:	f000 fb4b 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SW_POS_IN_4_Pin);
 80012fa:	2040      	movs	r0, #64	@ 0x40
 80012fc:	f000 fb48 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mode_Switch_1_Pin);
 8001300:	2080      	movs	r0, #128	@ 0x80
 8001302:	f000 fb45 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Mode_Switch_2_Pin);
 8001306:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800130a:	f000 fb41 	bl	8001990 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}

08001312 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001320:	f7ff fff7 	bl	8001312 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001324:	480b      	ldr	r0, [pc, #44]	@ (8001354 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001326:	490c      	ldr	r1, [pc, #48]	@ (8001358 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <LoopFillZerobss+0x16>)
  movs r3, #0
 800132a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800132c:	e002      	b.n	8001334 <LoopCopyDataInit>

0800132e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800132e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001330:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001332:	3304      	adds	r3, #4

08001334 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001334:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001336:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001338:	d3f9      	bcc.n	800132e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800133a:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800133c:	4c09      	ldr	r4, [pc, #36]	@ (8001364 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001340:	e001      	b.n	8001346 <LoopFillZerobss>

08001342 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001342:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001344:	3204      	adds	r2, #4

08001346 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001346:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001348:	d3fb      	bcc.n	8001342 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800134a:	f001 fa45 	bl	80027d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800134e:	f7ff fd95 	bl	8000e7c <main>
  bx lr
 8001352:	4770      	bx	lr
  ldr r0, =_sdata
 8001354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001358:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800135c:	0800286c 	.word	0x0800286c
  ldr r2, =_sbss
 8001360:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001364:	2000017c 	.word	0x2000017c

08001368 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001368:	e7fe      	b.n	8001368 <ADC1_2_IRQHandler>
	...

0800136c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001370:	4b08      	ldr	r3, [pc, #32]	@ (8001394 <HAL_Init+0x28>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a07      	ldr	r2, [pc, #28]	@ (8001394 <HAL_Init+0x28>)
 8001376:	f043 0310 	orr.w	r3, r3, #16
 800137a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800137c:	2003      	movs	r0, #3
 800137e:	f000 f911 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 f808 	bl	8001398 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001388:	f7ff ff38 	bl	80011fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000

08001398 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013a0:	4b12      	ldr	r3, [pc, #72]	@ (80013ec <HAL_InitTick+0x54>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b12      	ldr	r3, [pc, #72]	@ (80013f0 <HAL_InitTick+0x58>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80013b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 f929 	bl	800160e <HAL_SYSTICK_Config>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e00e      	b.n	80013e4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2b0f      	cmp	r3, #15
 80013ca:	d80a      	bhi.n	80013e2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013cc:	2200      	movs	r2, #0
 80013ce:	6879      	ldr	r1, [r7, #4]
 80013d0:	f04f 30ff 	mov.w	r0, #4294967295
 80013d4:	f000 f8f1 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013d8:	4a06      	ldr	r2, [pc, #24]	@ (80013f4 <HAL_InitTick+0x5c>)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013de:	2300      	movs	r3, #0
 80013e0:	e000      	b.n	80013e4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3708      	adds	r7, #8
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000004 	.word	0x20000004
 80013f0:	2000000c 	.word	0x2000000c
 80013f4:	20000008 	.word	0x20000008

080013f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b02      	ldr	r3, [pc, #8]	@ (8001408 <HAL_GetTick+0x10>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000178 	.word	0x20000178

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	@ (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	@ (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	bc80      	pop	{r7}
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4906      	ldr	r1, [pc, #24]	@ (80014a4 <__NVIC_EnableIRQ+0x34>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100

080014a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	6039      	str	r1, [r7, #0]
 80014b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	db0a      	blt.n	80014d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	b2da      	uxtb	r2, r3
 80014c0:	490c      	ldr	r1, [pc, #48]	@ (80014f4 <__NVIC_SetPriority+0x4c>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	0112      	lsls	r2, r2, #4
 80014c8:	b2d2      	uxtb	r2, r2
 80014ca:	440b      	add	r3, r1
 80014cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d0:	e00a      	b.n	80014e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4908      	ldr	r1, [pc, #32]	@ (80014f8 <__NVIC_SetPriority+0x50>)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	3b04      	subs	r3, #4
 80014e0:	0112      	lsls	r2, r2, #4
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	440b      	add	r3, r1
 80014e6:	761a      	strb	r2, [r3, #24]
}
 80014e8:	bf00      	nop
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bc80      	pop	{r7}
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000e100 	.word	0xe000e100
 80014f8:	e000ed00 	.word	0xe000ed00

080014fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b089      	sub	sp, #36	@ 0x24
 8001500:	af00      	add	r7, sp, #0
 8001502:	60f8      	str	r0, [r7, #12]
 8001504:	60b9      	str	r1, [r7, #8]
 8001506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	f1c3 0307 	rsb	r3, r3, #7
 8001516:	2b04      	cmp	r3, #4
 8001518:	bf28      	it	cs
 800151a:	2304      	movcs	r3, #4
 800151c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3304      	adds	r3, #4
 8001522:	2b06      	cmp	r3, #6
 8001524:	d902      	bls.n	800152c <NVIC_EncodePriority+0x30>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	3b03      	subs	r3, #3
 800152a:	e000      	b.n	800152e <NVIC_EncodePriority+0x32>
 800152c:	2300      	movs	r3, #0
 800152e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	f04f 32ff 	mov.w	r2, #4294967295
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	43da      	mvns	r2, r3
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	401a      	ands	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001544:	f04f 31ff 	mov.w	r1, #4294967295
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	fa01 f303 	lsl.w	r3, r1, r3
 800154e:	43d9      	mvns	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001554:	4313      	orrs	r3, r2
         );
}
 8001556:	4618      	mov	r0, r3
 8001558:	3724      	adds	r7, #36	@ 0x24
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295
 8001584:	f7ff ff90 	bl	80014a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff2d 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff42 	bl	8001454 <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff90 	bl	80014fc <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5f 	bl	80014a8 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff35 	bl	8001470 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
	...

08001628 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	@ 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
 8001630:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001632:	2300      	movs	r3, #0
 8001634:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e169      	b.n	8001910 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800163c:	2201      	movs	r2, #1
 800163e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001640:	fa02 f303 	lsl.w	r3, r2, r3
 8001644:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	69fa      	ldr	r2, [r7, #28]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	429a      	cmp	r2, r3
 8001656:	f040 8158 	bne.w	800190a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4a9a      	ldr	r2, [pc, #616]	@ (80018c8 <HAL_GPIO_Init+0x2a0>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d05e      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001664:	4a98      	ldr	r2, [pc, #608]	@ (80018c8 <HAL_GPIO_Init+0x2a0>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d875      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800166a:	4a98      	ldr	r2, [pc, #608]	@ (80018cc <HAL_GPIO_Init+0x2a4>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d058      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001670:	4a96      	ldr	r2, [pc, #600]	@ (80018cc <HAL_GPIO_Init+0x2a4>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d86f      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001676:	4a96      	ldr	r2, [pc, #600]	@ (80018d0 <HAL_GPIO_Init+0x2a8>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d052      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 800167c:	4a94      	ldr	r2, [pc, #592]	@ (80018d0 <HAL_GPIO_Init+0x2a8>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d869      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 8001682:	4a94      	ldr	r2, [pc, #592]	@ (80018d4 <HAL_GPIO_Init+0x2ac>)
 8001684:	4293      	cmp	r3, r2
 8001686:	d04c      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001688:	4a92      	ldr	r2, [pc, #584]	@ (80018d4 <HAL_GPIO_Init+0x2ac>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d863      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800168e:	4a92      	ldr	r2, [pc, #584]	@ (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d046      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
 8001694:	4a90      	ldr	r2, [pc, #576]	@ (80018d8 <HAL_GPIO_Init+0x2b0>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d85d      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 800169a:	2b12      	cmp	r3, #18
 800169c:	d82a      	bhi.n	80016f4 <HAL_GPIO_Init+0xcc>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d859      	bhi.n	8001756 <HAL_GPIO_Init+0x12e>
 80016a2:	a201      	add	r2, pc, #4	@ (adr r2, 80016a8 <HAL_GPIO_Init+0x80>)
 80016a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016a8:	08001723 	.word	0x08001723
 80016ac:	080016fd 	.word	0x080016fd
 80016b0:	0800170f 	.word	0x0800170f
 80016b4:	08001751 	.word	0x08001751
 80016b8:	08001757 	.word	0x08001757
 80016bc:	08001757 	.word	0x08001757
 80016c0:	08001757 	.word	0x08001757
 80016c4:	08001757 	.word	0x08001757
 80016c8:	08001757 	.word	0x08001757
 80016cc:	08001757 	.word	0x08001757
 80016d0:	08001757 	.word	0x08001757
 80016d4:	08001757 	.word	0x08001757
 80016d8:	08001757 	.word	0x08001757
 80016dc:	08001757 	.word	0x08001757
 80016e0:	08001757 	.word	0x08001757
 80016e4:	08001757 	.word	0x08001757
 80016e8:	08001757 	.word	0x08001757
 80016ec:	08001705 	.word	0x08001705
 80016f0:	08001719 	.word	0x08001719
 80016f4:	4a79      	ldr	r2, [pc, #484]	@ (80018dc <HAL_GPIO_Init+0x2b4>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d013      	beq.n	8001722 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016fa:	e02c      	b.n	8001756 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	623b      	str	r3, [r7, #32]
          break;
 8001702:	e029      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	3304      	adds	r3, #4
 800170a:	623b      	str	r3, [r7, #32]
          break;
 800170c:	e024      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	3308      	adds	r3, #8
 8001714:	623b      	str	r3, [r7, #32]
          break;
 8001716:	e01f      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	330c      	adds	r3, #12
 800171e:	623b      	str	r3, [r7, #32]
          break;
 8001720:	e01a      	b.n	8001758 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d102      	bne.n	8001730 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800172a:	2304      	movs	r3, #4
 800172c:	623b      	str	r3, [r7, #32]
          break;
 800172e:	e013      	b.n	8001758 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d105      	bne.n	8001744 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001738:	2308      	movs	r3, #8
 800173a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69fa      	ldr	r2, [r7, #28]
 8001740:	611a      	str	r2, [r3, #16]
          break;
 8001742:	e009      	b.n	8001758 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001744:	2308      	movs	r3, #8
 8001746:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	69fa      	ldr	r2, [r7, #28]
 800174c:	615a      	str	r2, [r3, #20]
          break;
 800174e:	e003      	b.n	8001758 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001750:	2300      	movs	r3, #0
 8001752:	623b      	str	r3, [r7, #32]
          break;
 8001754:	e000      	b.n	8001758 <HAL_GPIO_Init+0x130>
          break;
 8001756:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001758:	69bb      	ldr	r3, [r7, #24]
 800175a:	2bff      	cmp	r3, #255	@ 0xff
 800175c:	d801      	bhi.n	8001762 <HAL_GPIO_Init+0x13a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	e001      	b.n	8001766 <HAL_GPIO_Init+0x13e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	3304      	adds	r3, #4
 8001766:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001768:	69bb      	ldr	r3, [r7, #24]
 800176a:	2bff      	cmp	r3, #255	@ 0xff
 800176c:	d802      	bhi.n	8001774 <HAL_GPIO_Init+0x14c>
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	e002      	b.n	800177a <HAL_GPIO_Init+0x152>
 8001774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001776:	3b08      	subs	r3, #8
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	210f      	movs	r1, #15
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	fa01 f303 	lsl.w	r3, r1, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	401a      	ands	r2, r3
 800178c:	6a39      	ldr	r1, [r7, #32]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 80b1 	beq.w	800190a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017a8:	4b4d      	ldr	r3, [pc, #308]	@ (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	4a4c      	ldr	r2, [pc, #304]	@ (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017ae:	f043 0301 	orr.w	r3, r3, #1
 80017b2:	6193      	str	r3, [r2, #24]
 80017b4:	4b4a      	ldr	r3, [pc, #296]	@ (80018e0 <HAL_GPIO_Init+0x2b8>)
 80017b6:	699b      	ldr	r3, [r3, #24]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017c0:	4a48      	ldr	r2, [pc, #288]	@ (80018e4 <HAL_GPIO_Init+0x2bc>)
 80017c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	009b      	lsls	r3, r3, #2
 80017d6:	220f      	movs	r2, #15
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a40      	ldr	r2, [pc, #256]	@ (80018e8 <HAL_GPIO_Init+0x2c0>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d013      	beq.n	8001814 <HAL_GPIO_Init+0x1ec>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a3f      	ldr	r2, [pc, #252]	@ (80018ec <HAL_GPIO_Init+0x2c4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00d      	beq.n	8001810 <HAL_GPIO_Init+0x1e8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	4a3e      	ldr	r2, [pc, #248]	@ (80018f0 <HAL_GPIO_Init+0x2c8>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d007      	beq.n	800180c <HAL_GPIO_Init+0x1e4>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a3d      	ldr	r2, [pc, #244]	@ (80018f4 <HAL_GPIO_Init+0x2cc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d101      	bne.n	8001808 <HAL_GPIO_Init+0x1e0>
 8001804:	2303      	movs	r3, #3
 8001806:	e006      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001808:	2304      	movs	r3, #4
 800180a:	e004      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 800180c:	2302      	movs	r3, #2
 800180e:	e002      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001810:	2301      	movs	r3, #1
 8001812:	e000      	b.n	8001816 <HAL_GPIO_Init+0x1ee>
 8001814:	2300      	movs	r3, #0
 8001816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001818:	f002 0203 	and.w	r2, r2, #3
 800181c:	0092      	lsls	r2, r2, #2
 800181e:	4093      	lsls	r3, r2
 8001820:	68fa      	ldr	r2, [r7, #12]
 8001822:	4313      	orrs	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001826:	492f      	ldr	r1, [pc, #188]	@ (80018e4 <HAL_GPIO_Init+0x2bc>)
 8001828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800182a:	089b      	lsrs	r3, r3, #2
 800182c:	3302      	adds	r3, #2
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d006      	beq.n	800184e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001840:	4b2d      	ldr	r3, [pc, #180]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	492c      	ldr	r1, [pc, #176]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001846:	69bb      	ldr	r3, [r7, #24]
 8001848:	4313      	orrs	r3, r2
 800184a:	608b      	str	r3, [r1, #8]
 800184c:	e006      	b.n	800185c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800184e:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	43db      	mvns	r3, r3
 8001856:	4928      	ldr	r1, [pc, #160]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001858:	4013      	ands	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001868:	4b23      	ldr	r3, [pc, #140]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 800186a:	68da      	ldr	r2, [r3, #12]
 800186c:	4922      	ldr	r1, [pc, #136]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	60cb      	str	r3, [r1, #12]
 8001874:	e006      	b.n	8001884 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001878:	68da      	ldr	r2, [r3, #12]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	43db      	mvns	r3, r3
 800187e:	491e      	ldr	r1, [pc, #120]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001880:	4013      	ands	r3, r2
 8001882:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001892:	685a      	ldr	r2, [r3, #4]
 8001894:	4918      	ldr	r1, [pc, #96]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	604b      	str	r3, [r1, #4]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800189e:	4b16      	ldr	r3, [pc, #88]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018a0:	685a      	ldr	r2, [r3, #4]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4914      	ldr	r1, [pc, #80]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d021      	beq.n	80018fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80018b8:	4b0f      	ldr	r3, [pc, #60]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	490e      	ldr	r1, [pc, #56]	@ (80018f8 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
 80018c4:	e021      	b.n	800190a <HAL_GPIO_Init+0x2e2>
 80018c6:	bf00      	nop
 80018c8:	10320000 	.word	0x10320000
 80018cc:	10310000 	.word	0x10310000
 80018d0:	10220000 	.word	0x10220000
 80018d4:	10210000 	.word	0x10210000
 80018d8:	10120000 	.word	0x10120000
 80018dc:	10110000 	.word	0x10110000
 80018e0:	40021000 	.word	0x40021000
 80018e4:	40010000 	.word	0x40010000
 80018e8:	40010800 	.word	0x40010800
 80018ec:	40010c00 	.word	0x40010c00
 80018f0:	40011000 	.word	0x40011000
 80018f4:	40011400 	.word	0x40011400
 80018f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	@ (800192c <HAL_GPIO_Init+0x304>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	43db      	mvns	r3, r3
 8001904:	4909      	ldr	r1, [pc, #36]	@ (800192c <HAL_GPIO_Init+0x304>)
 8001906:	4013      	ands	r3, r2
 8001908:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	3301      	adds	r3, #1
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001916:	fa22 f303 	lsr.w	r3, r2, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	f47f ae8e 	bne.w	800163c <HAL_GPIO_Init+0x14>
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	372c      	adds	r7, #44	@ 0x2c
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr
 800192c:	40010400 	.word	0x40010400

08001930 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	460b      	mov	r3, r1
 800193a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689a      	ldr	r2, [r3, #8]
 8001940:	887b      	ldrh	r3, [r7, #2]
 8001942:	4013      	ands	r3, r2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d002      	beq.n	800194e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001948:	2301      	movs	r3, #1
 800194a:	73fb      	strb	r3, [r7, #15]
 800194c:	e001      	b.n	8001952 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800194e:	2300      	movs	r3, #0
 8001950:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001952:	7bfb      	ldrb	r3, [r7, #15]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
 8001966:	460b      	mov	r3, r1
 8001968:	807b      	strh	r3, [r7, #2]
 800196a:	4613      	mov	r3, r2
 800196c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800196e:	787b      	ldrb	r3, [r7, #1]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001974:	887a      	ldrh	r2, [r7, #2]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800197a:	e003      	b.n	8001984 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800197c:	887b      	ldrh	r3, [r7, #2]
 800197e:	041a      	lsls	r2, r3, #16
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	611a      	str	r2, [r3, #16]
}
 8001984:	bf00      	nop
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	bc80      	pop	{r7}
 800198c:	4770      	bx	lr
	...

08001990 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800199a:	4b08      	ldr	r3, [pc, #32]	@ (80019bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800199c:	695a      	ldr	r2, [r3, #20]
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	4013      	ands	r3, r2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019a6:	4a05      	ldr	r2, [pc, #20]	@ (80019bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a8:	88fb      	ldrh	r3, [r7, #6]
 80019aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019ac:	88fb      	ldrh	r3, [r7, #6]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fa12 	bl	8000dd8 <HAL_GPIO_EXTI_Callback>
  }
}
 80019b4:	bf00      	nop
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40010400 	.word	0x40010400

080019c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e272      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 8087 	beq.w	8001aee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019e0:	4b92      	ldr	r3, [pc, #584]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b04      	cmp	r3, #4
 80019ea:	d00c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ec:	4b8f      	ldr	r3, [pc, #572]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 030c 	and.w	r3, r3, #12
 80019f4:	2b08      	cmp	r3, #8
 80019f6:	d112      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5e>
 80019f8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a04:	d10b      	bne.n	8001a1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a06:	4b89      	ldr	r3, [pc, #548]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d06c      	beq.n	8001aec <HAL_RCC_OscConfig+0x12c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d168      	bne.n	8001aec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e24c      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a26:	d106      	bne.n	8001a36 <HAL_RCC_OscConfig+0x76>
 8001a28:	4b80      	ldr	r3, [pc, #512]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a7f      	ldr	r2, [pc, #508]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a2e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a32:	6013      	str	r3, [r2, #0]
 8001a34:	e02e      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d10c      	bne.n	8001a58 <HAL_RCC_OscConfig+0x98>
 8001a3e:	4b7b      	ldr	r3, [pc, #492]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a7a      	ldr	r2, [pc, #488]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a48:	6013      	str	r3, [r2, #0]
 8001a4a:	4b78      	ldr	r3, [pc, #480]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a77      	ldr	r2, [pc, #476]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a50:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	e01d      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a60:	d10c      	bne.n	8001a7c <HAL_RCC_OscConfig+0xbc>
 8001a62:	4b72      	ldr	r3, [pc, #456]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a71      	ldr	r2, [pc, #452]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a68:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a6e      	ldr	r2, [pc, #440]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	e00b      	b.n	8001a94 <HAL_RCC_OscConfig+0xd4>
 8001a7c:	4b6b      	ldr	r3, [pc, #428]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a86:	6013      	str	r3, [r2, #0]
 8001a88:	4b68      	ldr	r3, [pc, #416]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a67      	ldr	r2, [pc, #412]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001a8e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d013      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a9c:	f7ff fcac 	bl	80013f8 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aa4:	f7ff fca8 	bl	80013f8 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b64      	cmp	r3, #100	@ 0x64
 8001ab0:	d901      	bls.n	8001ab6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e200      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d0f0      	beq.n	8001aa4 <HAL_RCC_OscConfig+0xe4>
 8001ac2:	e014      	b.n	8001aee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac4:	f7ff fc98 	bl	80013f8 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001acc:	f7ff fc94 	bl	80013f8 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b64      	cmp	r3, #100	@ 0x64
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e1ec      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ade:	4b53      	ldr	r3, [pc, #332]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x10c>
 8001aea:	e000      	b.n	8001aee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0302 	and.w	r3, r3, #2
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d063      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001afa:	4b4c      	ldr	r3, [pc, #304]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f003 030c 	and.w	r3, r3, #12
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00b      	beq.n	8001b1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b06:	4b49      	ldr	r3, [pc, #292]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b08      	cmp	r3, #8
 8001b10:	d11c      	bne.n	8001b4c <HAL_RCC_OscConfig+0x18c>
 8001b12:	4b46      	ldr	r3, [pc, #280]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d116      	bne.n	8001b4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b1e:	4b43      	ldr	r3, [pc, #268]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <HAL_RCC_OscConfig+0x176>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	691b      	ldr	r3, [r3, #16]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d001      	beq.n	8001b36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1c0      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b36:	4b3d      	ldr	r3, [pc, #244]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	695b      	ldr	r3, [r3, #20]
 8001b42:	00db      	lsls	r3, r3, #3
 8001b44:	4939      	ldr	r1, [pc, #228]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b46:	4313      	orrs	r3, r2
 8001b48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4a:	e03a      	b.n	8001bc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d020      	beq.n	8001b96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b54:	4b36      	ldr	r3, [pc, #216]	@ (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5a:	f7ff fc4d 	bl	80013f8 <HAL_GetTick>
 8001b5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b60:	e008      	b.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b62:	f7ff fc49 	bl	80013f8 <HAL_GetTick>
 8001b66:	4602      	mov	r2, r0
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e1a1      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b74:	4b2d      	ldr	r3, [pc, #180]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f003 0302 	and.w	r3, r3, #2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d0f0      	beq.n	8001b62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b80:	4b2a      	ldr	r3, [pc, #168]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	695b      	ldr	r3, [r3, #20]
 8001b8c:	00db      	lsls	r3, r3, #3
 8001b8e:	4927      	ldr	r1, [pc, #156]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	600b      	str	r3, [r1, #0]
 8001b94:	e015      	b.n	8001bc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b96:	4b26      	ldr	r3, [pc, #152]	@ (8001c30 <HAL_RCC_OscConfig+0x270>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc2c 	bl	80013f8 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ba4:	f7ff fc28 	bl	80013f8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e180      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0308 	and.w	r3, r3, #8
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d03a      	beq.n	8001c44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699b      	ldr	r3, [r3, #24]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d019      	beq.n	8001c0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bd6:	4b17      	ldr	r3, [pc, #92]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fc0c 	bl	80013f8 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be4:	f7ff fc08 	bl	80013f8 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e160      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8001c2c <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	f003 0302 	and.w	r3, r3, #2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 fa9c 	bl	8002140 <RCC_Delay>
 8001c08:	e01c      	b.n	8001c44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_RCC_OscConfig+0x274>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c10:	f7ff fbf2 	bl	80013f8 <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c16:	e00f      	b.n	8001c38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c18:	f7ff fbee 	bl	80013f8 <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d908      	bls.n	8001c38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e146      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
 8001c2a:	bf00      	nop
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	42420000 	.word	0x42420000
 8001c34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c38:	4b92      	ldr	r3, [pc, #584]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1e9      	bne.n	8001c18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80a6 	beq.w	8001d9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c56:	4b8b      	ldr	r3, [pc, #556]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10d      	bne.n	8001c7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c62:	4b88      	ldr	r3, [pc, #544]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	4a87      	ldr	r2, [pc, #540]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c6c:	61d3      	str	r3, [r2, #28]
 8001c6e:	4b85      	ldr	r3, [pc, #532]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c76:	60bb      	str	r3, [r7, #8]
 8001c78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c7e:	4b82      	ldr	r3, [pc, #520]	@ (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d118      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c8a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001c90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c96:	f7ff fbaf 	bl	80013f8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c9e:	f7ff fbab 	bl	80013f8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	@ 0x64
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e103      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb0:	4b75      	ldr	r3, [pc, #468]	@ (8001e88 <HAL_RCC_OscConfig+0x4c8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d106      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x312>
 8001cc4:	4b6f      	ldr	r3, [pc, #444]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cc6:	6a1b      	ldr	r3, [r3, #32]
 8001cc8:	4a6e      	ldr	r2, [pc, #440]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6213      	str	r3, [r2, #32]
 8001cd0:	e02d      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x334>
 8001cda:	4b6a      	ldr	r3, [pc, #424]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a69      	ldr	r2, [pc, #420]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001ce0:	f023 0301 	bic.w	r3, r3, #1
 8001ce4:	6213      	str	r3, [r2, #32]
 8001ce6:	4b67      	ldr	r3, [pc, #412]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	6a1b      	ldr	r3, [r3, #32]
 8001cea:	4a66      	ldr	r2, [pc, #408]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cec:	f023 0304 	bic.w	r3, r3, #4
 8001cf0:	6213      	str	r3, [r2, #32]
 8001cf2:	e01c      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x356>
 8001cfc:	4b61      	ldr	r3, [pc, #388]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001cfe:	6a1b      	ldr	r3, [r3, #32]
 8001d00:	4a60      	ldr	r2, [pc, #384]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d02:	f043 0304 	orr.w	r3, r3, #4
 8001d06:	6213      	str	r3, [r2, #32]
 8001d08:	4b5e      	ldr	r3, [pc, #376]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4a5d      	ldr	r2, [pc, #372]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f043 0301 	orr.w	r3, r3, #1
 8001d12:	6213      	str	r3, [r2, #32]
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x36e>
 8001d16:	4b5b      	ldr	r3, [pc, #364]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a5a      	ldr	r2, [pc, #360]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f023 0301 	bic.w	r3, r3, #1
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	4b58      	ldr	r3, [pc, #352]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d24:	6a1b      	ldr	r3, [r3, #32]
 8001d26:	4a57      	ldr	r2, [pc, #348]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d28:	f023 0304 	bic.w	r3, r3, #4
 8001d2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d015      	beq.n	8001d62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d36:	f7ff fb5f 	bl	80013f8 <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	e00a      	b.n	8001d54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d3e:	f7ff fb5b 	bl	80013f8 <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e0b1      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d54:	4b4b      	ldr	r3, [pc, #300]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d56:	6a1b      	ldr	r3, [r3, #32]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0ee      	beq.n	8001d3e <HAL_RCC_OscConfig+0x37e>
 8001d60:	e014      	b.n	8001d8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d62:	f7ff fb49 	bl	80013f8 <HAL_GetTick>
 8001d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d68:	e00a      	b.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6a:	f7ff fb45 	bl	80013f8 <HAL_GetTick>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	1ad3      	subs	r3, r2, r3
 8001d74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d901      	bls.n	8001d80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e09b      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d80:	4b40      	ldr	r3, [pc, #256]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d82:	6a1b      	ldr	r3, [r3, #32]
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1ee      	bne.n	8001d6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d8c:	7dfb      	ldrb	r3, [r7, #23]
 8001d8e:	2b01      	cmp	r3, #1
 8001d90:	d105      	bne.n	8001d9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d92:	4b3c      	ldr	r3, [pc, #240]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	4a3b      	ldr	r2, [pc, #236]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f000 8087 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da8:	4b36      	ldr	r3, [pc, #216]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 030c 	and.w	r3, r3, #12
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	d061      	beq.n	8001e78 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d146      	bne.n	8001e4a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dbc:	4b33      	ldr	r3, [pc, #204]	@ (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc2:	f7ff fb19 	bl	80013f8 <HAL_GetTick>
 8001dc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dca:	f7ff fb15 	bl	80013f8 <HAL_GetTick>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e06d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ddc:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d1f0      	bne.n	8001dca <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a1b      	ldr	r3, [r3, #32]
 8001dec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df0:	d108      	bne.n	8001e04 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001df2:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	4921      	ldr	r1, [pc, #132]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e04:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a19      	ldr	r1, [r3, #32]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e14:	430b      	orrs	r3, r1
 8001e16:	491b      	ldr	r1, [pc, #108]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e22:	f7ff fae9 	bl	80013f8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff fae5 	bl	80013f8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e03d      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x46a>
 8001e48:	e035      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <HAL_RCC_OscConfig+0x4cc>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7ff fad2 	bl	80013f8 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e58:	f7ff face 	bl	80013f8 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e026      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x498>
 8001e76:	e01e      	b.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69db      	ldr	r3, [r3, #28]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d107      	bne.n	8001e90 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e80:	2301      	movs	r3, #1
 8001e82:	e019      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40007000 	.word	0x40007000
 8001e8c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ec0 <HAL_RCC_OscConfig+0x500>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	429a      	cmp	r2, r3
 8001ea2:	d106      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d001      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000

08001ec4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0d0      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b6a      	ldr	r3, [pc, #424]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d910      	bls.n	8001f08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b67      	ldr	r3, [pc, #412]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f023 0207 	bic.w	r2, r3, #7
 8001eee:	4965      	ldr	r1, [pc, #404]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	683a      	ldr	r2, [r7, #0]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d001      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e0b8      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0302 	and.w	r3, r3, #2
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d020      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0304 	and.w	r3, r3, #4
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	4b59      	ldr	r3, [pc, #356]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	4a58      	ldr	r2, [pc, #352]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001f2a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d005      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f38:	4b53      	ldr	r3, [pc, #332]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	4a52      	ldr	r2, [pc, #328]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f3e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001f42:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b50      	ldr	r3, [pc, #320]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	494d      	ldr	r1, [pc, #308]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d040      	beq.n	8001fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6a:	4b47      	ldr	r3, [pc, #284]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d115      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e07f      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f82:	4b41      	ldr	r3, [pc, #260]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e073      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f92:	4b3d      	ldr	r3, [pc, #244]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d101      	bne.n	8001fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e06b      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fa2:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f023 0203 	bic.w	r2, r3, #3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4936      	ldr	r1, [pc, #216]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fb4:	f7ff fa20 	bl	80013f8 <HAL_GetTick>
 8001fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fba:	e00a      	b.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fbc:	f7ff fa1c 	bl	80013f8 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d901      	bls.n	8001fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fce:	2303      	movs	r3, #3
 8001fd0:	e053      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	4b2d      	ldr	r3, [pc, #180]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	f003 020c 	and.w	r2, r3, #12
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d1eb      	bne.n	8001fbc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b27      	ldr	r3, [pc, #156]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d210      	bcs.n	8002014 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f023 0207 	bic.w	r2, r3, #7
 8001ffa:	4922      	ldr	r1, [pc, #136]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002002:	4b20      	ldr	r3, [pc, #128]	@ (8002084 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	683a      	ldr	r2, [r7, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d001      	beq.n	8002014 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e032      	b.n	800207a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0304 	and.w	r3, r3, #4
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002020:	4b19      	ldr	r3, [pc, #100]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	4916      	ldr	r1, [pc, #88]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800202e:	4313      	orrs	r3, r2
 8002030:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0308 	and.w	r3, r3, #8
 800203a:	2b00      	cmp	r3, #0
 800203c:	d009      	beq.n	8002052 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800203e:	4b12      	ldr	r3, [pc, #72]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	691b      	ldr	r3, [r3, #16]
 800204a:	00db      	lsls	r3, r3, #3
 800204c:	490e      	ldr	r1, [pc, #56]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002052:	f000 f821 	bl	8002098 <HAL_RCC_GetSysClockFreq>
 8002056:	4602      	mov	r2, r0
 8002058:	4b0b      	ldr	r3, [pc, #44]	@ (8002088 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	091b      	lsrs	r3, r3, #4
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	490a      	ldr	r1, [pc, #40]	@ (800208c <HAL_RCC_ClockConfig+0x1c8>)
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa22 f303 	lsr.w	r3, r2, r3
 800206a:	4a09      	ldr	r2, [pc, #36]	@ (8002090 <HAL_RCC_ClockConfig+0x1cc>)
 800206c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800206e:	4b09      	ldr	r3, [pc, #36]	@ (8002094 <HAL_RCC_ClockConfig+0x1d0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f7ff f990 	bl	8001398 <HAL_InitTick>

  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000
 8002088:	40021000 	.word	0x40021000
 800208c:	08002838 	.word	0x08002838
 8002090:	20000004 	.word	0x20000004
 8002094:	20000008 	.word	0x20000008

08002098 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002098:	b480      	push	{r7}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800209e:	2300      	movs	r3, #0
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	2300      	movs	r3, #0
 80020a4:	60bb      	str	r3, [r7, #8]
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020b2:	4b1e      	ldr	r3, [pc, #120]	@ (800212c <HAL_RCC_GetSysClockFreq+0x94>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f003 030c 	and.w	r3, r3, #12
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d002      	beq.n	80020c8 <HAL_RCC_GetSysClockFreq+0x30>
 80020c2:	2b08      	cmp	r3, #8
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0x36>
 80020c6:	e027      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ca:	613b      	str	r3, [r7, #16]
      break;
 80020cc:	e027      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	0c9b      	lsrs	r3, r3, #18
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	4a17      	ldr	r2, [pc, #92]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020d8:	5cd3      	ldrb	r3, [r2, r3]
 80020da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020e6:	4b11      	ldr	r3, [pc, #68]	@ (800212c <HAL_RCC_GetSysClockFreq+0x94>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	0c5b      	lsrs	r3, r3, #17
 80020ec:	f003 0301 	and.w	r3, r3, #1
 80020f0:	4a11      	ldr	r2, [pc, #68]	@ (8002138 <HAL_RCC_GetSysClockFreq+0xa0>)
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
 80020f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002130 <HAL_RCC_GetSysClockFreq+0x98>)
 80020fa:	fb03 f202 	mul.w	r2, r3, r2
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	e004      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	4a0c      	ldr	r2, [pc, #48]	@ (800213c <HAL_RCC_GetSysClockFreq+0xa4>)
 800210c:	fb02 f303 	mul.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	613b      	str	r3, [r7, #16]
      break;
 8002116:	e002      	b.n	800211e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002118:	4b05      	ldr	r3, [pc, #20]	@ (8002130 <HAL_RCC_GetSysClockFreq+0x98>)
 800211a:	613b      	str	r3, [r7, #16]
      break;
 800211c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800211e:	693b      	ldr	r3, [r7, #16]
}
 8002120:	4618      	mov	r0, r3
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	bc80      	pop	{r7}
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	007a1200 	.word	0x007a1200
 8002134:	08002850 	.word	0x08002850
 8002138:	08002860 	.word	0x08002860
 800213c:	003d0900 	.word	0x003d0900

08002140 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002148:	4b0a      	ldr	r3, [pc, #40]	@ (8002174 <RCC_Delay+0x34>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <RCC_Delay+0x38>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	0a5b      	lsrs	r3, r3, #9
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	fb02 f303 	mul.w	r3, r2, r3
 800215a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800215c:	bf00      	nop
  }
  while (Delay --);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1e5a      	subs	r2, r3, #1
 8002162:	60fa      	str	r2, [r7, #12]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1f9      	bne.n	800215c <RCC_Delay+0x1c>
}
 8002168:	bf00      	nop
 800216a:	bf00      	nop
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr
 8002174:	20000004 	.word	0x20000004
 8002178:	10624dd3 	.word	0x10624dd3

0800217c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_OUTPUT
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800217c:	b490      	push	{r4, r7}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	461a      	mov	r2, r3
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	0e1b      	lsrs	r3, r3, #24
 8002190:	4413      	add	r3, r2
 8002192:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, ((GPIO_CRL_CNF0 | GPIO_CRL_MODE0) << (POSITION_VAL(Pin) * 4U)), (Mode << (POSITION_VAL(Pin) * 4U)));
 8002194:	6822      	ldr	r2, [r4, #0]
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	fa93 f3a3 	rbit	r3, r3
 80021a0:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	210f      	movs	r1, #15
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa93 f3a3 	rbit	r3, r3
 80021c0:	61bb      	str	r3, [r7, #24]
  return result;
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	fab3 f383 	clz	r3, r3
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	6879      	ldr	r1, [r7, #4]
 80021ce:	fa01 f303 	lsl.w	r3, r1, r3
 80021d2:	4313      	orrs	r3, r2
 80021d4:	6023      	str	r3, [r4, #0]
}
 80021d6:	bf00      	nop
 80021d8:	3720      	adds	r7, #32
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc90      	pop	{r4, r7}
 80021de:	4770      	bx	lr

080021e0 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80021e0:	b490      	push	{r4, r7}
 80021e2:	b088      	sub	sp, #32
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	60f8      	str	r0, [r7, #12]
 80021e8:	60b9      	str	r1, [r7, #8]
 80021ea:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	461a      	mov	r2, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	0e1b      	lsrs	r3, r3, #24
 80021f4:	4413      	add	r3, r2
 80021f6:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_MODE0 << (POSITION_VAL(Pin) * 4U)),
 80021f8:	6822      	ldr	r2, [r4, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	fa93 f3a3 	rbit	r3, r3
 8002204:	613b      	str	r3, [r7, #16]
  return result;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	fab3 f383 	clz	r3, r3
 800220c:	b2db      	uxtb	r3, r3
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	2103      	movs	r1, #3
 8002212:	fa01 f303 	lsl.w	r3, r1, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	401a      	ands	r2, r3
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	61bb      	str	r3, [r7, #24]
  return result;
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	fab3 f383 	clz	r3, r3
 800222c:	b2db      	uxtb	r3, r3
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	6023      	str	r3, [r4, #0]
             (Speed << (POSITION_VAL(Pin) * 4U)));
}
 800223a:	bf00      	nop
 800223c:	3720      	adds	r7, #32
 800223e:	46bd      	mov	sp, r7
 8002240:	bc90      	pop	{r4, r7}
 8002242:	4770      	bx	lr

08002244 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t OutputType)
{
 8002244:	b490      	push	{r4, r7}
 8002246:	b088      	sub	sp, #32
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	607a      	str	r2, [r7, #4]
  register uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&GPIOx->CRL) + (Pin >> 24)));
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	461a      	mov	r2, r3
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	0e1b      	lsrs	r3, r3, #24
 8002258:	4413      	add	r3, r2
 800225a:	461c      	mov	r4, r3
  MODIFY_REG(*pReg, (GPIO_CRL_CNF0_0 << (POSITION_VAL(Pin) * 4U)),
 800225c:	6822      	ldr	r2, [r4, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	fa93 f3a3 	rbit	r3, r3
 8002268:	613b      	str	r3, [r7, #16]
  return result;
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	2104      	movs	r1, #4
 8002276:	fa01 f303 	lsl.w	r3, r1, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	fa93 f3a3 	rbit	r3, r3
 8002288:	61bb      	str	r3, [r7, #24]
  return result;
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	fab3 f383 	clz	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	4313      	orrs	r3, r2
 800229c:	6023      	str	r3, [r4, #0]
             (OutputType << (POSITION_VAL(Pin) * 4U)));
}
 800229e:	bf00      	nop
 80022a0:	3720      	adds	r7, #32
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bc90      	pop	{r4, r7}
 80022a6:	4770      	bx	lr

080022a8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_DOWN
  *         @arg @ref LL_GPIO_PULL_UP
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->ODR, (Pin >> GPIO_PIN_MASK_POS), Pull << (POSITION_VAL(Pin >> GPIO_PIN_MASK_POS)));
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	68da      	ldr	r2, [r3, #12]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	43db      	mvns	r3, r3
 80022be:	401a      	ands	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	fa93 f3a3 	rbit	r3, r3
 80022cc:	613b      	str	r3, [r7, #16]
  return result;
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	fab3 f383 	clz	r3, r3
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4619      	mov	r1, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	408b      	lsls	r3, r1
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	60da      	str	r2, [r3, #12]
}
 80022e2:	bf00      	nop
 80022e4:	371c      	adds	r7, #28
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bc80      	pop	{r7}
 80022ea:	4770      	bx	lr

080022ec <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b088      	sub	sp, #32
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_PIN(GPIO_InitStruct->Pin));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */

  pinmask = ((GPIO_InitStruct->Pin) << GPIO_PIN_MASK_POS) >> GPIO_PIN_NB;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	021b      	lsls	r3, r3, #8
 80022fc:	0c1b      	lsrs	r3, r3, #16
 80022fe:	617b      	str	r3, [r7, #20]
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	fa93 f3a3 	rbit	r3, r3
 800230a:	60fb      	str	r3, [r7, #12]
  return result;
 800230c:	68fb      	ldr	r3, [r7, #12]
  pinpos = POSITION_VAL(pinmask);
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while ((pinmask  >> pinpos) != 0u)
 8002316:	e044      	b.n	80023a2 <LL_GPIO_Init+0xb6>
  {
    /* skip if bit is not set */
    if ((pinmask & (1u << pinpos)) != 0u)
 8002318:	2201      	movs	r2, #1
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	409a      	lsls	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	4013      	ands	r3, r2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d03a      	beq.n	800239c <LL_GPIO_Init+0xb0>
    {
      /* Get current io position */
      if (pinpos < GPIO_PIN_MASK_POS)
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	2b07      	cmp	r3, #7
 800232a:	d806      	bhi.n	800233a <LL_GPIO_Init+0x4e>
      {
        currentpin = (0x00000101uL << pinpos);
 800232c:	f240 1201 	movw	r2, #257	@ 0x101
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	61bb      	str	r3, [r7, #24]
 8002338:	e008      	b.n	800234c <LL_GPIO_Init+0x60>
      }
      else
      {
        currentpin = ((0x00010001u << (pinpos - GPIO_PIN_MASK_POS)) | 0x04000000u);
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	3b08      	subs	r3, #8
 800233e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800234a:	61bb      	str	r3, [r7, #24]
      }

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_INPUT)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b08      	cmp	r3, #8
 8002352:	d106      	bne.n	8002362 <LL_GPIO_Init+0x76>
      {
        /* Check The Pull parameter */
        assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

        /* Pull-up Pull-down resistor configuration*/
        LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	461a      	mov	r2, r3
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff ffa3 	bl	80022a8 <LL_GPIO_SetPinPull>
      
      /* Check Pin Mode parameters */
      assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff06 	bl	800217c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d003      	beq.n	8002380 <LL_GPIO_Init+0x94>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b09      	cmp	r3, #9
 800237e:	d10d      	bne.n	800239c <LL_GPIO_Init+0xb0>
        /* Check speed and Output mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	461a      	mov	r2, r3
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff ff29 	bl	80021e0 <LL_GPIO_SetPinSpeed>

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	461a      	mov	r2, r3
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff54 	bl	8002244 <LL_GPIO_SetPinOutputType>
      }
    }
    pinpos++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
  while ((pinmask  >> pinpos) != 0u)
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d1b4      	bne.n	8002318 <LL_GPIO_Init+0x2c>
  }
  return (SUCCESS);
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3720      	adds	r7, #32
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80023bc:	4b03      	ldr	r3, [pc, #12]	@ (80023cc <LL_RCC_GetSysClkSource+0x14>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f003 030c 	and.w	r3, r3, #12
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc80      	pop	{r7}
 80023ca:	4770      	bx	lr
 80023cc:	40021000 	.word	0x40021000

080023d0 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80023d4:	4b03      	ldr	r3, [pc, #12]	@ (80023e4 <LL_RCC_GetAHBPrescaler+0x14>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	40021000 	.word	0x40021000

080023e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80023ec:	4b03      	ldr	r3, [pc, #12]	@ (80023fc <LL_RCC_GetAPB1Prescaler+0x14>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr
 80023fc:	40021000 	.word	0x40021000

08002400 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002404:	4b03      	ldr	r3, [pc, #12]	@ (8002414 <LL_RCC_GetAPB2Prescaler+0x14>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 800240c:	4618      	mov	r0, r3
 800240e:	46bd      	mov	sp, r7
 8002410:	bc80      	pop	{r7}
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000

08002418 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_PLL2 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t pllsrc = READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC);
  uint32_t predivsrc = (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC) << 4U);
  return (uint32_t)(pllsrc | predivsrc);
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 800241c:	4b03      	ldr	r3, [pc, #12]	@ (800242c <LL_RCC_PLL_GetMainSource+0x14>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
#endif /*RCC_CFGR2_PREDIV1SRC*/
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40021000 	.word	0x40021000

08002430 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMULL));
 8002434:	4b03      	ldr	r3, [pc, #12]	@ (8002444 <LL_RCC_PLL_GetMultiplicator+0x14>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
}
 800243c:	4618      	mov	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr
 8002444:	40021000 	.word	0x40021000

08002448 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_16 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1)
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1));
#else
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos);
 800244c:	4b04      	ldr	r3, [pc, #16]	@ (8002460 <LL_RCC_PLL_GetPrediv+0x18>)
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	0c5b      	lsrs	r3, r3, #17
 8002452:	f003 0301 	and.w	r3, r3, #1
#endif /*RCC_CFGR2_PREDIV1*/
}
 8002456:	4618      	mov	r0, r3
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40021000 	.word	0x40021000

08002464 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 800246c:	f000 f820 	bl	80024b0 <RCC_GetSystemClockFreq>
 8002470:	4602      	mov	r2, r0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f83e 	bl	80024fc <RCC_GetHCLKClockFreq>
 8002480:	4602      	mov	r2, r0
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	4618      	mov	r0, r3
 800248c:	f000 f84c 	bl	8002528 <RCC_GetPCLK1ClockFreq>
 8002490:	4602      	mov	r2, r0
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	4618      	mov	r0, r3
 800249c:	f000 f858 	bl	8002550 <RCC_GetPCLK2ClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60da      	str	r2, [r3, #12]
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
	...

080024b0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80024ba:	f7ff ff7d 	bl	80023b8 <LL_RCC_GetSysClkSource>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b08      	cmp	r3, #8
 80024c2:	d00c      	beq.n	80024de <RCC_GetSystemClockFreq+0x2e>
 80024c4:	2b08      	cmp	r3, #8
 80024c6:	d80e      	bhi.n	80024e6 <RCC_GetSystemClockFreq+0x36>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <RCC_GetSystemClockFreq+0x22>
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d003      	beq.n	80024d8 <RCC_GetSystemClockFreq+0x28>
 80024d0:	e009      	b.n	80024e6 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80024d2:	4b09      	ldr	r3, [pc, #36]	@ (80024f8 <RCC_GetSystemClockFreq+0x48>)
 80024d4:	607b      	str	r3, [r7, #4]
      break;
 80024d6:	e009      	b.n	80024ec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80024d8:	4b07      	ldr	r3, [pc, #28]	@ (80024f8 <RCC_GetSystemClockFreq+0x48>)
 80024da:	607b      	str	r3, [r7, #4]
      break;
 80024dc:	e006      	b.n	80024ec <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80024de:	f000 f84b 	bl	8002578 <RCC_PLL_GetFreqDomain_SYS>
 80024e2:	6078      	str	r0, [r7, #4]
      break;
 80024e4:	e002      	b.n	80024ec <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 80024e6:	4b04      	ldr	r3, [pc, #16]	@ (80024f8 <RCC_GetSystemClockFreq+0x48>)
 80024e8:	607b      	str	r3, [r7, #4]
      break;
 80024ea:	bf00      	nop
  }

  return frequency;
 80024ec:	687b      	ldr	r3, [r7, #4]
}
 80024ee:	4618      	mov	r0, r3
 80024f0:	3708      	adds	r7, #8
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	007a1200 	.word	0x007a1200

080024fc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002504:	f7ff ff64 	bl	80023d0 <LL_RCC_GetAHBPrescaler>
 8002508:	4603      	mov	r3, r0
 800250a:	091b      	lsrs	r3, r3, #4
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	4a04      	ldr	r2, [pc, #16]	@ (8002524 <RCC_GetHCLKClockFreq+0x28>)
 8002512:	5cd3      	ldrb	r3, [r2, r3]
 8002514:	461a      	mov	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	40d3      	lsrs	r3, r2
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	08002838 	.word	0x08002838

08002528 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002530:	f7ff ff5a 	bl	80023e8 <LL_RCC_GetAPB1Prescaler>
 8002534:	4603      	mov	r3, r0
 8002536:	0a1b      	lsrs	r3, r3, #8
 8002538:	4a04      	ldr	r2, [pc, #16]	@ (800254c <RCC_GetPCLK1ClockFreq+0x24>)
 800253a:	5cd3      	ldrb	r3, [r2, r3]
 800253c:	461a      	mov	r2, r3
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	40d3      	lsrs	r3, r2
}
 8002542:	4618      	mov	r0, r3
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	08002848 	.word	0x08002848

08002550 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002558:	f7ff ff52 	bl	8002400 <LL_RCC_GetAPB2Prescaler>
 800255c:	4603      	mov	r3, r0
 800255e:	0adb      	lsrs	r3, r3, #11
 8002560:	4a04      	ldr	r2, [pc, #16]	@ (8002574 <RCC_GetPCLK2ClockFreq+0x24>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	461a      	mov	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	40d3      	lsrs	r3, r2
}
 800256a:	4618      	mov	r0, r3
 800256c:	3708      	adds	r7, #8
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	08002848 	.word	0x08002848

08002578 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b082      	sub	sp, #8
 800257c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800257e:	2300      	movs	r3, #0
 8002580:	607b      	str	r3, [r7, #4]
 8002582:	2300      	movs	r3, #0
 8002584:	603b      	str	r3, [r7, #0]

  /* PLL_VCO = (HSE_VALUE, HSI_VALUE or PLL2 / PLL Predivider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002586:	f7ff ff47 	bl	8002418 <LL_RCC_PLL_GetMainSource>
 800258a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d004      	beq.n	800259c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002598:	d003      	beq.n	80025a2 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800259a:	e00b      	b.n	80025b4 <RCC_PLL_GetFreqDomain_SYS+0x3c>
  {
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800259c:	4b0d      	ldr	r3, [pc, #52]	@ (80025d4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 800259e:	607b      	str	r3, [r7, #4]
      break;
 80025a0:	e00b      	b.n	80025ba <RCC_PLL_GetFreqDomain_SYS+0x42>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE / (LL_RCC_PLL_GetPrediv() + 1U);
 80025a2:	f7ff ff51 	bl	8002448 <LL_RCC_PLL_GetPrediv>
 80025a6:	4603      	mov	r3, r0
 80025a8:	3301      	adds	r3, #1
 80025aa:	4a0b      	ldr	r2, [pc, #44]	@ (80025d8 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 80025ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b0:	607b      	str	r3, [r7, #4]
      break;
 80025b2:	e002      	b.n	80025ba <RCC_PLL_GetFreqDomain_SYS+0x42>
      pllinputfreq = RCC_PLL2_GetFreqClockFreq() / (LL_RCC_PLL_GetPrediv() + 1U);
      break;
#endif /* RCC_PLL2_SUPPORT */

    default:
      pllinputfreq = HSI_VALUE / 2U;
 80025b4:	4b07      	ldr	r3, [pc, #28]	@ (80025d4 <RCC_PLL_GetFreqDomain_SYS+0x5c>)
 80025b6:	607b      	str	r3, [r7, #4]
      break;
 80025b8:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator());
 80025ba:	f7ff ff39 	bl	8002430 <LL_RCC_PLL_GetMultiplicator>
 80025be:	4603      	mov	r3, r0
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	3302      	adds	r3, #2
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	003d0900 	.word	0x003d0900
 80025d8:	007a1200 	.word	0x007a1200

080025dc <LL_USART_IsEnabled>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025f0:	bf0c      	ite	eq
 80025f2:	2301      	moveq	r3, #1
 80025f4:	2300      	movne	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bc80      	pop	{r7}
 8002600:	4770      	bx	lr

08002602 <LL_USART_SetStopBitsLength>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	611a      	str	r2, [r3, #16]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr

08002626 <LL_USART_SetHWFlowCtrl>:
{
 8002626:	b480      	push	{r7}
 8002628:	b083      	sub	sp, #12
 800262a:	af00      	add	r7, sp, #0
 800262c:	6078      	str	r0, [r7, #4]
 800262e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	615a      	str	r2, [r3, #20]
}
 8002640:	bf00      	nop
 8002642:	370c      	adds	r7, #12
 8002644:	46bd      	mov	sp, r7
 8002646:	bc80      	pop	{r7}
 8002648:	4770      	bx	lr
	...

0800264c <LL_USART_SetBaudRate>:
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	009a      	lsls	r2, r3, #2
 8002662:	441a      	add	r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	fbb2 f3f3 	udiv	r3, r2, r3
 800266c:	4a25      	ldr	r2, [pc, #148]	@ (8002704 <LL_USART_SetBaudRate+0xb8>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	b29b      	uxth	r3, r3
 8002676:	011b      	lsls	r3, r3, #4
 8002678:	b299      	uxth	r1, r3
 800267a:	68ba      	ldr	r2, [r7, #8]
 800267c:	4613      	mov	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	4413      	add	r3, r2
 8002682:	009a      	lsls	r2, r3, #2
 8002684:	441a      	add	r2, r3
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	fbb2 f2f3 	udiv	r2, r2, r3
 800268e:	4b1d      	ldr	r3, [pc, #116]	@ (8002704 <LL_USART_SetBaudRate+0xb8>)
 8002690:	fba3 0302 	umull	r0, r3, r3, r2
 8002694:	095b      	lsrs	r3, r3, #5
 8002696:	2064      	movs	r0, #100	@ 0x64
 8002698:	fb00 f303 	mul.w	r3, r0, r3
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	3332      	adds	r3, #50	@ 0x32
 80026a2:	4a18      	ldr	r2, [pc, #96]	@ (8002704 <LL_USART_SetBaudRate+0xb8>)
 80026a4:	fba2 2303 	umull	r2, r3, r2, r3
 80026a8:	095b      	lsrs	r3, r3, #5
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	440b      	add	r3, r1
 80026b4:	b299      	uxth	r1, r3
 80026b6:	68ba      	ldr	r2, [r7, #8]
 80026b8:	4613      	mov	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	4413      	add	r3, r2
 80026be:	009a      	lsls	r2, r3, #2
 80026c0:	441a      	add	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002704 <LL_USART_SetBaudRate+0xb8>)
 80026cc:	fba3 0302 	umull	r0, r3, r3, r2
 80026d0:	095b      	lsrs	r3, r3, #5
 80026d2:	2064      	movs	r0, #100	@ 0x64
 80026d4:	fb00 f303 	mul.w	r3, r0, r3
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	3332      	adds	r3, #50	@ 0x32
 80026de:	4a09      	ldr	r2, [pc, #36]	@ (8002704 <LL_USART_SetBaudRate+0xb8>)
 80026e0:	fba2 2303 	umull	r2, r3, r2, r3
 80026e4:	095b      	lsrs	r3, r3, #5
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	b29b      	uxth	r3, r3
 80026ee:	440b      	add	r3, r1
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	461a      	mov	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	609a      	str	r2, [r3, #8]
}
 80026f8:	bf00      	nop
 80026fa:	3714      	adds	r7, #20
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	51eb851f 	.word	0x51eb851f

08002708 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b088      	sub	sp, #32
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002716:	2300      	movs	r3, #0
 8002718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));
#endif /* USART_OverSampling_Feature */

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ff5e 	bl	80025dc <LL_USART_IsEnabled>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d145      	bne.n	80027b2 <LL_USART_Init+0xaa>
               (USART_CR1_M | USART_CR1_PCE | USART_CR1_PS |
                USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
               (USART_InitStruct->DataWidth | USART_InitStruct->Parity |
                USART_InitStruct->TransferDirection | USART_InitStruct->OverSampling));
#else
    MODIFY_REG(USARTx->CR1,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800272e:	f023 030c 	bic.w	r3, r3, #12
 8002732:	683a      	ldr	r2, [r7, #0]
 8002734:	6851      	ldr	r1, [r2, #4]
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	68d2      	ldr	r2, [r2, #12]
 800273a:	4311      	orrs	r1, r2
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	6912      	ldr	r2, [r2, #16]
 8002740:	430a      	orrs	r2, r1
 8002742:	431a      	orrs	r2, r3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	4619      	mov	r1, r3
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f7ff ff57 	bl	8002602 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	695b      	ldr	r3, [r3, #20]
 8002758:	4619      	mov	r1, r3
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff63 	bl	8002626 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8002760:	f107 0308 	add.w	r3, r7, #8
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff fe7d 	bl	8002464 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <LL_USART_Init+0xb4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d102      	bne.n	8002778 <LL_USART_Init+0x70>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	61bb      	str	r3, [r7, #24]
 8002776:	e00c      	b.n	8002792 <LL_USART_Init+0x8a>
    }
    else if (USARTx == USART2)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <LL_USART_Init+0xb8>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d102      	bne.n	8002786 <LL_USART_Init+0x7e>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	61bb      	str	r3, [r7, #24]
 8002784:	e005      	b.n	8002792 <LL_USART_Init+0x8a>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4a0e      	ldr	r2, [pc, #56]	@ (80027c4 <LL_USART_Init+0xbc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d101      	bne.n	8002792 <LL_USART_Init+0x8a>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d00c      	beq.n	80027b2 <LL_USART_Init+0xaa>
        && (USART_InitStruct->BaudRate != 0U))
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d008      	beq.n	80027b2 <LL_USART_Init+0xaa>
    {
      status = SUCCESS;
 80027a0:	2300      	movs	r3, #0
 80027a2:	77fb      	strb	r3, [r7, #31]
                           USART_InitStruct->OverSampling,
                           USART_InitStruct->BaudRate);
#else
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->BaudRate);
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 80027a8:	461a      	mov	r2, r3
 80027aa:	69b9      	ldr	r1, [r7, #24]
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff ff4d 	bl	800264c <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80027b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3720      	adds	r7, #32
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40013800 	.word	0x40013800
 80027c0:	40004400 	.word	0x40004400
 80027c4:	40004800 	.word	0x40004800

080027c8 <memset>:
 80027c8:	4603      	mov	r3, r0
 80027ca:	4402      	add	r2, r0
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d100      	bne.n	80027d2 <memset+0xa>
 80027d0:	4770      	bx	lr
 80027d2:	f803 1b01 	strb.w	r1, [r3], #1
 80027d6:	e7f9      	b.n	80027cc <memset+0x4>

080027d8 <__libc_init_array>:
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	2600      	movs	r6, #0
 80027dc:	4d0c      	ldr	r5, [pc, #48]	@ (8002810 <__libc_init_array+0x38>)
 80027de:	4c0d      	ldr	r4, [pc, #52]	@ (8002814 <__libc_init_array+0x3c>)
 80027e0:	1b64      	subs	r4, r4, r5
 80027e2:	10a4      	asrs	r4, r4, #2
 80027e4:	42a6      	cmp	r6, r4
 80027e6:	d109      	bne.n	80027fc <__libc_init_array+0x24>
 80027e8:	f000 f81a 	bl	8002820 <_init>
 80027ec:	2600      	movs	r6, #0
 80027ee:	4d0a      	ldr	r5, [pc, #40]	@ (8002818 <__libc_init_array+0x40>)
 80027f0:	4c0a      	ldr	r4, [pc, #40]	@ (800281c <__libc_init_array+0x44>)
 80027f2:	1b64      	subs	r4, r4, r5
 80027f4:	10a4      	asrs	r4, r4, #2
 80027f6:	42a6      	cmp	r6, r4
 80027f8:	d105      	bne.n	8002806 <__libc_init_array+0x2e>
 80027fa:	bd70      	pop	{r4, r5, r6, pc}
 80027fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8002800:	4798      	blx	r3
 8002802:	3601      	adds	r6, #1
 8002804:	e7ee      	b.n	80027e4 <__libc_init_array+0xc>
 8002806:	f855 3b04 	ldr.w	r3, [r5], #4
 800280a:	4798      	blx	r3
 800280c:	3601      	adds	r6, #1
 800280e:	e7f2      	b.n	80027f6 <__libc_init_array+0x1e>
 8002810:	08002864 	.word	0x08002864
 8002814:	08002864 	.word	0x08002864
 8002818:	08002864 	.word	0x08002864
 800281c:	08002868 	.word	0x08002868

08002820 <_init>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	bf00      	nop
 8002824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002826:	bc08      	pop	{r3}
 8002828:	469e      	mov	lr, r3
 800282a:	4770      	bx	lr

0800282c <_fini>:
 800282c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800282e:	bf00      	nop
 8002830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002832:	bc08      	pop	{r3}
 8002834:	469e      	mov	lr, r3
 8002836:	4770      	bx	lr
